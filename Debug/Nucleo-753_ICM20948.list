
Nucleo-753_ICM20948.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007910  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08007bb0  08007bb0  00008bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080081a0  080081a0  000091a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080081a8  080081a8  000091a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080081ac  080081ac  000091ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  080081b0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000234  240001e0  08008390  0000a1e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000414  08008390  0000a414  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c6a7  00000000  00000000  0000a20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f71  00000000  00000000  000168b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a40  00000000  00000000  00018828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007a1  00000000  00000000  00019268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036f3d  00000000  00000000  00019a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d4f5  00000000  00000000  00050946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00158cf0  00000000  00000000  0005de3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b6b2b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003754  00000000  00000000  001b6b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  001ba2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007b98 	.word	0x08007b98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08007b98 	.word	0x08007b98

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <ICM20948_CS_Select>:

/**
 * @brief 選取 ICM-20948 的 SPI 片選 (CS) 引腳 (設為低電位)。
 * @note  使用 main.h 中定義的 ICM20948_CS_GPIO_Port 和 ICM20948_CS_Pin。
 */
void ICM20948_CS_Select(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800039c:	4808      	ldr	r0, [pc, #32]	@ (80003c0 <ICM20948_CS_Select+0x30>)
 800039e:	f001 fddd 	bl	8001f5c <HAL_GPIO_WritePin>
    // HAL_Delay(1) 太長，但對於基本功能通常可行。若有高速通訊問題可考慮更精確的延遲或移除。
    // 若 SPI 時脈很慢，此延遲可能不需要或可以縮短。
    // 為了確保穩定性，保留一個非常短的延遲或直接移除，取決於 SPI 時脈和硬體特性。
    // 如果 SPI 時脈在 MHz 等級，CPU 指令本身可能就足夠。
    // 這裡保留 HAL_Delay(1) 作為一個保守的選擇，但可以根據實際測試進行優化。
    for (volatile int i = 0; i < 10; i++); // 非常短的延遲替代 HAL_Delay(1)
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	e002      	b.n	80003ae <ICM20948_CS_Select+0x1e>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2b09      	cmp	r3, #9
 80003b2:	ddf9      	ble.n	80003a8 <ICM20948_CS_Select+0x18>
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58020c00 	.word	0x58020c00

080003c4 <ICM20948_CS_Deselect>:

/**
 * @brief 取消選取 ICM-20948 的 SPI 片選 (CS) 引腳 (設為高電位)。
 * @note  使用 main.h 中定義的 ICM20948_CS_GPIO_Port 和 ICM20948_CS_Pin。
 */
void ICM20948_CS_Deselect(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003d0:	4808      	ldr	r0, [pc, #32]	@ (80003f4 <ICM20948_CS_Deselect+0x30>)
 80003d2:	f001 fdc3 	bl	8001f5c <HAL_GPIO_WritePin>
    // Datasheet 建議 SCLK 下降沿到 CS 高電位至少 20ns (tCSH)
    // 同上，HAL_Delay(1) 可能過長。
    for (volatile int i = 0; i < 10; i++); // 非常短的延遲
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	e002      	b.n	80003e2 <ICM20948_CS_Deselect+0x1e>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3301      	adds	r3, #1
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b09      	cmp	r3, #9
 80003e6:	ddf9      	ble.n	80003dc <ICM20948_CS_Deselect+0x18>
}
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	58020c00 	.word	0x58020c00

080003f8 <ICM20948_WriteByte>:
 * @brief 透過 SPI 寫入單一位元組數據至 ICM-20948 指定暫存器。
 * @param reg_addr: 目標暫存器位址 (7位元，最高位元為0代表寫入)。
 * @param data:     要寫入的數據。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_WriteByte(uint8_t reg_addr, uint8_t data) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	460a      	mov	r2, r1
 8000402:	71fb      	strb	r3, [r7, #7]
 8000404:	4613      	mov	r3, r2
 8000406:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buffer[2];
    HAL_StatusTypeDef status;

    tx_buffer[0] = reg_addr & 0x7F; // 寫入操作，MSB 為 0
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800040e:	b2db      	uxtb	r3, r3
 8000410:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = data;
 8000412:	79bb      	ldrb	r3, [r7, #6]
 8000414:	737b      	strb	r3, [r7, #13]

    ICM20948_CS_Select();
 8000416:	f7ff ffbb 	bl	8000390 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, tx_buffer, 2, SPI_TIMEOUT);
 800041a:	f107 010c 	add.w	r1, r7, #12
 800041e:	2364      	movs	r3, #100	@ 0x64
 8000420:	2202      	movs	r2, #2
 8000422:	4806      	ldr	r0, [pc, #24]	@ (800043c <ICM20948_WriteByte+0x44>)
 8000424:	f004 fa0a 	bl	800483c <HAL_SPI_Transmit>
 8000428:	4603      	mov	r3, r0
 800042a:	73fb      	strb	r3, [r7, #15]
    ICM20948_CS_Deselect();
 800042c:	f7ff ffca 	bl	80003c4 <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理，例如記錄錯誤或重試
    }
    return status;
 8000430:	7bfb      	ldrb	r3, [r7, #15]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	24000238 	.word	0x24000238

08000440 <ICM20948_ReadByte>:
 * @brief 透過 SPI 從 ICM-20948 指定暫存器讀取單一位元組數據。
 * @param reg_addr: 目標暫存器位址 (7位元，最高位元為1代表讀取)。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadByte(uint8_t reg_addr, uint8_t *pData) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	6039      	str	r1, [r7, #0]
 800044a:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte;
    HAL_StatusTypeDef status;

    tx_byte = reg_addr | 0x80; // 讀取操作，MSB 為 1
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000452:	b2db      	uxtb	r3, r3
 8000454:	73bb      	strb	r3, [r7, #14]

    ICM20948_CS_Select();
 8000456:	f7ff ff9b 	bl	8000390 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, &tx_byte, 1, SPI_TIMEOUT); // 發送要讀取的暫存器位址
 800045a:	f107 010e 	add.w	r1, r7, #14
 800045e:	2364      	movs	r3, #100	@ 0x64
 8000460:	2201      	movs	r2, #1
 8000462:	480b      	ldr	r0, [pc, #44]	@ (8000490 <ICM20948_ReadByte+0x50>)
 8000464:	f004 f9ea 	bl	800483c <HAL_SPI_Transmit>
 8000468:	4603      	mov	r3, r0
 800046a:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d107      	bne.n	8000482 <ICM20948_ReadByte+0x42>
        status = HAL_SPI_Receive(&hspi1, pData, 1, SPI_TIMEOUT); // 接收數據
 8000472:	2364      	movs	r3, #100	@ 0x64
 8000474:	2201      	movs	r2, #1
 8000476:	6839      	ldr	r1, [r7, #0]
 8000478:	4805      	ldr	r0, [pc, #20]	@ (8000490 <ICM20948_ReadByte+0x50>)
 800047a:	f004 fbcd 	bl	8004c18 <HAL_SPI_Receive>
 800047e:	4603      	mov	r3, r0
 8000480:	73fb      	strb	r3, [r7, #15]
    }
    ICM20948_CS_Deselect();
 8000482:	f7ff ff9f 	bl	80003c4 <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理
    }
    return status;
 8000486:	7bfb      	ldrb	r3, [r7, #15]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	24000238 	.word	0x24000238

08000494 <ICM20948_ReadBytes>:
 * @param reg_addr: 起始目標暫存器位址 (7位元，最高位元為1代表讀取)。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @param count:    要讀取的位元組數量。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadBytes(uint8_t reg_addr, uint8_t *pData, uint16_t count) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	6039      	str	r1, [r7, #0]
 800049e:	71fb      	strb	r3, [r7, #7]
 80004a0:	4613      	mov	r3, r2
 80004a2:	80bb      	strh	r3, [r7, #4]
    uint8_t tx_byte;
    HAL_StatusTypeDef status;

    tx_byte = reg_addr | 0x80; // 讀取操作，MSB 為 1
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	73bb      	strb	r3, [r7, #14]

    ICM20948_CS_Select();
 80004ae:	f7ff ff6f 	bl	8000390 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, &tx_byte, 1, SPI_TIMEOUT); // 發送起始暫存器位址
 80004b2:	f107 010e 	add.w	r1, r7, #14
 80004b6:	2364      	movs	r3, #100	@ 0x64
 80004b8:	2201      	movs	r2, #1
 80004ba:	480b      	ldr	r0, [pc, #44]	@ (80004e8 <ICM20948_ReadBytes+0x54>)
 80004bc:	f004 f9be 	bl	800483c <HAL_SPI_Transmit>
 80004c0:	4603      	mov	r3, r0
 80004c2:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d107      	bne.n	80004da <ICM20948_ReadBytes+0x46>
        status = HAL_SPI_Receive(&hspi1, pData, count, SPI_TIMEOUT); // 連續接收多個位元組
 80004ca:	88ba      	ldrh	r2, [r7, #4]
 80004cc:	2364      	movs	r3, #100	@ 0x64
 80004ce:	6839      	ldr	r1, [r7, #0]
 80004d0:	4805      	ldr	r0, [pc, #20]	@ (80004e8 <ICM20948_ReadBytes+0x54>)
 80004d2:	f004 fba1 	bl	8004c18 <HAL_SPI_Receive>
 80004d6:	4603      	mov	r3, r0
 80004d8:	73fb      	strb	r3, [r7, #15]
    }
    ICM20948_CS_Deselect();
 80004da:	f7ff ff73 	bl	80003c4 <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理
    }
    return status;
 80004de:	7bfb      	ldrb	r3, [r7, #15]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	24000238 	.word	0x24000238

080004ec <ICM20948_SelectUserBank>:
 * @param bank: 要選擇的庫編號 (0, 1, 2, 或 3)。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 * @note  REG_BANK_SEL 暫存器在所有庫中皆可存取。
 * 位元 [5:4] 用於選擇庫: 00 for UB0, 01 for UB1, 10 for UB2, 11 for UB3.
 */
HAL_StatusTypeDef ICM20948_SelectUserBank(uint8_t bank) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
    if (bank > 3) {
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d901      	bls.n	8000500 <ICM20948_SelectUserBank+0x14>
        return HAL_ERROR; // 無效的庫編號
 80004fc:	2301      	movs	r3, #1
 80004fe:	e007      	b.n	8000510 <ICM20948_SelectUserBank+0x24>
    // REG_BANK_SEL (0x7F) 的位元 [5:4] (USER_BANK) 控制庫選擇
    // bank 0 -> 0x00
    // bank 1 -> 0x10
    // bank 2 -> 0x20
    // bank 3 -> 0x30
    return ICM20948_WriteByte(ICM20948_REG_BANK_SEL, (bank << 4));
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	b2db      	uxtb	r3, r3
 8000506:	4619      	mov	r1, r3
 8000508:	207f      	movs	r0, #127	@ 0x7f
 800050a:	f7ff ff75 	bl	80003f8 <ICM20948_WriteByte>
 800050e:	4603      	mov	r3, r0
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <AK09916_WriteByteViaICM>:
 * @brief 透過 ICM-20948 的 I2C 主機介面，寫入單一位元組數據至 AK09916 磁力計指定暫存器。
 * @param reg_addr: AK09916 的目標暫存器位址。
 * @param data:     要寫入的數據。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_WriteByteViaICM(uint8_t reg_addr, uint8_t data) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	460a      	mov	r2, r1
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	4613      	mov	r3, r2
 8000526:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t current_bank_sel_val;
    uint8_t target_bank = 3; // I2C 主機控制相關暫存器在庫 3
 8000528:	2303      	movs	r3, #3
 800052a:	73fb      	strb	r3, [r7, #15]
    // status = ICM20948_ReadByte(ICM20948_REG_BANK_SEL, &current_bank_sel_val);
    // if (status != HAL_OK) return status;
    // current_bank_sel_val = (current_bank_sel_val >> 4) & 0x03; // 提取庫號

    // 1. 切換到使用者庫 3
    status = ICM20948_SelectUserBank(target_bank);
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ffdc 	bl	80004ec <ICM20948_SelectUserBank>
 8000534:	4603      	mov	r3, r0
 8000536:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) return status;
 8000538:	7bbb      	ldrb	r3, [r7, #14]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <AK09916_WriteByteViaICM+0x2a>
 800053e:	7bbb      	ldrb	r3, [r7, #14]
 8000540:	e040      	b.n	80005c4 <AK09916_WriteByteViaICM+0xac>

    // 2. 設定從裝置位址 (AK09916_I2C_ADDR，不含 R/W 位元，表示寫入)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR); //  R/W bit is 0 for write
 8000542:	210c      	movs	r1, #12
 8000544:	2003      	movs	r0, #3
 8000546:	f7ff ff57 	bl	80003f8 <ICM20948_WriteByte>
 800054a:	4603      	mov	r3, r0
 800054c:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 800054e:	7bbb      	ldrb	r3, [r7, #14]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <AK09916_WriteByteViaICM+0x46>
        ICM20948_SelectUserBank(0); // 嘗試恢復到庫0
 8000554:	2000      	movs	r0, #0
 8000556:	f7ff ffc9 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 800055a:	7bbb      	ldrb	r3, [r7, #14]
 800055c:	e032      	b.n	80005c4 <AK09916_WriteByteViaICM+0xac>
    }

    // 3. 設定要寫入的 AK09916 內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	4619      	mov	r1, r3
 8000562:	2004      	movs	r0, #4
 8000564:	f7ff ff48 	bl	80003f8 <ICM20948_WriteByte>
 8000568:	4603      	mov	r3, r0
 800056a:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d004      	beq.n	800057c <AK09916_WriteByteViaICM+0x64>
        ICM20948_SelectUserBank(0);
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ffba 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 8000578:	7bbb      	ldrb	r3, [r7, #14]
 800057a:	e023      	b.n	80005c4 <AK09916_WriteByteViaICM+0xac>
    }

    // 4. 設定要寫入的數據
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_DO, data);
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	4619      	mov	r1, r3
 8000580:	2006      	movs	r0, #6
 8000582:	f7ff ff39 	bl	80003f8 <ICM20948_WriteByte>
 8000586:	4603      	mov	r3, r0
 8000588:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 800058a:	7bbb      	ldrb	r3, [r7, #14]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d004      	beq.n	800059a <AK09916_WriteByteViaICM+0x82>
        ICM20948_SelectUserBank(0);
 8000590:	2000      	movs	r0, #0
 8000592:	f7ff ffab 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	e014      	b.n	80005c4 <AK09916_WriteByteViaICM+0xac>
    }

    // 5. 致能 I2C 從裝置 0，並設定為寫入一個位元組，觸發傳輸
    //   I2C_SLV0_EN (bit 7) = 1 (致能)
    //   I2C_SLV0_LENG (bits 3:0) = 1 (傳輸 1 個位元組)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | 0x01);
 800059a:	2181      	movs	r1, #129	@ 0x81
 800059c:	2005      	movs	r0, #5
 800059e:	f7ff ff2b 	bl	80003f8 <ICM20948_WriteByte>
 80005a2:	4603      	mov	r3, r0
 80005a4:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d004      	beq.n	80005b6 <AK09916_WriteByteViaICM+0x9e>
        ICM20948_SelectUserBank(0);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ff9d 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 80005b2:	7bbb      	ldrb	r3, [r7, #14]
 80005b4:	e006      	b.n	80005c4 <AK09916_WriteByteViaICM+0xac>
    //    理想情況下，應該檢查 I2C_MST_STATUS 暫存器中的 I2C_SLV0_NACK 或 I2C_IF_DONE 位元。
    //    為簡化，這裡使用固定延遲。在實際應用中，需要更可靠的同步機制。
    //    ICM20948 datasheet 7.6節: "The I2C Master interface issues a STOP condition specific to the transaction length."
    //    "The I2C Master interface will stretch the main processor’s clock when an I2C transaction is in progress." (if I2C_MST_P_NSR=1 in I2C_MST_CTRL)
    //    這裡假設 I2C_MST_P_NSR=0 (預設)，所以需要軟體延遲或狀態檢查。
    HAL_Delay(20); // 稍微增加延遲以確保傳輸完成 (這個延遲可能需要調整，取決於 I2C 速度和目標設備)
 80005b6:	2014      	movs	r0, #20
 80005b8:	f001 f994 	bl	80018e4 <HAL_Delay>
    //    status = ICM20948_ReadByte(0x17, &i2c_mst_status_val); // I2C_MST_STATUS (UB0)
    //    if (status != HAL_OK) return status;
    //    if (i2c_mst_status_val & 0x01) { /* I2C_SLV0_NACK */ return HAL_ERROR; }

    // 操作完成後，建議切換回常用的庫，例如庫 0
    return ICM20948_SelectUserBank(0);
 80005bc:	2000      	movs	r0, #0
 80005be:	f7ff ff95 	bl	80004ec <ICM20948_SelectUserBank>
 80005c2:	4603      	mov	r3, r0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <AK09916_ReadByteViaICM>:
 * @brief 透過 ICM-20948 的 I2C 主機介面，從 AK09916 磁力計指定暫存器讀取單一位元組數據。
 * @param reg_addr: AK09916 的目標暫存器位址。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_ReadByteViaICM(uint8_t reg_addr, uint8_t *pData) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t temp_data;
    uint8_t target_bank = 3; // I2C 主機控制相關暫存器在庫 3
 80005d8:	2303      	movs	r3, #3
 80005da:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read_bank = 0; // 外部感測器數據在庫 0
 80005dc:	2300      	movs	r3, #0
 80005de:	73bb      	strb	r3, [r7, #14]

    // 1. 切換到使用者庫 3，設定 I2C 從裝置相關暫存器
    status = ICM20948_SelectUserBank(target_bank);
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff82 	bl	80004ec <ICM20948_SelectUserBank>
 80005e8:	4603      	mov	r3, r0
 80005ea:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 80005ec:	7b7b      	ldrb	r3, [r7, #13]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <AK09916_ReadByteViaICM+0x2a>
 80005f2:	7b7b      	ldrb	r3, [r7, #13]
 80005f4:	e04a      	b.n	800068c <AK09916_ReadByteViaICM+0xc0>

    // 2. 設定從裝置位址 (AK09916_I2C_ADDR | 0x80，設定 R/W 位元為讀取)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR | 0x80);
 80005f6:	218c      	movs	r1, #140	@ 0x8c
 80005f8:	2003      	movs	r0, #3
 80005fa:	f7ff fefd 	bl	80003f8 <ICM20948_WriteByte>
 80005fe:	4603      	mov	r3, r0
 8000600:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000602:	7b7b      	ldrb	r3, [r7, #13]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d005      	beq.n	8000614 <AK09916_ReadByteViaICM+0x48>
        ICM20948_SelectUserBank(data_read_bank); // 嘗試恢復
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff6e 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 8000610:	7b7b      	ldrb	r3, [r7, #13]
 8000612:	e03b      	b.n	800068c <AK09916_ReadByteViaICM+0xc0>
    }

    // 3. 設定要讀取的 AK09916 內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4619      	mov	r1, r3
 8000618:	2004      	movs	r0, #4
 800061a:	f7ff feed 	bl	80003f8 <ICM20948_WriteByte>
 800061e:	4603      	mov	r3, r0
 8000620:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000622:	7b7b      	ldrb	r3, [r7, #13]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d005      	beq.n	8000634 <AK09916_ReadByteViaICM+0x68>
        ICM20948_SelectUserBank(data_read_bank);
 8000628:	7bbb      	ldrb	r3, [r7, #14]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff5e 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	e02b      	b.n	800068c <AK09916_ReadByteViaICM+0xc0>
    // 4. 致能 I2C 從裝置 0，設定為讀取一個位元組，並觸發讀取
    //   I2C_SLV0_EN (bit 7) = 1 (致能)
    //   I2C_SLV0_LENG (bits 3:0) = 1 (傳輸 1 個位元組)
    //   I2C_SLV0_REG_DIS (bit 5) = 0 (寫入 reg_addr)
    //   I2C_SLV0_BYTE_SW (bit 6) = 0 (預設)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | 0x01);
 8000634:	2181      	movs	r1, #129	@ 0x81
 8000636:	2005      	movs	r0, #5
 8000638:	f7ff fede 	bl	80003f8 <ICM20948_WriteByte>
 800063c:	4603      	mov	r3, r0
 800063e:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000640:	7b7b      	ldrb	r3, [r7, #13]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d005      	beq.n	8000652 <AK09916_ReadByteViaICM+0x86>
        ICM20948_SelectUserBank(data_read_bank);
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff4f 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 800064e:	7b7b      	ldrb	r3, [r7, #13]
 8000650:	e01c      	b.n	800068c <AK09916_ReadByteViaICM+0xc0>
    }

    // 5. 等待 I2C 傳輸完成並數據就緒
    HAL_Delay(5); // 這個延遲可能需要調整，最好是檢查狀態位元
 8000652:	2005      	movs	r0, #5
 8000654:	f001 f946 	bl	80018e4 <HAL_Delay>

    // 6. 切換回使用者庫 0 以讀取外部感測器數據
    status = ICM20948_SelectUserBank(data_read_bank);
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff46 	bl	80004ec <ICM20948_SelectUserBank>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <AK09916_ReadByteViaICM+0xa2>
 800066a:	7b7b      	ldrb	r3, [r7, #13]
 800066c:	e00e      	b.n	800068c <AK09916_ReadByteViaICM+0xc0>

    // 7. 從 EXT_SLV_SENS_DATA_00 讀取數據
    //    ICM-20948 會自動將從 SLV0 讀到的數據放入 EXT_SLV_SENS_DATA_00 開始的暫存器中
    status = ICM20948_ReadByte(ICM20948_EXT_SLV_SENS_DATA_00, &temp_data);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4619      	mov	r1, r3
 8000674:	203b      	movs	r0, #59	@ 0x3b
 8000676:	f7ff fee3 	bl	8000440 <ICM20948_ReadByte>
 800067a:	4603      	mov	r3, r0
 800067c:	737b      	strb	r3, [r7, #13]
    if (status == HAL_OK) {
 800067e:	7b7b      	ldrb	r3, [r7, #13]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d102      	bne.n	800068a <AK09916_ReadByteViaICM+0xbe>
        *pData = temp_data;
 8000684:	7b3a      	ldrb	r2, [r7, #12]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	701a      	strb	r2, [r3, #0]
    }
    return status;
 800068a:	7b7b      	ldrb	r3, [r7, #13]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <ICM20948_Init>:

/**
 * @brief 初始化 ICM-20948 感測器 (包括加速計、陀螺儀和磁力計)。
 * @return HAL_StatusTypeDef: 初始化成功則返回 HAL_OK，否則返回 HAL_ERROR。
 */
HAL_StatusTypeDef ICM20948_Init(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	70fb      	strb	r3, [r7, #3]
    uint8_t who_am_i_val = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	70bb      	strb	r3, [r7, #2]
    uint8_t ak09916_wia2_val = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	707b      	strb	r3, [r7, #1]

    // --- 0. 確保 SPI CS 引腳初始為高電位 ---
    ICM20948_CS_Deselect(); // 使用更新後的 CS 控制函式
 80006a6:	f7ff fe8d 	bl	80003c4 <ICM20948_CS_Deselect>
    HAL_Delay(10); // 等待感測器上電穩定
 80006aa:	200a      	movs	r0, #10
 80006ac:	f001 f91a 	bl	80018e4 <HAL_Delay>

    // --- 1. 選擇使用者庫 0 ---
    status = ICM20948_SelectUserBank(0);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff ff1b 	bl	80004ec <ICM20948_SelectUserBank>
 80006b6:	4603      	mov	r3, r0
 80006b8:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR; // 如果切換庫失敗，則初始化失敗
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <ICM20948_Init+0x30>
 80006c0:	2301      	movs	r3, #1
 80006c2:	e133      	b.n	800092c <ICM20948_Init+0x298>

    // --- 2. 檢查 WHO_AM_I 暫存器 ---
    status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 80006c4:	1cbb      	adds	r3, r7, #2
 80006c6:	4619      	mov	r1, r3
 80006c8:	2000      	movs	r0, #0
 80006ca:	f7ff feb9 	bl	8000440 <ICM20948_ReadByte>
 80006ce:	4603      	mov	r3, r0
 80006d0:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK || who_am_i_val != 0xEA) { // 0xEA 是 ICM-20948 的預期值
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d102      	bne.n	80006de <ICM20948_Init+0x4a>
 80006d8:	78bb      	ldrb	r3, [r7, #2]
 80006da:	2bea      	cmp	r3, #234	@ 0xea
 80006dc:	d037      	beq.n	800074e <ICM20948_Init+0xba>
        // 可以嘗試多次讀取 WHO_AM_I，因為有時第一次通訊可能不穩定
        HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f001 f900 	bl	80018e4 <HAL_Delay>
        // 嘗試多次讀取@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        for (int i = 0; i < 10; i++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	e01f      	b.n	800072a <ICM20948_Init+0x96>
            status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 80006ea:	1cbb      	adds	r3, r7, #2
 80006ec:	4619      	mov	r1, r3
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff fea6 	bl	8000440 <ICM20948_ReadByte>
 80006f4:	4603      	mov	r3, r0
 80006f6:	70fb      	strb	r3, [r7, #3]
            if (status == HAL_OK) {
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d108      	bne.n	8000710 <ICM20948_Init+0x7c>
                printf("WHO_AM_I: 0x%02X (Attempt %d)\r\n", who_am_i_val, i + 1);
 80006fe:	78bb      	ldrb	r3, [r7, #2]
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3301      	adds	r3, #1
 8000706:	461a      	mov	r2, r3
 8000708:	488a      	ldr	r0, [pc, #552]	@ (8000934 <ICM20948_Init+0x2a0>)
 800070a:	f005 fadb 	bl	8005cc4 <iprintf>
 800070e:	e006      	b.n	800071e <ICM20948_Init+0x8a>
            } else {
                printf("Read WHO_AM_I FAILED, Status: %d (Attempt %d)\r\n", status, i + 1);
 8000710:	78f9      	ldrb	r1, [r7, #3]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3301      	adds	r3, #1
 8000716:	461a      	mov	r2, r3
 8000718:	4887      	ldr	r0, [pc, #540]	@ (8000938 <ICM20948_Init+0x2a4>)
 800071a:	f005 fad3 	bl	8005cc4 <iprintf>
            }
            HAL_Delay(50);
 800071e:	2032      	movs	r0, #50	@ 0x32
 8000720:	f001 f8e0 	bl	80018e4 <HAL_Delay>
        for (int i = 0; i < 10; i++) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3301      	adds	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b09      	cmp	r3, #9
 800072e:	dddc      	ble.n	80006ea <ICM20948_Init+0x56>
        }
        // 嘗試多次讀取@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 8000730:	1cbb      	adds	r3, r7, #2
 8000732:	4619      	mov	r1, r3
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff fe83 	bl	8000440 <ICM20948_ReadByte>
 800073a:	4603      	mov	r3, r0
 800073c:	70fb      	strb	r3, [r7, #3]
        if (status != HAL_OK || who_am_i_val != 0xEA) {
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <ICM20948_Init+0xb6>
 8000744:	78bb      	ldrb	r3, [r7, #2]
 8000746:	2bea      	cmp	r3, #234	@ 0xea
 8000748:	d001      	beq.n	800074e <ICM20948_Init+0xba>
             return HAL_ERROR; // 裝置識別失敗
 800074a:	2301      	movs	r3, #1
 800074c:	e0ee      	b.n	800092c <ICM20948_Init+0x298>
        }
    }

    // --- 3. 重設並喚醒裝置 ---
    // 寫入 0x80 到 PWR_MGMT_1 (DEVICE_RESET = 1)
    status = ICM20948_WriteByte(ICM20948_PWR_MGMT_1, 0x80);
 800074e:	2180      	movs	r1, #128	@ 0x80
 8000750:	2006      	movs	r0, #6
 8000752:	f7ff fe51 	bl	80003f8 <ICM20948_WriteByte>
 8000756:	4603      	mov	r3, r0
 8000758:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <ICM20948_Init+0xd0>
 8000760:	2301      	movs	r3, #1
 8000762:	e0e3      	b.n	800092c <ICM20948_Init+0x298>
    HAL_Delay(100); // 等待重設完成 (Datasheet 建議 100ms)
 8000764:	2064      	movs	r0, #100	@ 0x64
 8000766:	f001 f8bd 	bl	80018e4 <HAL_Delay>

    // 從睡眠模式喚醒，並選擇時脈源
    // 寫入 0x01 到 PWR_MGMT_1 (CLKSEL = 1，選擇最佳可用時脈源，通常是內部20MHz振盪器, 自動選擇)
    // SLEEP = 0 (正常模式), TEMP_DIS = 0 (溫度感測器致能)
    status = ICM20948_WriteByte(ICM20948_PWR_MGMT_1, 0x01);
 800076a:	2101      	movs	r1, #1
 800076c:	2006      	movs	r0, #6
 800076e:	f7ff fe43 	bl	80003f8 <ICM20948_WriteByte>
 8000772:	4603      	mov	r3, r0
 8000774:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <ICM20948_Init+0xec>
 800077c:	2301      	movs	r3, #1
 800077e:	e0d5      	b.n	800092c <ICM20948_Init+0x298>
    HAL_Delay(50); // 等待時脈穩定
 8000780:	2032      	movs	r0, #50	@ 0x32
 8000782:	f001 f8af 	bl	80018e4 <HAL_Delay>

    // --- 4. 配置加速計和陀螺儀 ---
    // 切換到使用者庫 2
    status = ICM20948_SelectUserBank(2);
 8000786:	2002      	movs	r0, #2
 8000788:	f7ff feb0 	bl	80004ec <ICM20948_SelectUserBank>
 800078c:	4603      	mov	r3, r0
 800078e:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <ICM20948_Init+0x106>
 8000796:	2301      	movs	r3, #1
 8000798:	e0c8      	b.n	800092c <ICM20948_Init+0x298>
    // ACCEL_DLPFCFG: 加速計數位低通濾波器配置 (bits 5:3)
    // 這裡設定為 ±2g, DLPF 致能 (ACCEL_FCHOICE=0), DLPFCFG = 1 (約 246Hz 頻寬, 3dB BW; ODR 1.125kHz)
    // ACCEL_CONFIG = (DLPFCFG << 3) | (ACCEL_FS_SEL << 1) | ACCEL_FCHOICE
    //              = (001 << 3)   | (00 << 1)        | 0
    //              = 0x08
    status = ICM20948_WriteByte(ICM20948_ACCEL_CONFIG, (0x01 << 3) | (0x00 << 1) | 0x00);
 800079a:	2108      	movs	r1, #8
 800079c:	2014      	movs	r0, #20
 800079e:	f7ff fe2b 	bl	80003f8 <ICM20948_WriteByte>
 80007a2:	4603      	mov	r3, r0
 80007a4:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d004      	beq.n	80007b6 <ICM20948_Init+0x122>
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff fe9d 	bl	80004ec <ICM20948_SelectUserBank>
 80007b2:	2301      	movs	r3, #1
 80007b4:	e0ba      	b.n	800092c <ICM20948_Init+0x298>
    current_accel_sensitivity = ACCEL_SENSITIVITY_2G; // 更新當前靈敏度
 80007b6:	4b61      	ldr	r3, [pc, #388]	@ (800093c <ICM20948_Init+0x2a8>)
 80007b8:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80007bc:	601a      	str	r2, [r3, #0]
    // GYRO_DLPFCFG: 陀螺儀數位低通濾波器配置 (bits 5:3)
    // 這裡設定為 ±250dps, DLPF 致能 (GYRO_FCHOICE=0), DLPFCFG = 1 (約 196.6Hz 頻寬, 3dB BW; ODR 1.125kHz)
    // GYRO_CONFIG_1 = (DLPFCFG << 3) | (GYRO_FS_SEL << 1) | GYRO_FCHOICE
    //               = (001 << 3)   | (00 << 1)       | 0
    //               = 0x08
    status = ICM20948_WriteByte(ICM20948_GYRO_CONFIG_1, (0x01 << 3) | (0x00 << 1) | 0x00);
 80007be:	2108      	movs	r1, #8
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff fe19 	bl	80003f8 <ICM20948_WriteByte>
 80007c6:	4603      	mov	r3, r0
 80007c8:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <ICM20948_Init+0x146>
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff fe8b 	bl	80004ec <ICM20948_SelectUserBank>
 80007d6:	2301      	movs	r3, #1
 80007d8:	e0a8      	b.n	800092c <ICM20948_Init+0x298>
    current_gyro_sensitivity = GYRO_SENSITIVITY_250DPS; // 更新當前靈敏度
 80007da:	4b59      	ldr	r3, [pc, #356]	@ (8000940 <ICM20948_Init+0x2ac>)
 80007dc:	4a59      	ldr	r2, [pc, #356]	@ (8000944 <ICM20948_Init+0x2b0>)
 80007de:	601a      	str	r2, [r3, #0]
    // if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
    // status = ICM20948_WriteByte(ICM20948_ACCEL_SMPLRT_DIV_1, 0x00); // 加速計 ODR 高位元組
    // if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }

    // 切換回使用者庫 0
    status = ICM20948_SelectUserBank(0);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff fe83 	bl	80004ec <ICM20948_SelectUserBank>
 80007e6:	4603      	mov	r3, r0
 80007e8:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <ICM20948_Init+0x160>
 80007f0:	2301      	movs	r3, #1
 80007f2:	e09b      	b.n	800092c <ICM20948_Init+0x298>

    // --- 5. 配置 I2C 主機介面以與 AK09916 通訊 ---
    // 致能 I2C 主機模式 (USER_CTRL 的 I2C_MST_EN 位元 (bit 5))
    uint8_t user_ctrl_val;
    status = ICM20948_ReadByte(ICM20948_USER_CTRL, &user_ctrl_val);
 80007f4:	463b      	mov	r3, r7
 80007f6:	4619      	mov	r1, r3
 80007f8:	2003      	movs	r0, #3
 80007fa:	f7ff fe21 	bl	8000440 <ICM20948_ReadByte>
 80007fe:	4603      	mov	r3, r0
 8000800:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <ICM20948_Init+0x178>
 8000808:	2301      	movs	r3, #1
 800080a:	e08f      	b.n	800092c <ICM20948_Init+0x298>
    user_ctrl_val |= (1 << 5); // 設定 I2C_MST_EN = 1 (啟用 I2C Master)
 800080c:	783b      	ldrb	r3, [r7, #0]
 800080e:	f043 0320 	orr.w	r3, r3, #32
 8000812:	b2db      	uxtb	r3, r3
 8000814:	703b      	strb	r3, [r7, #0]
    user_ctrl_val |= (1 << 4); // 設定 I2C_IF_DIS = 1 (為 SPI 模式禁用 ICM 的 I2C Slave 介面)
 8000816:	783b      	ldrb	r3, [r7, #0]
 8000818:	f043 0310 	orr.w	r3, r3, #16
 800081c:	b2db      	uxtb	r3, r3
 800081e:	703b      	strb	r3, [r7, #0]
    // user_ctrl_val &= ~(1 << 6); // 確保 I2C_IF_DIS = 0, 使能SPI和I2C同時工作 (如果需要SPI訪問ICM本身)
    status = ICM20948_WriteByte(ICM20948_USER_CTRL, user_ctrl_val);
 8000820:	783b      	ldrb	r3, [r7, #0]
 8000822:	4619      	mov	r1, r3
 8000824:	2003      	movs	r0, #3
 8000826:	f7ff fde7 	bl	80003f8 <ICM20948_WriteByte>
 800082a:	4603      	mov	r3, r0
 800082c:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <ICM20948_Init+0x1a4>
 8000834:	2301      	movs	r3, #1
 8000836:	e079      	b.n	800092c <ICM20948_Init+0x298>
    HAL_Delay(50); // 等待 I2C 主機介面穩定
 8000838:	2032      	movs	r0, #50	@ 0x32
 800083a:	f001 f853 	bl	80018e4 <HAL_Delay>

    // 切換到使用者庫 3
    status = ICM20948_SelectUserBank(3);
 800083e:	2003      	movs	r0, #3
 8000840:	f7ff fe54 	bl	80004ec <ICM20948_SelectUserBank>
 8000844:	4603      	mov	r3, r0
 8000846:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d004      	beq.n	8000858 <ICM20948_Init+0x1c4>
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff fe4c 	bl	80004ec <ICM20948_SelectUserBank>
 8000854:	2301      	movs	r3, #1
 8000856:	e069      	b.n	800092c <ICM20948_Init+0x298>

    // 設定 I2C 主機時脈頻率 (I2C_MST_CTRL 的 I2C_MST_CLK bits 3:0)
    // 例如，設定為 400kHz (datasheet 建議值 0x07 for 345.6 kHz to 400 kHz)
    // 0x0D for ~100kHz if needed for stability with AK09916
    status = ICM20948_WriteByte(ICM20948_I2C_MST_CTRL, 0x07);
 8000858:	2107      	movs	r1, #7
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fdcc 	bl	80003f8 <ICM20948_WriteByte>
 8000860:	4603      	mov	r3, r0
 8000862:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d004      	beq.n	8000874 <ICM20948_Init+0x1e0>
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff fe3e 	bl	80004ec <ICM20948_SelectUserBank>
 8000870:	2301      	movs	r3, #1
 8000872:	e05b      	b.n	800092c <ICM20948_Init+0x298>
    HAL_Delay(50);
 8000874:	2032      	movs	r0, #50	@ 0x32
 8000876:	f001 f835 	bl	80018e4 <HAL_Delay>

    // 切換回使用者庫 0
    status = ICM20948_SelectUserBank(0);
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fe36 	bl	80004ec <ICM20948_SelectUserBank>
 8000880:	4603      	mov	r3, r0
 8000882:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <ICM20948_Init+0x1fa>
 800088a:	2301      	movs	r3, #1
 800088c:	e04e      	b.n	800092c <ICM20948_Init+0x298>
//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    // ... (ICM I2C Master 設定完成後)

    // --- 6. 初始化 AK09916 磁力計 ---
    // **先嘗試軟復位 AK09916**
    status = AK09916_WriteByteViaICM(AK09916_CNTL3, 0x01);
 800088e:	2101      	movs	r1, #1
 8000890:	2032      	movs	r0, #50	@ 0x32
 8000892:	f7ff fe41 	bl	8000518 <AK09916_WriteByteViaICM>
 8000896:	4603      	mov	r3, r0
 8000898:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) {
 800089a:	78fb      	ldrb	r3, [r7, #3]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d007      	beq.n	80008b0 <ICM20948_Init+0x21c>
        printf("AK09916 Soft Reset FAILED!\r\n");
 80008a0:	4829      	ldr	r0, [pc, #164]	@ (8000948 <ICM20948_Init+0x2b4>)
 80008a2:	f005 fa77 	bl	8005d94 <puts>
        ICM20948_SelectUserBank(0); // 切回 UB0
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe20 	bl	80004ec <ICM20948_SelectUserBank>
        return HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	e03d      	b.n	800092c <ICM20948_Init+0x298>
    }
    HAL_Delay(100); // 等待復位完成
 80008b0:	2064      	movs	r0, #100	@ 0x64
 80008b2:	f001 f817 	bl	80018e4 <HAL_Delay>
    // status = AK09916_WriteByteViaICM(AK09916_CNTL2, 0x00); // Power-down
    // if (status != HAL_OK) { /* 錯誤處理 */ }
    // HAL_Delay(10);

    // **然後再檢查 AK09916 WIA2**
    status = AK09916_ReadByteViaICM(AK09916_WIA2, &ak09916_wia2_val);
 80008b6:	1c7b      	adds	r3, r7, #1
 80008b8:	4619      	mov	r1, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fe86 	bl	80005cc <AK09916_ReadByteViaICM>
 80008c0:	4603      	mov	r3, r0
 80008c2:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) {
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d009      	beq.n	80008de <ICM20948_Init+0x24a>
        printf("Reading AK09916 WIA2 FAILED after reset! Status: %d\r\n", status);
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	4619      	mov	r1, r3
 80008ce:	481f      	ldr	r0, [pc, #124]	@ (800094c <ICM20948_Init+0x2b8>)
 80008d0:	f005 f9f8 	bl	8005cc4 <iprintf>
        ICM20948_SelectUserBank(0);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff fe09 	bl	80004ec <ICM20948_SelectUserBank>
        return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e026      	b.n	800092c <ICM20948_Init+0x298>
    }
    if (ak09916_wia2_val != 0x09) {
 80008de:	787b      	ldrb	r3, [r7, #1]
 80008e0:	2b09      	cmp	r3, #9
 80008e2:	d009      	beq.n	80008f8 <ICM20948_Init+0x264>
        printf("AK09916 WIA2 is 0x%02X, expected 0x09, after reset!\r\n", ak09916_wia2_val);
 80008e4:	787b      	ldrb	r3, [r7, #1]
 80008e6:	4619      	mov	r1, r3
 80008e8:	4819      	ldr	r0, [pc, #100]	@ (8000950 <ICM20948_Init+0x2bc>)
 80008ea:	f005 f9eb 	bl	8005cc4 <iprintf>
        ICM20948_SelectUserBank(0);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fdfc 	bl	80004ec <ICM20948_SelectUserBank>
        return HAL_ERROR; // AK09916 識別失敗
 80008f4:	2301      	movs	r3, #1
 80008f6:	e019      	b.n	800092c <ICM20948_Init+0x298>
    }
    printf("AK09916 WIA2 OK: 0x%02X\r\n", ak09916_wia2_val);
 80008f8:	787b      	ldrb	r3, [r7, #1]
 80008fa:	4619      	mov	r1, r3
 80008fc:	4815      	ldr	r0, [pc, #84]	@ (8000954 <ICM20948_Init+0x2c0>)
 80008fe:	f005 f9e1 	bl	8005cc4 <iprintf>

    // **如果 WIA2 正確，再設定最終的操作模式**
    status = AK09916_WriteByteViaICM(AK09916_CNTL2, 0x08); // 例如連續量測模式 4 (100Hz)
 8000902:	2108      	movs	r1, #8
 8000904:	2031      	movs	r0, #49	@ 0x31
 8000906:	f7ff fe07 	bl	8000518 <AK09916_WriteByteViaICM>
 800090a:	4603      	mov	r3, r0
 800090c:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) {
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d007      	beq.n	8000924 <ICM20948_Init+0x290>
        printf("Setting AK09916 Mode FAILED!\r\n");
 8000914:	4810      	ldr	r0, [pc, #64]	@ (8000958 <ICM20948_Init+0x2c4>)
 8000916:	f005 fa3d 	bl	8005d94 <puts>
        ICM20948_SelectUserBank(0);
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fde6 	bl	80004ec <ICM20948_SelectUserBank>
        return HAL_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	e003      	b.n	800092c <ICM20948_Init+0x298>
    }
    HAL_Delay(50); // 等待模式設定生效
 8000924:	2032      	movs	r0, #50	@ 0x32
 8000926:	f000 ffdd 	bl	80018e4 <HAL_Delay>
    //    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    return HAL_OK; // 初始化成功
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	08007bb0 	.word	0x08007bb0
 8000938:	08007bd0 	.word	0x08007bd0
 800093c:	24000000 	.word	0x24000000
 8000940:	24000004 	.word	0x24000004
 8000944:	43030000 	.word	0x43030000
 8000948:	08007c00 	.word	0x08007c00
 800094c:	08007c1c 	.word	0x08007c1c
 8000950:	08007c54 	.word	0x08007c54
 8000954:	08007c8c 	.word	0x08007c8c
 8000958:	08007ca8 	.word	0x08007ca8

0800095c <ICM20948_ReadAccelGyroRaw>:
 * @brief 從 ICM-20948 讀取加速計和陀螺儀的原始數據。
 * @param pAccel: 指向儲存加速計原始數據的陣列 (int16_t[3])。
 * @param pGyro:  指向儲存陀螺儀原始數據的陣列 (int16_t[3])。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadAccelGyroRaw(int16_t* pAccel, int16_t* pGyro) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
    uint8_t raw_data[12]; // 6 bytes for accel (X,Y,Z), 6 bytes for gyro (X,Y,Z)
    HAL_StatusTypeDef status;

    // 1. 確保在使用者庫 0 (感測器數據通常在庫 0)
    status = ICM20948_SelectUserBank(0); // 雖然大部分情況下已在庫0，但確保一下無妨
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fdc0 	bl	80004ec <ICM20948_SelectUserBank>
 800096c:	4603      	mov	r3, r0
 800096e:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000970:	7dfb      	ldrb	r3, [r7, #23]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <ICM20948_ReadAccelGyroRaw+0x1e>
 8000976:	7dfb      	ldrb	r3, [r7, #23]
 8000978:	e048      	b.n	8000a0c <ICM20948_ReadAccelGyroRaw+0xb0>

    // 2. 從 ACCEL_XOUT_H (0x2D) 開始連續讀取 12 個位元組的數據
    //    ACCEL_XOUT_H to GYRO_ZOUT_L
    status = ICM20948_ReadBytes(ICM20948_ACCEL_XOUT_H, raw_data, 12);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	220c      	movs	r2, #12
 8000980:	4619      	mov	r1, r3
 8000982:	202d      	movs	r0, #45	@ 0x2d
 8000984:	f7ff fd86 	bl	8000494 <ICM20948_ReadBytes>
 8000988:	4603      	mov	r3, r0
 800098a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 800098c:	7dfb      	ldrb	r3, [r7, #23]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <ICM20948_ReadAccelGyroRaw+0x3a>
 8000992:	7dfb      	ldrb	r3, [r7, #23]
 8000994:	e03a      	b.n	8000a0c <ICM20948_ReadAccelGyroRaw+0xb0>

    // 3. 解析數據 (高位元組在前，大端模式 Big-Endian)
    // 加速計數據
    pAccel[0] = (int16_t)((raw_data[0] << 8) | raw_data[1]);  // Accel X
 8000996:	7a3b      	ldrb	r3, [r7, #8]
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
 800099c:	7a7b      	ldrb	r3, [r7, #9]
 800099e:	b21b      	sxth	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	801a      	strh	r2, [r3, #0]
    pAccel[1] = (int16_t)((raw_data[2] << 8) | raw_data[3]);  // Accel Y
 80009a8:	7abb      	ldrb	r3, [r7, #10]
 80009aa:	021b      	lsls	r3, r3, #8
 80009ac:	b219      	sxth	r1, r3
 80009ae:	7afb      	ldrb	r3, [r7, #11]
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3302      	adds	r3, #2
 80009b6:	430a      	orrs	r2, r1
 80009b8:	b212      	sxth	r2, r2
 80009ba:	801a      	strh	r2, [r3, #0]
    pAccel[2] = (int16_t)((raw_data[4] << 8) | raw_data[5]);  // Accel Z
 80009bc:	7b3b      	ldrb	r3, [r7, #12]
 80009be:	021b      	lsls	r3, r3, #8
 80009c0:	b219      	sxth	r1, r3
 80009c2:	7b7b      	ldrb	r3, [r7, #13]
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3304      	adds	r3, #4
 80009ca:	430a      	orrs	r2, r1
 80009cc:	b212      	sxth	r2, r2
 80009ce:	801a      	strh	r2, [r3, #0]
    // 陀螺儀數據
    pGyro[0] = (int16_t)((raw_data[6] << 8) | raw_data[7]);   // Gyro X
 80009d0:	7bbb      	ldrb	r3, [r7, #14]
 80009d2:	021b      	lsls	r3, r3, #8
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	b21b      	sxth	r3, r3
 80009da:	4313      	orrs	r3, r2
 80009dc:	b21a      	sxth	r2, r3
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	801a      	strh	r2, [r3, #0]
    pGyro[1] = (int16_t)((raw_data[8] << 8) | raw_data[9]);   // Gyro Y
 80009e2:	7c3b      	ldrb	r3, [r7, #16]
 80009e4:	021b      	lsls	r3, r3, #8
 80009e6:	b219      	sxth	r1, r3
 80009e8:	7c7b      	ldrb	r3, [r7, #17]
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	3302      	adds	r3, #2
 80009f0:	430a      	orrs	r2, r1
 80009f2:	b212      	sxth	r2, r2
 80009f4:	801a      	strh	r2, [r3, #0]
    pGyro[2] = (int16_t)((raw_data[10] << 8) | raw_data[11]); // Gyro Z
 80009f6:	7cbb      	ldrb	r3, [r7, #18]
 80009f8:	021b      	lsls	r3, r3, #8
 80009fa:	b219      	sxth	r1, r3
 80009fc:	7cfb      	ldrb	r3, [r7, #19]
 80009fe:	b21a      	sxth	r2, r3
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	3304      	adds	r3, #4
 8000a04:	430a      	orrs	r2, r1
 8000a06:	b212      	sxth	r2, r2
 8000a08:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <AK09916_ReadBytesViaICM>:
 * @param reg_addr: AK09916 的起始暫存器位址。
 * @param pBuffer:  指向儲存讀取數據的緩衝區。
 * @param count:    要讀取的位元組數量 (AK09916 通常一次讀取 8 bytes: HXL to ST2)。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_ReadBytesViaICM(uint8_t reg_addr, uint8_t *pBuffer, uint8_t count) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	4613      	mov	r3, r2
 8000a22:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t target_bank = 3;
 8000a24:	2303      	movs	r3, #3
 8000a26:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read_bank = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73bb      	strb	r3, [r7, #14]

    if (count == 0 || count > 8) { // EXT_SLV_SENS_DATA 暫存器最多支援讀取連續的外部數據長度有限制 (SLV0 可讀取 SLV0_LENG 個 bytes)
 8000a2c:	79bb      	ldrb	r3, [r7, #6]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d002      	beq.n	8000a38 <AK09916_ReadBytesViaICM+0x24>
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	2b08      	cmp	r3, #8
 8000a36:	d901      	bls.n	8000a3c <AK09916_ReadBytesViaICM+0x28>
                                  // ICM20948 EXT_SLV_SENS_DATA_xx 最多有 24 個 bytes (00-23) 給所有 4 個 slave
                                  // SLV0_LENG 最大值是 15 (0xF)
        return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e056      	b.n	8000aea <AK09916_ReadBytesViaICM+0xd6>
    }

    // 1. 切換到使用者庫 3
    status = ICM20948_SelectUserBank(target_bank);
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fd54 	bl	80004ec <ICM20948_SelectUserBank>
 8000a44:	4603      	mov	r3, r0
 8000a46:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000a48:	7b7b      	ldrb	r3, [r7, #13]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <AK09916_ReadBytesViaICM+0x3e>
 8000a4e:	7b7b      	ldrb	r3, [r7, #13]
 8000a50:	e04b      	b.n	8000aea <AK09916_ReadBytesViaICM+0xd6>

    // 2. 設定從裝置位址為讀取模式
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR | 0x80); // Add R/W bit for read
 8000a52:	218c      	movs	r1, #140	@ 0x8c
 8000a54:	2003      	movs	r0, #3
 8000a56:	f7ff fccf 	bl	80003f8 <ICM20948_WriteByte>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 8000a5e:	7b7b      	ldrb	r3, [r7, #13]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d005      	beq.n	8000a70 <AK09916_ReadBytesViaICM+0x5c>
 8000a64:	7bbb      	ldrb	r3, [r7, #14]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fd40 	bl	80004ec <ICM20948_SelectUserBank>
 8000a6c:	7b7b      	ldrb	r3, [r7, #13]
 8000a6e:	e03c      	b.n	8000aea <AK09916_ReadBytesViaICM+0xd6>

    // 3. 設定要讀取的 AK09916 起始內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4619      	mov	r1, r3
 8000a74:	2004      	movs	r0, #4
 8000a76:	f7ff fcbf 	bl	80003f8 <ICM20948_WriteByte>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 8000a7e:	7b7b      	ldrb	r3, [r7, #13]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d005      	beq.n	8000a90 <AK09916_ReadBytesViaICM+0x7c>
 8000a84:	7bbb      	ldrb	r3, [r7, #14]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd30 	bl	80004ec <ICM20948_SelectUserBank>
 8000a8c:	7b7b      	ldrb	r3, [r7, #13]
 8000a8e:	e02c      	b.n	8000aea <AK09916_ReadBytesViaICM+0xd6>

    // 4. 致能 I2C SLV0，設定讀取位元組數量，並觸發事務
    //    I2C_SLV0_EN (bit 7) = 1
    //    I2C_SLV0_LENG (bits 3:0) = count
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | count);
 8000a90:	79bb      	ldrb	r3, [r7, #6]
 8000a92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2005      	movs	r0, #5
 8000a9c:	f7ff fcac 	bl	80003f8 <ICM20948_WriteByte>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 8000aa4:	7b7b      	ldrb	r3, [r7, #13]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d005      	beq.n	8000ab6 <AK09916_ReadBytesViaICM+0xa2>
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd1d 	bl	80004ec <ICM20948_SelectUserBank>
 8000ab2:	7b7b      	ldrb	r3, [r7, #13]
 8000ab4:	e019      	b.n	8000aea <AK09916_ReadBytesViaICM+0xd6>

    // 等待 I2C 傳輸完成，這個延遲需要足夠長以完成 'count' 個位元組的讀取
    // 每個位元組大約需要 8/I2C_Clock_Freq + ACK/NACK 時間。
    // 若 I2C 400kHz, 1 byte 約 25us. 8 bytes ~ 200us.
    HAL_Delay(count + 2); // 粗略延遲，最好檢查 I2C_MST_STATUS 或使用中斷
 8000ab6:	79bb      	ldrb	r3, [r7, #6]
 8000ab8:	3302      	adds	r3, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 ff12 	bl	80018e4 <HAL_Delay>
                          // (count * 25us / 1000) + 1 ms 作為基本延遲

    // 5. 切換回使用者庫 0 以讀取外部感測器數據
    status = ICM20948_SelectUserBank(data_read_bank);
 8000ac0:	7bbb      	ldrb	r3, [r7, #14]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fd12 	bl	80004ec <ICM20948_SelectUserBank>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <AK09916_ReadBytesViaICM+0xc2>
 8000ad2:	7b7b      	ldrb	r3, [r7, #13]
 8000ad4:	e009      	b.n	8000aea <AK09916_ReadBytesViaICM+0xd6>

    // 6. 從 EXT_SLV_SENS_DATA_00 開始讀取數據
    status = ICM20948_ReadBytes(ICM20948_EXT_SLV_SENS_DATA_00, pBuffer, count);
 8000ad6:	79bb      	ldrb	r3, [r7, #6]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	6839      	ldr	r1, [r7, #0]
 8000ade:	203b      	movs	r0, #59	@ 0x3b
 8000ae0:	f7ff fcd8 	bl	8000494 <ICM20948_ReadBytes>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	737b      	strb	r3, [r7, #13]
    return status;
 8000ae8:	7b7b      	ldrb	r3, [r7, #13]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <ICM20948_ReadMagRaw>:
/**
 * @brief 從 ICM-20948 (透過其 I2C 主機從 AK09916) 讀取磁力計的原始數據。
 * @param pMag:   指向儲存磁力計原始數據的陣列 (int16_t[3])。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadMagRaw(int16_t* pMag) {
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
                           // RSV (0x17) 是保留位元組
    HAL_StatusTypeDef status;
    uint8_t st1_val;

    // 1. 檢查 AK09916 是否有新數據 (DRDY 位元在 ST1 (0x10) 暫存器)
    status = AK09916_ReadByteViaICM(AK09916_ST1, &st1_val);
 8000afa:	f107 030b 	add.w	r3, r7, #11
 8000afe:	4619      	mov	r1, r3
 8000b00:	2010      	movs	r0, #16
 8000b02:	f7ff fd63 	bl	80005cc <AK09916_ReadByteViaICM>
 8000b06:	4603      	mov	r3, r0
 8000b08:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000b0a:	7dfb      	ldrb	r3, [r7, #23]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <ICM20948_ReadMagRaw+0x22>
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	e032      	b.n	8000b7a <ICM20948_ReadMagRaw+0x88>

    if (!(st1_val & 0x01)) { // 檢查 DRDY (Data Ready) 位元 (bit 0)
 8000b14:	7afb      	ldrb	r3, [r7, #11]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <ICM20948_ReadMagRaw+0x30>
        return HAL_BUSY; // 數據尚未就緒 (Not an error, just not ready)
 8000b1e:	2302      	movs	r3, #2
 8000b20:	e02b      	b.n	8000b7a <ICM20948_ReadMagRaw+0x88>
    }

    // 2. 從 AK09916_HXL (0x11) 開始讀取 8 個位元組 (HXL to ST2)
    //    讀取 ST2 (0x18) 是為了讓 AK09916 準備下一次量測 (清除 DRDY 狀態並觸發下一次)
    status = AK09916_ReadBytesViaICM(AK09916_HXL, mag_buffer, 8);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	2208      	movs	r2, #8
 8000b28:	4619      	mov	r1, r3
 8000b2a:	2011      	movs	r0, #17
 8000b2c:	f7ff ff72 	bl	8000a14 <AK09916_ReadBytesViaICM>
 8000b30:	4603      	mov	r3, r0
 8000b32:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <ICM20948_ReadMagRaw+0x4c>
 8000b3a:	7dfb      	ldrb	r3, [r7, #23]
 8000b3c:	e01d      	b.n	8000b7a <ICM20948_ReadMagRaw+0x88>

    // 3. 解析數據 (低位元組在前，小端模式 Little-Endian for AK09916)
    pMag[0] = (int16_t)(((uint16_t)mag_buffer[1] << 8) | mag_buffer[0]); // Mag X (HXH, HXL)
 8000b3e:	7b7b      	ldrb	r3, [r7, #13]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	7b3b      	ldrb	r3, [r7, #12]
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b21a      	sxth	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	801a      	strh	r2, [r3, #0]
    pMag[1] = (int16_t)(((uint16_t)mag_buffer[3] << 8) | mag_buffer[2]); // Mag Y (HYH, HYL)
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	021b      	lsls	r3, r3, #8
 8000b54:	b219      	sxth	r1, r3
 8000b56:	7bbb      	ldrb	r3, [r7, #14]
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	b212      	sxth	r2, r2
 8000b62:	801a      	strh	r2, [r3, #0]
    pMag[2] = (int16_t)(((uint16_t)mag_buffer[5] << 8) | mag_buffer[4]); // Mag Z (HZH, HZL)
 8000b64:	7c7b      	ldrb	r3, [r7, #17]
 8000b66:	021b      	lsls	r3, r3, #8
 8000b68:	b219      	sxth	r1, r3
 8000b6a:	7c3b      	ldrb	r3, [r7, #16]
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3304      	adds	r3, #4
 8000b72:	430a      	orrs	r2, r1
 8000b74:	b212      	sxth	r2, r2
 8000b76:	801a      	strh	r2, [r3, #0]
    // if (mag_buffer[7] & 0x08) { /* Overflow occurred */ }

    // 重要: 讀取 ST2 暫存器後，AK09916 會清除 DRDY (Data Ready) 狀態，
    // 並在下一個量測週期後再次設定 DRDY。

    return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <ICM20948_ConvertAccelRawToG>:
/**
 * @brief 將加速計原始數據轉換為 g (重力加速度)。
 * @param pAccelRaw: 指向加速計原始數據陣列 (int16_t[3])。
 * @param pAccelG:   指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertAccelRawToG(const int16_t* pAccelRaw, float* pAccelG) {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
    pAccelG[0] = (float)pAccelRaw[0] / current_accel_sensitivity;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b94:	ee07 3a90 	vmov	s15, r3
 8000b98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b9c:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <ICM20948_ConvertAccelRawToG+0x78>)
 8000b9e:	ed93 7a00 	vldr	s14, [r3]
 8000ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[1] = (float)pAccelRaw[1] / current_accel_sensitivity;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3302      	adds	r3, #2
 8000bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb4:	ee07 3a90 	vmov	s15, r3
 8000bb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <ICM20948_ConvertAccelRawToG+0x78>)
 8000bbe:	ed93 7a00 	vldr	s14, [r3]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bca:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[2] = (float)pAccelRaw[2] / current_accel_sensitivity;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd6:	ee07 3a90 	vmov	s15, r3
 8000bda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bde:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <ICM20948_ConvertAccelRawToG+0x78>)
 8000be0:	ed93 7a00 	vldr	s14, [r3]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	3308      	adds	r3, #8
 8000be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bec:	edc3 7a00 	vstr	s15, [r3]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	24000000 	.word	0x24000000

08000c00 <ICM20948_ConvertGyroRawToDPS>:
/**
 * @brief 將陀螺儀原始數據轉換為 dps (度/秒)。
 * @param pGyroRaw: 指向陀螺儀原始數據陣列 (int16_t[3])。
 * @param pGyroDPS: 指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertGyroRawToDPS(const int16_t* pGyroRaw, float* pGyroDPS) {
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
    pGyroDPS[0] = (float)pGyroRaw[0] / current_gyro_sensitivity;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c18:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <ICM20948_ConvertGyroRawToDPS+0x78>)
 8000c1a:	ed93 7a00 	vldr	s14, [r3]
 8000c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[1] = (float)pGyroRaw[1] / current_gyro_sensitivity;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c30:	ee07 3a90 	vmov	s15, r3
 8000c34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <ICM20948_ConvertGyroRawToDPS+0x78>)
 8000c3a:	ed93 7a00 	vldr	s14, [r3]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	3304      	adds	r3, #4
 8000c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c46:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[2] = (float)pGyroRaw[2] / current_gyro_sensitivity;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <ICM20948_ConvertGyroRawToDPS+0x78>)
 8000c5c:	ed93 7a00 	vldr	s14, [r3]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	3308      	adds	r3, #8
 8000c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c68:	edc3 7a00 	vstr	s15, [r3]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	24000004 	.word	0x24000004

08000c7c <ICM20948_ConvertMagRawToUT>:
/**
 * @brief 將磁力計原始數據轉換為 µT (微特斯拉)。
 * @param pMagRaw: 指向磁力計原始數據陣列 (int16_t[3])。
 * @param pMagUT:  指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertMagRawToUT(const int16_t* pMagRaw, float* pMagUT) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
    // AK09916 的靈敏度是固定的 0.15 µT/LSB
    pMagUT[0] = (float)pMagRaw[0] * MAG_SENSITIVITY_UT_LSB;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c94:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000cf0 <ICM20948_ConvertMagRawToUT+0x74>
 8000c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	edc3 7a00 	vstr	s15, [r3]
    pMagUT[1] = (float)pMagRaw[1] * MAG_SENSITIVITY_UT_LSB;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000caa:	ee07 3a90 	vmov	s15, r3
 8000cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000cf0 <ICM20948_ConvertMagRawToUT+0x74>
 8000cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cbe:	edc3 7a00 	vstr	s15, [r3]
    pMagUT[2] = (float)pMagRaw[2] * MAG_SENSITIVITY_UT_LSB;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cca:	ee07 3a90 	vmov	s15, r3
 8000cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	3308      	adds	r3, #8
 8000cd6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000cf0 <ICM20948_ConvertMagRawToUT+0x74>
 8000cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cde:	edc3 7a00 	vstr	s15, [r3]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	3e19999a 	.word	0x3e19999a

08000cf4 <ICM20948_Main>:
void ICM20948_Main(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	@ 0x30
 8000cf8:	af0a      	add	r7, sp, #40	@ 0x28
	// 讀取加速計和陀螺儀原始數據
		     if (ICM20948_ReadAccelGyroRaw(accel_raw, gyro_raw) == HAL_OK) {
 8000cfa:	493c      	ldr	r1, [pc, #240]	@ (8000dec <ICM20948_Main+0xf8>)
 8000cfc:	483c      	ldr	r0, [pc, #240]	@ (8000df0 <ICM20948_Main+0xfc>)
 8000cfe:	f7ff fe2d 	bl	800095c <ICM20948_ReadAccelGyroRaw>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d135      	bne.n	8000d74 <ICM20948_Main+0x80>
		       // 將原始數據轉換為物理單位
		       ICM20948_ConvertAccelRawToG(accel_raw, accel_g);
 8000d08:	493a      	ldr	r1, [pc, #232]	@ (8000df4 <ICM20948_Main+0x100>)
 8000d0a:	4839      	ldr	r0, [pc, #228]	@ (8000df0 <ICM20948_Main+0xfc>)
 8000d0c:	f7ff ff3a 	bl	8000b84 <ICM20948_ConvertAccelRawToG>
		       ICM20948_ConvertGyroRawToDPS(gyro_raw, gyro_dps);
 8000d10:	4939      	ldr	r1, [pc, #228]	@ (8000df8 <ICM20948_Main+0x104>)
 8000d12:	4836      	ldr	r0, [pc, #216]	@ (8000dec <ICM20948_Main+0xf8>)
 8000d14:	f7ff ff74 	bl	8000c00 <ICM20948_ConvertGyroRawToDPS>

		       // 透過 UART 輸出 (或使用除錯器查看變數)
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
		              accel_g[0], accel_g[1], accel_g[2],
 8000d18:	4b36      	ldr	r3, [pc, #216]	@ (8000df4 <ICM20948_Main+0x100>)
 8000d1a:	edd3 7a00 	vldr	s15, [r3]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000d1e:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
		              accel_g[0], accel_g[1], accel_g[2],
 8000d22:	4b34      	ldr	r3, [pc, #208]	@ (8000df4 <ICM20948_Main+0x100>)
 8000d24:	edd3 7a01 	vldr	s15, [r3, #4]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000d28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
		              accel_g[0], accel_g[1], accel_g[2],
 8000d2c:	4b31      	ldr	r3, [pc, #196]	@ (8000df4 <ICM20948_Main+0x100>)
 8000d2e:	edd3 6a02 	vldr	s13, [r3, #8]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000d32:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
		               gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8000d36:	4b30      	ldr	r3, [pc, #192]	@ (8000df8 <ICM20948_Main+0x104>)
 8000d38:	edd3 5a00 	vldr	s11, [r3]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000d3c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
		               gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8000d40:	4b2d      	ldr	r3, [pc, #180]	@ (8000df8 <ICM20948_Main+0x104>)
 8000d42:	edd3 4a01 	vldr	s9, [r3, #4]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000d46:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
		               gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000df8 <ICM20948_Main+0x104>)
 8000d4c:	edd3 3a02 	vldr	s7, [r3, #8]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000d50:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000d54:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000d58:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000d5c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000d60:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000d64:	ed8d 7b00 	vstr	d7, [sp]
 8000d68:	ec53 2b12 	vmov	r2, r3, d2
 8000d6c:	4823      	ldr	r0, [pc, #140]	@ (8000dfc <ICM20948_Main+0x108>)
 8000d6e:	f004 ffa9 	bl	8005cc4 <iprintf>
 8000d72:	e002      	b.n	8000d7a <ICM20948_Main+0x86>
	//	       printf("%s"); // 或 HAL_UART_Transmit(&huartx, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);

		     } else {
		    	 //讀取 Accel/Gyro 數據失敗
		       printf("Failed to read Accel/Gyro data!\r\n");
 8000d74:	4822      	ldr	r0, [pc, #136]	@ (8000e00 <ICM20948_Main+0x10c>)
 8000d76:	f005 f80d 	bl	8005d94 <puts>
		     }

		     // 讀取磁力計原始數據
		     HAL_StatusTypeDef mag_status = ICM20948_ReadMagRaw(mag_raw);
 8000d7a:	4822      	ldr	r0, [pc, #136]	@ (8000e04 <ICM20948_Main+0x110>)
 8000d7c:	f7ff feb9 	bl	8000af2 <ICM20948_ReadMagRaw>
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
		     if (mag_status == HAL_OK) {
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d11c      	bne.n	8000dc4 <ICM20948_Main+0xd0>
		       // 將原始數據轉換為物理單位
		       ICM20948_ConvertMagRawToUT(mag_raw, mag_uT);
 8000d8a:	491f      	ldr	r1, [pc, #124]	@ (8000e08 <ICM20948_Main+0x114>)
 8000d8c:	481d      	ldr	r0, [pc, #116]	@ (8000e04 <ICM20948_Main+0x110>)
 8000d8e:	f7ff ff75 	bl	8000c7c <ICM20948_ConvertMagRawToUT>

		       printf("Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 8000d92:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <ICM20948_Main+0x114>)
 8000d94:	edd3 7a00 	vldr	s15, [r3]
		       printf("Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000d98:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <ICM20948_Main+0x114>)
 8000d9e:	edd3 7a01 	vldr	s15, [r3, #4]
		       printf("Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000da2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <ICM20948_Main+0x114>)
 8000da8:	edd3 6a02 	vldr	s13, [r3, #8]
		       printf("Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000dac:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000db0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000db4:	ed8d 7b00 	vstr	d7, [sp]
 8000db8:	ec53 2b15 	vmov	r2, r3, d5
 8000dbc:	4813      	ldr	r0, [pc, #76]	@ (8000e0c <ICM20948_Main+0x118>)
 8000dbe:	f004 ff81 	bl	8005cc4 <iprintf>
 8000dc2:	e009      	b.n	8000dd8 <ICM20948_Main+0xe4>
	//	       printf("%s");

		     } else if (mag_status == HAL_BUSY) {
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d103      	bne.n	8000dd2 <ICM20948_Main+0xde>
		       //printf("磁力計數據尚未就緒 (DRDY=0)\r\n");
		    	 printf("(HAL_BUSY DRDY=0)\r\n");
 8000dca:	4811      	ldr	r0, [pc, #68]	@ (8000e10 <ICM20948_Main+0x11c>)
 8000dcc:	f004 ffe2 	bl	8005d94 <puts>
 8000dd0:	e002      	b.n	8000dd8 <ICM20948_Main+0xe4>
		       // 這是正常情況，因為磁力計更新速率可能較慢或與主迴圈不同步
		     }
		     else {
		    	 //讀取 Mag 數據失敗!
		       printf("Failed to read Mag !\r\n");
 8000dd2:	4810      	ldr	r0, [pc, #64]	@ (8000e14 <ICM20948_Main+0x120>)
 8000dd4:	f004 ffde 	bl	8005d94 <puts>
		     }

		     printf("----------------------------------------\r\n");
 8000dd8:	480f      	ldr	r0, [pc, #60]	@ (8000e18 <ICM20948_Main+0x124>)
 8000dda:	f004 ffdb 	bl	8005d94 <puts>
		     HAL_Delay(100); // 每秒讀取一次數據
 8000dde:	2064      	movs	r0, #100	@ 0x64
 8000de0:	f000 fd80 	bl	80018e4 <HAL_Delay>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	24000204 	.word	0x24000204
 8000df0:	240001fc 	.word	0x240001fc
 8000df4:	24000214 	.word	0x24000214
 8000df8:	24000220 	.word	0x24000220
 8000dfc:	08007cc8 	.word	0x08007cc8
 8000e00:	08007d10 	.word	0x08007d10
 8000e04:	2400020c 	.word	0x2400020c
 8000e08:	2400022c 	.word	0x2400022c
 8000e0c:	08007d34 	.word	0x08007d34
 8000e10:	08007d58 	.word	0x08007d58
 8000e14:	08007d6c 	.word	0x08007d6c
 8000e18:	08007d84 	.word	0x08007d84

08000e1c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e24:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e28:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d013      	beq.n	8000e5c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e34:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e38:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000e3c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00b      	beq.n	8000e5c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e44:	e000      	b.n	8000e48 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e46:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e48:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f9      	beq.n	8000e46 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e52:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e72:	f000 f9e5 	bl	8001240 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e76:	f000 fca3 	bl	80017c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7a:	f000 f83d 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f000 f90f 	bl	80010a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e82:	f000 f8b5 	bl	8000ff0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
 	int WWE = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
	  printf("ICM-20948 Test Program Init\r\n");
 8000e8a:	4816      	ldr	r0, [pc, #88]	@ (8000ee4 <main+0x78>)
 8000e8c:	f004 ff82 	bl	8005d94 <puts>
	// Initialize ICM-20948
	if (ICM20948_Init() == HAL_OK) {
 8000e90:	f7ff fc00 	bl	8000694 <ICM20948_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d103      	bne.n	8000ea2 <main+0x36>
	  printf("ICM-20948 Initialization OK\r\n");
 8000e9a:	4813      	ldr	r0, [pc, #76]	@ (8000ee8 <main+0x7c>)
 8000e9c:	f004 ff7a 	bl	8005d94 <puts>
 8000ea0:	e004      	b.n	8000eac <main+0x40>
	} else {
	  printf("ICM-20948 Initialization FAILED\r\n");
 8000ea2:	4812      	ldr	r0, [pc, #72]	@ (8000eec <main+0x80>)
 8000ea4:	f004 ff76 	bl	8005d94 <puts>
	  Error_Handler();
 8000ea8:	f000 f9f6 	bl	8001298 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ICM20948_Main();
 8000eac:	f7ff ff22 	bl	8000cf4 <ICM20948_Main>





	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	480e      	ldr	r0, [pc, #56]	@ (8000ef0 <main+0x84>)
 8000eb6:	f001 f851 	bl	8001f5c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000eba:	2064      	movs	r0, #100	@ 0x64
 8000ebc:	f000 fd12 	bl	80018e4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	480a      	ldr	r0, [pc, #40]	@ (8000ef0 <main+0x84>)
 8000ec6:	f001 f849 	bl	8001f5c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000eca:	2064      	movs	r0, #100	@ 0x64
 8000ecc:	f000 fd0a 	bl	80018e4 <HAL_Delay>
	  printf("archer %d \n",WWE);
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4808      	ldr	r0, [pc, #32]	@ (8000ef4 <main+0x88>)
 8000ed4:	f004 fef6 	bl	8005cc4 <iprintf>
	  	  WWE++;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3301      	adds	r3, #1
 8000edc:	607b      	str	r3, [r7, #4]
  {
 8000ede:	bf00      	nop
 8000ee0:	e7e4      	b.n	8000eac <main+0x40>
 8000ee2:	bf00      	nop
 8000ee4:	08007db0 	.word	0x08007db0
 8000ee8:	08007dd0 	.word	0x08007dd0
 8000eec:	08007df0 	.word	0x08007df0
 8000ef0:	58021000 	.word	0x58021000
 8000ef4:	08007e14 	.word	0x08007e14

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b09c      	sub	sp, #112	@ 0x70
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f02:	224c      	movs	r2, #76	@ 0x4c
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f005 f824 	bl	8005f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2220      	movs	r2, #32
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f005 f81e 	bl	8005f54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f001 f839 	bl	8001f90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b31      	ldr	r3, [pc, #196]	@ (8000fe8 <SystemClock_Config+0xf0>)
 8000f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f26:	4a30      	ldr	r2, [pc, #192]	@ (8000fe8 <SystemClock_Config+0xf0>)
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe8 <SystemClock_Config+0xf0>)
 8000f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <SystemClock_Config+0xf4>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f40:	4a2a      	ldr	r2, [pc, #168]	@ (8000fec <SystemClock_Config+0xf4>)
 8000f42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <SystemClock_Config+0xf4>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f54:	bf00      	nop
 8000f56:	4b25      	ldr	r3, [pc, #148]	@ (8000fec <SystemClock_Config+0xf4>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f62:	d1f8      	bne.n	8000f56 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f64:	2302      	movs	r3, #2
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6c:	2340      	movs	r3, #64	@ 0x40
 8000f6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f70:	2302      	movs	r3, #2
 8000f72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f74:	2300      	movs	r3, #0
 8000f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f78:	2304      	movs	r3, #4
 8000f7a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000f90:	2302      	movs	r3, #2
 8000f92:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 f831 	bl	8002004 <HAL_RCC_OscConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fa8:	f000 f976 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fac:	233f      	movs	r3, #63	@ 0x3f
 8000fae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fc71 	bl	80028b8 <HAL_RCC_ClockConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000fdc:	f000 f95c 	bl	8001298 <Error_Handler>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3770      	adds	r7, #112	@ 0x70
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	58000400 	.word	0x58000400
 8000fec:	58024800 	.word	0x58024800

08000ff0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff4:	4b28      	ldr	r3, [pc, #160]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8000ff6:	4a29      	ldr	r2, [pc, #164]	@ (800109c <MX_SPI1_Init+0xac>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ffa:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8000ffc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001000:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001002:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <MX_SPI1_Init+0xa8>)
 800100a:	2207      	movs	r2, #7
 800100c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800100e:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001010:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001014:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001016:	4b20      	ldr	r3, [pc, #128]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001018:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800101c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800101e:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001020:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001024:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001026:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001028:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800102c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800102e:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_SPI1_Init+0xa8>)
 800103c:	2200      	movs	r2, #0
 800103e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001042:	2200      	movs	r2, #0
 8001044:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001048:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800104c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800104e:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001050:	2200      	movs	r2, #0
 8001052:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001054:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001056:	2200      	movs	r2, #0
 8001058:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_SPI1_Init+0xa8>)
 800105c:	2200      	movs	r2, #0
 800105e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001060:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001062:	2200      	movs	r2, #0
 8001064:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001068:	2200      	movs	r2, #0
 800106a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <MX_SPI1_Init+0xa8>)
 800106e:	2200      	movs	r2, #0
 8001070:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001074:	2200      	movs	r2, #0
 8001076:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <MX_SPI1_Init+0xa8>)
 800107a:	2200      	movs	r2, #0
 800107c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001080:	2200      	movs	r2, #0
 8001082:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <MX_SPI1_Init+0xa8>)
 8001086:	f003 fab5 	bl	80045f4 <HAL_SPI_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001090:	f000 f902 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	24000238 	.word	0x24000238
 800109c:	40013000 	.word	0x40013000

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	@ 0x30
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b6:	4b50      	ldr	r3, [pc, #320]	@ (80011f8 <MX_GPIO_Init+0x158>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010bc:	4a4e      	ldr	r2, [pc, #312]	@ (80011f8 <MX_GPIO_Init+0x158>)
 80010be:	f043 0320 	orr.w	r3, r3, #32
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c6:	4b4c      	ldr	r3, [pc, #304]	@ (80011f8 <MX_GPIO_Init+0x158>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d4:	4b48      	ldr	r3, [pc, #288]	@ (80011f8 <MX_GPIO_Init+0x158>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010da:	4a47      	ldr	r2, [pc, #284]	@ (80011f8 <MX_GPIO_Init+0x158>)
 80010dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e4:	4b44      	ldr	r3, [pc, #272]	@ (80011f8 <MX_GPIO_Init+0x158>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b41      	ldr	r3, [pc, #260]	@ (80011f8 <MX_GPIO_Init+0x158>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f8:	4a3f      	ldr	r2, [pc, #252]	@ (80011f8 <MX_GPIO_Init+0x158>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001102:	4b3d      	ldr	r3, [pc, #244]	@ (80011f8 <MX_GPIO_Init+0x158>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001110:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <MX_GPIO_Init+0x158>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001116:	4a38      	ldr	r2, [pc, #224]	@ (80011f8 <MX_GPIO_Init+0x158>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001120:	4b35      	ldr	r3, [pc, #212]	@ (80011f8 <MX_GPIO_Init+0x158>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800112e:	4b32      	ldr	r3, [pc, #200]	@ (80011f8 <MX_GPIO_Init+0x158>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001134:	4a30      	ldr	r2, [pc, #192]	@ (80011f8 <MX_GPIO_Init+0x158>)
 8001136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113e:	4b2e      	ldr	r3, [pc, #184]	@ (80011f8 <MX_GPIO_Init+0x158>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <MX_GPIO_Init+0x158>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	4a29      	ldr	r2, [pc, #164]	@ (80011f8 <MX_GPIO_Init+0x158>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115c:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <MX_GPIO_Init+0x158>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800116a:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <MX_GPIO_Init+0x158>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001170:	4a21      	ldr	r2, [pc, #132]	@ (80011f8 <MX_GPIO_Init+0x158>)
 8001172:	f043 0310 	orr.w	r3, r3, #16
 8001176:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117a:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <MX_GPIO_Init+0x158>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800118e:	481b      	ldr	r0, [pc, #108]	@ (80011fc <MX_GPIO_Init+0x15c>)
 8001190:	f000 fee4 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2102      	movs	r1, #2
 8001198:	4819      	ldr	r0, [pc, #100]	@ (8001200 <MX_GPIO_Init+0x160>)
 800119a:	f000 fedf 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ICM20948_DRDY_Pin */
  GPIO_InitStruct.Pin = ICM20948_DRDY_Pin;
 800119e:	2304      	movs	r3, #4
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ICM20948_DRDY_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4814      	ldr	r0, [pc, #80]	@ (8001204 <MX_GPIO_Init+0x164>)
 80011b2:	f000 fd23 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ICM20948_CS_Pin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 80011b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	480b      	ldr	r0, [pc, #44]	@ (80011fc <MX_GPIO_Init+0x15c>)
 80011d0:	f000 fd14 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_GPIO_Init+0x160>)
 80011ec:	f000 fd06 	bl	8001bfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f0:	bf00      	nop
 80011f2:	3730      	adds	r7, #48	@ 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58020c00 	.word	0x58020c00
 8001200:	58021000 	.word	0x58021000
 8001204:	58021400 	.word	0x58021400

08001208 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e009      	b.n	800122e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	60ba      	str	r2, [r7, #8]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fdfa 	bl	8000e1c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbf1      	blt.n	800121a <_write+0x12>
  }
  return len;
 8001236:	687b      	ldr	r3, [r7, #4]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001252:	f000 fc5b 	bl	8001b0c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001256:	2301      	movs	r3, #1
 8001258:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800125a:	2300      	movs	r3, #0
 800125c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001262:	231f      	movs	r3, #31
 8001264:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001266:	2387      	movs	r3, #135	@ 0x87
 8001268:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800126a:	2300      	movs	r3, #0
 800126c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800126e:	2300      	movs	r3, #0
 8001270:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001272:	2301      	movs	r3, #1
 8001274:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001276:	2301      	movs	r3, #1
 8001278:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001282:	463b      	mov	r3, r7
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fc79 	bl	8001b7c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800128a:	2004      	movs	r0, #4
 800128c:	f000 fc56 	bl	8001b3c <HAL_MPU_Enable>

}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <Error_Handler+0x8>

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <HAL_MspInit+0x30>)
 80012ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012b0:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_MspInit+0x30>)
 80012b2:	f043 0302 	orr.w	r3, r3, #2
 80012b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_MspInit+0x30>)
 80012bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	58024400 	.word	0x58024400

080012d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0bc      	sub	sp, #240	@ 0xf0
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	22c0      	movs	r2, #192	@ 0xc0
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 fe2b 	bl	8005f54 <memset>
  if(hspi->Instance==SPI1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a4b      	ldr	r2, [pc, #300]	@ (8001430 <HAL_SPI_MspInit+0x158>)
 8001304:	4293      	cmp	r3, r2
 8001306:	f040 808e 	bne.w	8001426 <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800130a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001316:	2300      	movs	r3, #0
 8001318:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131a:	f107 0318 	add.w	r3, r7, #24
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fdfa 	bl	8002f18 <HAL_RCCEx_PeriphCLKConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800132a:	f7ff ffb5 	bl	8001298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800132e:	4b41      	ldr	r3, [pc, #260]	@ (8001434 <HAL_SPI_MspInit+0x15c>)
 8001330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001334:	4a3f      	ldr	r2, [pc, #252]	@ (8001434 <HAL_SPI_MspInit+0x15c>)
 8001336:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800133a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800133e:	4b3d      	ldr	r3, [pc, #244]	@ (8001434 <HAL_SPI_MspInit+0x15c>)
 8001340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001344:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b39      	ldr	r3, [pc, #228]	@ (8001434 <HAL_SPI_MspInit+0x15c>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001352:	4a38      	ldr	r2, [pc, #224]	@ (8001434 <HAL_SPI_MspInit+0x15c>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800135c:	4b35      	ldr	r3, [pc, #212]	@ (8001434 <HAL_SPI_MspInit+0x15c>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800136a:	4b32      	ldr	r3, [pc, #200]	@ (8001434 <HAL_SPI_MspInit+0x15c>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001370:	4a30      	ldr	r2, [pc, #192]	@ (8001434 <HAL_SPI_MspInit+0x15c>)
 8001372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800137a:	4b2e      	ldr	r3, [pc, #184]	@ (8001434 <HAL_SPI_MspInit+0x15c>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <HAL_SPI_MspInit+0x15c>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138e:	4a29      	ldr	r2, [pc, #164]	@ (8001434 <HAL_SPI_MspInit+0x15c>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001398:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <HAL_SPI_MspInit+0x15c>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin;
 80013a6:	2320      	movs	r3, #32
 80013a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013be:	2305      	movs	r3, #5
 80013c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ICM20948_SCK_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013c8:	4619      	mov	r1, r3
 80013ca:	481b      	ldr	r0, [pc, #108]	@ (8001438 <HAL_SPI_MspInit+0x160>)
 80013cc:	f000 fc16 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ICM20948_MISO_Pin;
 80013d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ea:	2305      	movs	r3, #5
 80013ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ICM20948_MISO_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013f4:	4619      	mov	r1, r3
 80013f6:	4811      	ldr	r0, [pc, #68]	@ (800143c <HAL_SPI_MspInit+0x164>)
 80013f8:	f000 fc00 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ICM20948_MOSI_Pin;
 80013fc:	2320      	movs	r3, #32
 80013fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001414:	2305      	movs	r3, #5
 8001416:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ICM20948_MOSI_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800141e:	4619      	mov	r1, r3
 8001420:	4807      	ldr	r0, [pc, #28]	@ (8001440 <HAL_SPI_MspInit+0x168>)
 8001422:	f000 fbeb 	bl	8001bfc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001426:	bf00      	nop
 8001428:	37f0      	adds	r7, #240	@ 0xf0
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40013000 	.word	0x40013000
 8001434:	58024400 	.word	0x58024400
 8001438:	58020000 	.word	0x58020000
 800143c:	58021800 	.word	0x58021800
 8001440:	58020400 	.word	0x58020400

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <NMI_Handler+0x4>

0800144c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <MemManage_Handler+0x4>

0800145c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <UsageFault_Handler+0x4>

0800146c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149a:	f000 fa03 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  return 1;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <_kill>:

int _kill(int pid, int sig)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014bc:	f004 fd9c 	bl	8005ff8 <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2216      	movs	r2, #22
 80014c4:	601a      	str	r2, [r3, #0]
  return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_exit>:

void _exit (int status)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014da:	f04f 31ff 	mov.w	r1, #4294967295
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffe7 	bl	80014b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <_exit+0x12>

080014e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e00a      	b.n	8001510 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014fa:	f3af 8000 	nop.w
 80014fe:	4601      	mov	r1, r0
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	b2ca      	uxtb	r2, r1
 8001508:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf0      	blt.n	80014fa <_read+0x12>
  }

  return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800154a:	605a      	str	r2, [r3, #4]
  return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_isatty>:

int _isatty(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	@ (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f004 fd1c 	bl	8005ff8 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	@ (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	24080000 	.word	0x24080000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	240002c0 	.word	0x240002c0
 80015f4:	24000418 	.word	0x24000418

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015fc:	4b43      	ldr	r3, [pc, #268]	@ (800170c <SystemInit+0x114>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001602:	4a42      	ldr	r2, [pc, #264]	@ (800170c <SystemInit+0x114>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800160c:	4b40      	ldr	r3, [pc, #256]	@ (8001710 <SystemInit+0x118>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	2b06      	cmp	r3, #6
 8001616:	d807      	bhi.n	8001628 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001618:	4b3d      	ldr	r3, [pc, #244]	@ (8001710 <SystemInit+0x118>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 030f 	bic.w	r3, r3, #15
 8001620:	4a3b      	ldr	r2, [pc, #236]	@ (8001710 <SystemInit+0x118>)
 8001622:	f043 0307 	orr.w	r3, r3, #7
 8001626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001628:	4b3a      	ldr	r3, [pc, #232]	@ (8001714 <SystemInit+0x11c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a39      	ldr	r2, [pc, #228]	@ (8001714 <SystemInit+0x11c>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001634:	4b37      	ldr	r3, [pc, #220]	@ (8001714 <SystemInit+0x11c>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800163a:	4b36      	ldr	r3, [pc, #216]	@ (8001714 <SystemInit+0x11c>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4935      	ldr	r1, [pc, #212]	@ (8001714 <SystemInit+0x11c>)
 8001640:	4b35      	ldr	r3, [pc, #212]	@ (8001718 <SystemInit+0x120>)
 8001642:	4013      	ands	r3, r2
 8001644:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001646:	4b32      	ldr	r3, [pc, #200]	@ (8001710 <SystemInit+0x118>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001652:	4b2f      	ldr	r3, [pc, #188]	@ (8001710 <SystemInit+0x118>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 030f 	bic.w	r3, r3, #15
 800165a:	4a2d      	ldr	r2, [pc, #180]	@ (8001710 <SystemInit+0x118>)
 800165c:	f043 0307 	orr.w	r3, r3, #7
 8001660:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001662:	4b2c      	ldr	r3, [pc, #176]	@ (8001714 <SystemInit+0x11c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001668:	4b2a      	ldr	r3, [pc, #168]	@ (8001714 <SystemInit+0x11c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800166e:	4b29      	ldr	r3, [pc, #164]	@ (8001714 <SystemInit+0x11c>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001674:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <SystemInit+0x11c>)
 8001676:	4a29      	ldr	r2, [pc, #164]	@ (800171c <SystemInit+0x124>)
 8001678:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800167a:	4b26      	ldr	r3, [pc, #152]	@ (8001714 <SystemInit+0x11c>)
 800167c:	4a28      	ldr	r2, [pc, #160]	@ (8001720 <SystemInit+0x128>)
 800167e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001680:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <SystemInit+0x11c>)
 8001682:	4a28      	ldr	r2, [pc, #160]	@ (8001724 <SystemInit+0x12c>)
 8001684:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001686:	4b23      	ldr	r3, [pc, #140]	@ (8001714 <SystemInit+0x11c>)
 8001688:	2200      	movs	r2, #0
 800168a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800168c:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <SystemInit+0x11c>)
 800168e:	4a25      	ldr	r2, [pc, #148]	@ (8001724 <SystemInit+0x12c>)
 8001690:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <SystemInit+0x11c>)
 8001694:	2200      	movs	r2, #0
 8001696:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001698:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <SystemInit+0x11c>)
 800169a:	4a22      	ldr	r2, [pc, #136]	@ (8001724 <SystemInit+0x12c>)
 800169c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800169e:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <SystemInit+0x11c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <SystemInit+0x11c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001714 <SystemInit+0x11c>)
 80016aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016b0:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <SystemInit+0x11c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <SystemInit+0x130>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <SystemInit+0x134>)
 80016bc:	4013      	ands	r3, r2
 80016be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016c2:	d202      	bcs.n	80016ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <SystemInit+0x138>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <SystemInit+0x11c>)
 80016cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d113      	bne.n	8001700 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <SystemInit+0x11c>)
 80016da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016de:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <SystemInit+0x11c>)
 80016e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <SystemInit+0x13c>)
 80016ea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016ee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016f0:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <SystemInit+0x11c>)
 80016f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016f6:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <SystemInit+0x11c>)
 80016f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00
 8001710:	52002000 	.word	0x52002000
 8001714:	58024400 	.word	0x58024400
 8001718:	eaf6ed7f 	.word	0xeaf6ed7f
 800171c:	02020200 	.word	0x02020200
 8001720:	01ff0000 	.word	0x01ff0000
 8001724:	01010280 	.word	0x01010280
 8001728:	5c001000 	.word	0x5c001000
 800172c:	ffff0000 	.word	0xffff0000
 8001730:	51008108 	.word	0x51008108
 8001734:	52004000 	.word	0x52004000

08001738 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <ExitRun0Mode+0x2c>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <ExitRun0Mode+0x2c>)
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001748:	bf00      	nop
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <ExitRun0Mode+0x2c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f9      	beq.n	800174a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	58024800 	.word	0x58024800

08001768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001768:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80017a4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800176c:	f7ff ffe4 	bl	8001738 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001770:	f7ff ff42 	bl	80015f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001774:	480c      	ldr	r0, [pc, #48]	@ (80017a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001776:	490d      	ldr	r1, [pc, #52]	@ (80017ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001778:	4a0d      	ldr	r2, [pc, #52]	@ (80017b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800178c:	4c0a      	ldr	r4, [pc, #40]	@ (80017b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179a:	f004 fc33 	bl	8006004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800179e:	f7ff fb65 	bl	8000e6c <main>
  bx  lr
 80017a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017ac:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80017b0:	080081b0 	.word	0x080081b0
  ldr r2, =_sbss
 80017b4:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80017b8:	24000414 	.word	0x24000414

080017bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017bc:	e7fe      	b.n	80017bc <ADC3_IRQHandler>
	...

080017c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c6:	2003      	movs	r0, #3
 80017c8:	f000 f96e 	bl	8001aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017cc:	f001 fa2a 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <HAL_Init+0x68>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	4913      	ldr	r1, [pc, #76]	@ (800182c <HAL_Init+0x6c>)
 80017de:	5ccb      	ldrb	r3, [r1, r3]
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
 80017e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <HAL_Init+0x68>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	4a0e      	ldr	r2, [pc, #56]	@ (800182c <HAL_Init+0x6c>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001800:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <HAL_Init+0x70>)
 8001802:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001804:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <HAL_Init+0x74>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180a:	200f      	movs	r0, #15
 800180c:	f000 f814 	bl	8001838 <HAL_InitTick>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e002      	b.n	8001820 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800181a:	f7ff fd43 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	58024400 	.word	0x58024400
 800182c:	08007e20 	.word	0x08007e20
 8001830:	2400000c 	.word	0x2400000c
 8001834:	24000008 	.word	0x24000008

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001840:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_InitTick+0x60>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e021      	b.n	8001890 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <HAL_InitTick+0x64>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_InitTick+0x60>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f945 	bl	8001af2 <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e00e      	b.n	8001890 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d80a      	bhi.n	800188e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f000 f91d 	bl	8001abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001884:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <HAL_InitTick+0x68>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	24000014 	.word	0x24000014
 800189c:	24000008 	.word	0x24000008
 80018a0:	24000010 	.word	0x24000010

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	24000014 	.word	0x24000014
 80018c8:	240002c4 	.word	0x240002c4

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	240002c4 	.word	0x240002c4

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	24000014 	.word	0x24000014

0800192c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <HAL_GetREVID+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0c1b      	lsrs	r3, r3, #16
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	5c001000 	.word	0x5c001000

08001944 <__NVIC_SetPriorityGrouping>:
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <__NVIC_SetPriorityGrouping+0x40>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	4313      	orrs	r3, r2
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <__NVIC_SetPriorityGrouping+0x40>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00
 8001988:	05fa0000 	.word	0x05fa0000

0800198c <__NVIC_GetPriorityGrouping>:
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_SetPriority>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db0a      	blt.n	80019d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	490c      	ldr	r1, [pc, #48]	@ (80019f4 <__NVIC_SetPriority+0x4c>)
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	440b      	add	r3, r1
 80019cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019d0:	e00a      	b.n	80019e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4908      	ldr	r1, [pc, #32]	@ (80019f8 <__NVIC_SetPriority+0x50>)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	3b04      	subs	r3, #4
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	440b      	add	r3, r1
 80019e6:	761a      	strb	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <NVIC_EncodePriority>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	@ 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f1c3 0307 	rsb	r3, r3, #7
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	bf28      	it	cs
 8001a1a:	2304      	movcs	r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3304      	adds	r3, #4
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d902      	bls.n	8001a2c <NVIC_EncodePriority+0x30>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3b03      	subs	r3, #3
 8001a2a:	e000      	b.n	8001a2e <NVIC_EncodePriority+0x32>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	401a      	ands	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	4313      	orrs	r3, r2
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	@ 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <SysTick_Config>:
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a74:	d301      	bcc.n	8001a7a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00f      	b.n	8001a9a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <SysTick_Config+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a82:	210f      	movs	r1, #15
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f7ff ff8e 	bl	80019a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <SysTick_Config+0x40>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a92:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <SysTick_Config+0x40>)
 8001a94:	2207      	movs	r2, #7
 8001a96:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	e000e010 	.word	0xe000e010

08001aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff47 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff5e 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff90 	bl	80019fc <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5f 	bl	80019a8 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffb2 	bl	8001a64 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b10:	f3bf 8f5f 	dmb	sy
}
 8001b14:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <HAL_MPU_Disable+0x28>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	4a06      	ldr	r2, [pc, #24]	@ (8001b34 <HAL_MPU_Disable+0x28>)
 8001b1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b20:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_MPU_Disable+0x2c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00
 8001b38:	e000ed90 	.word	0xe000ed90

08001b3c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b44:	4a0b      	ldr	r2, [pc, #44]	@ (8001b74 <HAL_MPU_Enable+0x38>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <HAL_MPU_Enable+0x3c>)
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	4a09      	ldr	r2, [pc, #36]	@ (8001b78 <HAL_MPU_Enable+0x3c>)
 8001b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b58:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b5a:	f3bf 8f4f 	dsb	sy
}
 8001b5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b60:	f3bf 8f6f 	isb	sy
}
 8001b64:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed90 	.word	0xe000ed90
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	785a      	ldrb	r2, [r3, #1]
 8001b88:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <HAL_MPU_ConfigRegion+0x7c>)
 8001b8a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <HAL_MPU_ConfigRegion+0x7c>)
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4a19      	ldr	r2, [pc, #100]	@ (8001bf8 <HAL_MPU_ConfigRegion+0x7c>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b98:	4a17      	ldr	r2, [pc, #92]	@ (8001bf8 <HAL_MPU_ConfigRegion+0x7c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7b1b      	ldrb	r3, [r3, #12]
 8001ba4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7adb      	ldrb	r3, [r3, #11]
 8001baa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7a9b      	ldrb	r3, [r3, #10]
 8001bb2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7b5b      	ldrb	r3, [r3, #13]
 8001bba:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7b9b      	ldrb	r3, [r3, #14]
 8001bc2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7bdb      	ldrb	r3, [r3, #15]
 8001bca:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7a5b      	ldrb	r3, [r3, #9]
 8001bd2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7a1b      	ldrb	r3, [r3, #8]
 8001bda:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bdc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001be4:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001be6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001be8:	6113      	str	r3, [r2, #16]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed90 	.word	0xe000ed90

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	@ 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c0a:	4b89      	ldr	r3, [pc, #548]	@ (8001e30 <HAL_GPIO_Init+0x234>)
 8001c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c0e:	e194      	b.n	8001f3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2101      	movs	r1, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8186 	beq.w	8001f34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d005      	beq.n	8001c40 <HAL_GPIO_Init+0x44>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d130      	bne.n	8001ca2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c76:	2201      	movs	r2, #1
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	091b      	lsrs	r3, r3, #4
 8001c8c:	f003 0201 	and.w	r2, r3, #1
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d017      	beq.n	8001cde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d123      	bne.n	8001d32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	08da      	lsrs	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3208      	adds	r2, #8
 8001cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	220f      	movs	r2, #15
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	69b9      	ldr	r1, [r7, #24]
 8001d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0203 	and.w	r2, r3, #3
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80e0 	beq.w	8001f34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d74:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <HAL_GPIO_Init+0x238>)
 8001d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8001e34 <HAL_GPIO_Init+0x238>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d84:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <HAL_GPIO_Init+0x238>)
 8001d86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d92:	4a29      	ldr	r2, [pc, #164]	@ (8001e38 <HAL_GPIO_Init+0x23c>)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a20      	ldr	r2, [pc, #128]	@ (8001e3c <HAL_GPIO_Init+0x240>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d052      	beq.n	8001e64 <HAL_GPIO_Init+0x268>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e40 <HAL_GPIO_Init+0x244>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d031      	beq.n	8001e2a <HAL_GPIO_Init+0x22e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e44 <HAL_GPIO_Init+0x248>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d02b      	beq.n	8001e26 <HAL_GPIO_Init+0x22a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e48 <HAL_GPIO_Init+0x24c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d025      	beq.n	8001e22 <HAL_GPIO_Init+0x226>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e4c <HAL_GPIO_Init+0x250>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01f      	beq.n	8001e1e <HAL_GPIO_Init+0x222>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e50 <HAL_GPIO_Init+0x254>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d019      	beq.n	8001e1a <HAL_GPIO_Init+0x21e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e54 <HAL_GPIO_Init+0x258>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0x21a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <HAL_GPIO_Init+0x25c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00d      	beq.n	8001e12 <HAL_GPIO_Init+0x216>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a18      	ldr	r2, [pc, #96]	@ (8001e5c <HAL_GPIO_Init+0x260>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <HAL_GPIO_Init+0x212>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a17      	ldr	r2, [pc, #92]	@ (8001e60 <HAL_GPIO_Init+0x264>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <HAL_GPIO_Init+0x20e>
 8001e06:	2309      	movs	r3, #9
 8001e08:	e02d      	b.n	8001e66 <HAL_GPIO_Init+0x26a>
 8001e0a:	230a      	movs	r3, #10
 8001e0c:	e02b      	b.n	8001e66 <HAL_GPIO_Init+0x26a>
 8001e0e:	2308      	movs	r3, #8
 8001e10:	e029      	b.n	8001e66 <HAL_GPIO_Init+0x26a>
 8001e12:	2307      	movs	r3, #7
 8001e14:	e027      	b.n	8001e66 <HAL_GPIO_Init+0x26a>
 8001e16:	2306      	movs	r3, #6
 8001e18:	e025      	b.n	8001e66 <HAL_GPIO_Init+0x26a>
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	e023      	b.n	8001e66 <HAL_GPIO_Init+0x26a>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	e021      	b.n	8001e66 <HAL_GPIO_Init+0x26a>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e01f      	b.n	8001e66 <HAL_GPIO_Init+0x26a>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e01d      	b.n	8001e66 <HAL_GPIO_Init+0x26a>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e01b      	b.n	8001e66 <HAL_GPIO_Init+0x26a>
 8001e2e:	bf00      	nop
 8001e30:	58000080 	.word	0x58000080
 8001e34:	58024400 	.word	0x58024400
 8001e38:	58000400 	.word	0x58000400
 8001e3c:	58020000 	.word	0x58020000
 8001e40:	58020400 	.word	0x58020400
 8001e44:	58020800 	.word	0x58020800
 8001e48:	58020c00 	.word	0x58020c00
 8001e4c:	58021000 	.word	0x58021000
 8001e50:	58021400 	.word	0x58021400
 8001e54:	58021800 	.word	0x58021800
 8001e58:	58021c00 	.word	0x58021c00
 8001e5c:	58022000 	.word	0x58022000
 8001e60:	58022400 	.word	0x58022400
 8001e64:	2300      	movs	r3, #0
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e76:	4938      	ldr	r1, [pc, #224]	@ (8001f58 <HAL_GPIO_Init+0x35c>)
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001eaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ed8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	3301      	adds	r3, #1
 8001f38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f47f ae63 	bne.w	8001c10 <HAL_GPIO_Init+0x14>
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
 8001f4e:	3724      	adds	r7, #36	@ 0x24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	58000400 	.word	0x58000400

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001f98:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <HAL_PWREx_ConfigSupply+0x70>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d00a      	beq.n	8001fba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001fa4:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <HAL_PWREx_ConfigSupply+0x70>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d001      	beq.n	8001fb6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e01f      	b.n	8001ff6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e01d      	b.n	8001ff6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001fba:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_PWREx_ConfigSupply+0x70>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	490f      	ldr	r1, [pc, #60]	@ (8002000 <HAL_PWREx_ConfigSupply+0x70>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001fca:	f7ff fc7f 	bl	80018cc <HAL_GetTick>
 8001fce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fd0:	e009      	b.n	8001fe6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fd2:	f7ff fc7b 	bl	80018cc <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fe0:	d901      	bls.n	8001fe6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e007      	b.n	8001ff6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_PWREx_ConfigSupply+0x70>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ff2:	d1ee      	bne.n	8001fd2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	58024800 	.word	0x58024800

08002004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08c      	sub	sp, #48	@ 0x30
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	f000 bc48 	b.w	80028a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8088 	beq.w	8002136 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002026:	4b99      	ldr	r3, [pc, #612]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800202e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002030:	4b96      	ldr	r3, [pc, #600]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002038:	2b10      	cmp	r3, #16
 800203a:	d007      	beq.n	800204c <HAL_RCC_OscConfig+0x48>
 800203c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800203e:	2b18      	cmp	r3, #24
 8002040:	d111      	bne.n	8002066 <HAL_RCC_OscConfig+0x62>
 8002042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d10c      	bne.n	8002066 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	4b8f      	ldr	r3, [pc, #572]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d06d      	beq.n	8002134 <HAL_RCC_OscConfig+0x130>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d169      	bne.n	8002134 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	f000 bc21 	b.w	80028a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x7a>
 8002070:	4b86      	ldr	r3, [pc, #536]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a85      	ldr	r2, [pc, #532]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e02e      	b.n	80020dc <HAL_RCC_OscConfig+0xd8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x9c>
 8002086:	4b81      	ldr	r3, [pc, #516]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a80      	ldr	r2, [pc, #512]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b7e      	ldr	r3, [pc, #504]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7d      	ldr	r2, [pc, #500]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002098:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xd8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0xc0>
 80020aa:	4b78      	ldr	r3, [pc, #480]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a77      	ldr	r2, [pc, #476]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b75      	ldr	r3, [pc, #468]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a74      	ldr	r2, [pc, #464]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xd8>
 80020c4:	4b71      	ldr	r3, [pc, #452]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a70      	ldr	r2, [pc, #448]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b6e      	ldr	r3, [pc, #440]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a6d      	ldr	r2, [pc, #436]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff fbf2 	bl	80018cc <HAL_GetTick>
 80020e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff fbee 	bl	80018cc <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	@ 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e3d4      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020fe:	4b63      	ldr	r3, [pc, #396]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0xe8>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7ff fbde 	bl	80018cc <HAL_GetTick>
 8002110:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff fbda 	bl	80018cc <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	@ 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e3c0      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002126:	4b59      	ldr	r3, [pc, #356]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x110>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80ca 	beq.w	80022d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002144:	4b51      	ldr	r3, [pc, #324]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800214c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800214e:	4b4f      	ldr	r3, [pc, #316]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002152:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_RCC_OscConfig+0x166>
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	2b18      	cmp	r3, #24
 800215e:	d156      	bne.n	800220e <HAL_RCC_OscConfig+0x20a>
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d151      	bne.n	800220e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216a:	4b48      	ldr	r3, [pc, #288]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x17e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e392      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002182:	4b42      	ldr	r3, [pc, #264]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 0219 	bic.w	r2, r3, #25
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	493f      	ldr	r1, [pc, #252]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff fb9a 	bl	80018cc <HAL_GetTick>
 8002198:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff fb96 	bl	80018cc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e37c      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ae:	4b37      	ldr	r3, [pc, #220]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ba:	f7ff fbb7 	bl	800192c <HAL_GetREVID>
 80021be:	4603      	mov	r3, r0
 80021c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d817      	bhi.n	80021f8 <HAL_RCC_OscConfig+0x1f4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b40      	cmp	r3, #64	@ 0x40
 80021ce:	d108      	bne.n	80021e2 <HAL_RCC_OscConfig+0x1de>
 80021d0:	4b2e      	ldr	r3, [pc, #184]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80021d8:	4a2c      	ldr	r2, [pc, #176]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80021da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e0:	e07a      	b.n	80022d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	031b      	lsls	r3, r3, #12
 80021f0:	4926      	ldr	r1, [pc, #152]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f6:	e06f      	b.n	80022d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f8:	4b24      	ldr	r3, [pc, #144]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	061b      	lsls	r3, r3, #24
 8002206:	4921      	ldr	r1, [pc, #132]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800220c:	e064      	b.n	80022d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d047      	beq.n	80022a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002216:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0219 	bic.w	r2, r3, #25
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	491a      	ldr	r1, [pc, #104]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff fb50 	bl	80018cc <HAL_GetTick>
 800222c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7ff fb4c 	bl	80018cc <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e332      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002242:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224e:	f7ff fb6d 	bl	800192c <HAL_GetREVID>
 8002252:	4603      	mov	r3, r0
 8002254:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002258:	4293      	cmp	r3, r2
 800225a:	d819      	bhi.n	8002290 <HAL_RCC_OscConfig+0x28c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b40      	cmp	r3, #64	@ 0x40
 8002262:	d108      	bne.n	8002276 <HAL_RCC_OscConfig+0x272>
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800226c:	4a07      	ldr	r2, [pc, #28]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 800226e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002272:	6053      	str	r3, [r2, #4]
 8002274:	e030      	b.n	80022d8 <HAL_RCC_OscConfig+0x2d4>
 8002276:	4b05      	ldr	r3, [pc, #20]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	031b      	lsls	r3, r3, #12
 8002284:	4901      	ldr	r1, [pc, #4]	@ (800228c <HAL_RCC_OscConfig+0x288>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
 800228a:	e025      	b.n	80022d8 <HAL_RCC_OscConfig+0x2d4>
 800228c:	58024400 	.word	0x58024400
 8002290:	4b9a      	ldr	r3, [pc, #616]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	4997      	ldr	r1, [pc, #604]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
 80022a4:	e018      	b.n	80022d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a6:	4b95      	ldr	r3, [pc, #596]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a94      	ldr	r2, [pc, #592]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7ff fb0b 	bl	80018cc <HAL_GetTick>
 80022b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ba:	f7ff fb07 	bl	80018cc <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e2ed      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022cc:	4b8b      	ldr	r3, [pc, #556]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a9 	beq.w	8002438 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e6:	4b85      	ldr	r3, [pc, #532]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022f0:	4b82      	ldr	r3, [pc, #520]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d007      	beq.n	800230c <HAL_RCC_OscConfig+0x308>
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b18      	cmp	r3, #24
 8002300:	d13a      	bne.n	8002378 <HAL_RCC_OscConfig+0x374>
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d135      	bne.n	8002378 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800230c:	4b7b      	ldr	r3, [pc, #492]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_OscConfig+0x320>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	2b80      	cmp	r3, #128	@ 0x80
 800231e:	d001      	beq.n	8002324 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e2c1      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002324:	f7ff fb02 	bl	800192c <HAL_GetREVID>
 8002328:	4603      	mov	r3, r0
 800232a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800232e:	4293      	cmp	r3, r2
 8002330:	d817      	bhi.n	8002362 <HAL_RCC_OscConfig+0x35e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	2b20      	cmp	r3, #32
 8002338:	d108      	bne.n	800234c <HAL_RCC_OscConfig+0x348>
 800233a:	4b70      	ldr	r3, [pc, #448]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002342:	4a6e      	ldr	r2, [pc, #440]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 8002344:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002348:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800234a:	e075      	b.n	8002438 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800234c:	4b6b      	ldr	r3, [pc, #428]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	069b      	lsls	r3, r3, #26
 800235a:	4968      	ldr	r1, [pc, #416]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002360:	e06a      	b.n	8002438 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002362:	4b66      	ldr	r3, [pc, #408]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	061b      	lsls	r3, r3, #24
 8002370:	4962      	ldr	r1, [pc, #392]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 8002372:	4313      	orrs	r3, r2
 8002374:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002376:	e05f      	b.n	8002438 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d042      	beq.n	8002406 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002380:	4b5e      	ldr	r3, [pc, #376]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a5d      	ldr	r2, [pc, #372]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 8002386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800238a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7ff fa9e 	bl	80018cc <HAL_GetTick>
 8002390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002394:	f7ff fa9a 	bl	80018cc <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e280      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023a6:	4b55      	ldr	r3, [pc, #340]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023b2:	f7ff fabb 	bl	800192c <HAL_GetREVID>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023bc:	4293      	cmp	r3, r2
 80023be:	d817      	bhi.n	80023f0 <HAL_RCC_OscConfig+0x3ec>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d108      	bne.n	80023da <HAL_RCC_OscConfig+0x3d6>
 80023c8:	4b4c      	ldr	r3, [pc, #304]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80023d0:	4a4a      	ldr	r2, [pc, #296]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80023d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80023d6:	6053      	str	r3, [r2, #4]
 80023d8:	e02e      	b.n	8002438 <HAL_RCC_OscConfig+0x434>
 80023da:	4b48      	ldr	r3, [pc, #288]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	069b      	lsls	r3, r3, #26
 80023e8:	4944      	ldr	r1, [pc, #272]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
 80023ee:	e023      	b.n	8002438 <HAL_RCC_OscConfig+0x434>
 80023f0:	4b42      	ldr	r3, [pc, #264]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	493f      	ldr	r1, [pc, #252]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 8002400:	4313      	orrs	r3, r2
 8002402:	60cb      	str	r3, [r1, #12]
 8002404:	e018      	b.n	8002438 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002406:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a3c      	ldr	r2, [pc, #240]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 800240c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7ff fa5b 	bl	80018cc <HAL_GetTick>
 8002416:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800241a:	f7ff fa57 	bl	80018cc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e23d      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800242c:	4b33      	ldr	r3, [pc, #204]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d036      	beq.n	80024b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d019      	beq.n	8002480 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244c:	4b2b      	ldr	r3, [pc, #172]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 800244e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002450:	4a2a      	ldr	r2, [pc, #168]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002458:	f7ff fa38 	bl	80018cc <HAL_GetTick>
 800245c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002460:	f7ff fa34 	bl	80018cc <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e21a      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002472:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 8002474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x45c>
 800247e:	e018      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002480:	4b1e      	ldr	r3, [pc, #120]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 8002482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002484:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7ff fa1e 	bl	80018cc <HAL_GetTick>
 8002490:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002494:	f7ff fa1a 	bl	80018cc <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e200      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80024a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d039      	beq.n	8002532 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d01c      	beq.n	8002500 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024c6:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a0c      	ldr	r2, [pc, #48]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80024cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024d2:	f7ff f9fb 	bl	80018cc <HAL_GetTick>
 80024d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024da:	f7ff f9f7 	bl	80018cc <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e1dd      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024ec:	4b03      	ldr	r3, [pc, #12]	@ (80024fc <HAL_RCC_OscConfig+0x4f8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x4d6>
 80024f8:	e01b      	b.n	8002532 <HAL_RCC_OscConfig+0x52e>
 80024fa:	bf00      	nop
 80024fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002500:	4b9b      	ldr	r3, [pc, #620]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a9a      	ldr	r2, [pc, #616]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002506:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800250a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800250c:	f7ff f9de 	bl	80018cc <HAL_GetTick>
 8002510:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002514:	f7ff f9da 	bl	80018cc <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e1c0      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002526:	4b92      	ldr	r3, [pc, #584]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8081 	beq.w	8002642 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002540:	4b8c      	ldr	r3, [pc, #560]	@ (8002774 <HAL_RCC_OscConfig+0x770>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a8b      	ldr	r2, [pc, #556]	@ (8002774 <HAL_RCC_OscConfig+0x770>)
 8002546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800254a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800254c:	f7ff f9be 	bl	80018cc <HAL_GetTick>
 8002550:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002554:	f7ff f9ba 	bl	80018cc <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	@ 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e1a0      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002566:	4b83      	ldr	r3, [pc, #524]	@ (8002774 <HAL_RCC_OscConfig+0x770>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d106      	bne.n	8002588 <HAL_RCC_OscConfig+0x584>
 800257a:	4b7d      	ldr	r3, [pc, #500]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257e:	4a7c      	ldr	r2, [pc, #496]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6713      	str	r3, [r2, #112]	@ 0x70
 8002586:	e02d      	b.n	80025e4 <HAL_RCC_OscConfig+0x5e0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10c      	bne.n	80025aa <HAL_RCC_OscConfig+0x5a6>
 8002590:	4b77      	ldr	r3, [pc, #476]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002594:	4a76      	ldr	r2, [pc, #472]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	6713      	str	r3, [r2, #112]	@ 0x70
 800259c:	4b74      	ldr	r3, [pc, #464]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a0:	4a73      	ldr	r2, [pc, #460]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80025a2:	f023 0304 	bic.w	r3, r3, #4
 80025a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a8:	e01c      	b.n	80025e4 <HAL_RCC_OscConfig+0x5e0>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x5c8>
 80025b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80025b8:	f043 0304 	orr.w	r3, r3, #4
 80025bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025be:	4b6c      	ldr	r3, [pc, #432]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c2:	4a6b      	ldr	r2, [pc, #428]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0x5e0>
 80025cc:	4b68      	ldr	r3, [pc, #416]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d0:	4a67      	ldr	r2, [pc, #412]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d8:	4b65      	ldr	r3, [pc, #404]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025dc:	4a64      	ldr	r2, [pc, #400]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80025de:	f023 0304 	bic.w	r3, r3, #4
 80025e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7ff f96e 	bl	80018cc <HAL_GetTick>
 80025f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025f2:	e00a      	b.n	800260a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7ff f96a 	bl	80018cc <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e14e      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800260a:	4b59      	ldr	r3, [pc, #356]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0ee      	beq.n	80025f4 <HAL_RCC_OscConfig+0x5f0>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7ff f958 	bl	80018cc <HAL_GetTick>
 800261c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7ff f954 	bl	80018cc <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e138      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002636:	4b4e      	ldr	r3, [pc, #312]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1ee      	bne.n	8002620 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 812d 	beq.w	80028a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800264c:	4b48      	ldr	r3, [pc, #288]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002654:	2b18      	cmp	r3, #24
 8002656:	f000 80bd 	beq.w	80027d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	2b02      	cmp	r3, #2
 8002660:	f040 809e 	bne.w	80027a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002664:	4b42      	ldr	r3, [pc, #264]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a41      	ldr	r2, [pc, #260]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 800266a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7ff f92c 	bl	80018cc <HAL_GetTick>
 8002674:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7ff f928 	bl	80018cc <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e10e      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800268a:	4b39      	ldr	r3, [pc, #228]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002696:	4b36      	ldr	r3, [pc, #216]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002698:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800269a:	4b37      	ldr	r3, [pc, #220]	@ (8002778 <HAL_RCC_OscConfig+0x774>)
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	430a      	orrs	r2, r1
 80026aa:	4931      	ldr	r1, [pc, #196]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	3b01      	subs	r3, #1
 80026b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026be:	3b01      	subs	r3, #1
 80026c0:	025b      	lsls	r3, r3, #9
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ca:	3b01      	subs	r3, #1
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d8:	3b01      	subs	r3, #1
 80026da:	061b      	lsls	r3, r3, #24
 80026dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80026e0:	4923      	ldr	r1, [pc, #140]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80026e6:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80026e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ea:	4a21      	ldr	r2, [pc, #132]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 80026f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026f6:	4b21      	ldr	r3, [pc, #132]	@ (800277c <HAL_RCC_OscConfig+0x778>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026fe:	00d2      	lsls	r2, r2, #3
 8002700:	491b      	ldr	r1, [pc, #108]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002702:	4313      	orrs	r3, r2
 8002704:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002706:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270a:	f023 020c 	bic.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	4917      	ldr	r1, [pc, #92]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002718:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 800271a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271c:	f023 0202 	bic.w	r2, r3, #2
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002724:	4912      	ldr	r1, [pc, #72]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002726:	4313      	orrs	r3, r2
 8002728:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800272a:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 800272c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272e:	4a10      	ldr	r2, [pc, #64]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002734:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002736:	4b0e      	ldr	r3, [pc, #56]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273a:	4a0d      	ldr	r2, [pc, #52]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 800273c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002740:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002742:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002746:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800274c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800274e:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	4a07      	ldr	r2, [pc, #28]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275a:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <HAL_RCC_OscConfig+0x76c>)
 8002760:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7ff f8b1 	bl	80018cc <HAL_GetTick>
 800276a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800276c:	e011      	b.n	8002792 <HAL_RCC_OscConfig+0x78e>
 800276e:	bf00      	nop
 8002770:	58024400 	.word	0x58024400
 8002774:	58024800 	.word	0x58024800
 8002778:	fffffc0c 	.word	0xfffffc0c
 800277c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7ff f8a4 	bl	80018cc <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e08a      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002792:	4b47      	ldr	r3, [pc, #284]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x77c>
 800279e:	e082      	b.n	80028a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a0:	4b43      	ldr	r3, [pc, #268]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a42      	ldr	r2, [pc, #264]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 80027a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7ff f88e 	bl	80018cc <HAL_GetTick>
 80027b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b4:	f7ff f88a 	bl	80018cc <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e070      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027c6:	4b3a      	ldr	r3, [pc, #232]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x7b0>
 80027d2:	e068      	b.n	80028a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80027d4:	4b36      	ldr	r3, [pc, #216]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 80027d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027da:	4b35      	ldr	r3, [pc, #212]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d031      	beq.n	800284c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f003 0203 	and.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d12a      	bne.n	800284c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d122      	bne.n	800284c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002810:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d11a      	bne.n	800284c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	0a5b      	lsrs	r3, r3, #9
 800281a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002822:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d111      	bne.n	800284c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	0c1b      	lsrs	r3, r3, #16
 800282c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002834:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d108      	bne.n	800284c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	0e1b      	lsrs	r3, r3, #24
 800283e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002846:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e02b      	b.n	80028a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002850:	4b17      	ldr	r3, [pc, #92]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 8002852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002854:	08db      	lsrs	r3, r3, #3
 8002856:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800285a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	429a      	cmp	r2, r3
 8002864:	d01f      	beq.n	80028a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002866:	4b12      	ldr	r3, [pc, #72]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 8002868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286a:	4a11      	ldr	r2, [pc, #68]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002872:	f7ff f82b 	bl	80018cc <HAL_GetTick>
 8002876:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002878:	bf00      	nop
 800287a:	f7ff f827 	bl	80018cc <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	4293      	cmp	r3, r2
 8002884:	d0f9      	beq.n	800287a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002886:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 8002888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800288a:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <HAL_RCC_OscConfig+0x8b0>)
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002892:	00d2      	lsls	r2, r2, #3
 8002894:	4906      	ldr	r1, [pc, #24]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 8002896:	4313      	orrs	r3, r2
 8002898:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800289a:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 800289c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289e:	4a04      	ldr	r2, [pc, #16]	@ (80028b0 <HAL_RCC_OscConfig+0x8ac>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3730      	adds	r7, #48	@ 0x30
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	58024400 	.word	0x58024400
 80028b4:	ffff0007 	.word	0xffff0007

080028b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e19c      	b.n	8002c06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b8a      	ldr	r3, [pc, #552]	@ (8002af8 <HAL_RCC_ClockConfig+0x240>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d910      	bls.n	80028fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b87      	ldr	r3, [pc, #540]	@ (8002af8 <HAL_RCC_ClockConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 020f 	bic.w	r2, r3, #15
 80028e2:	4985      	ldr	r1, [pc, #532]	@ (8002af8 <HAL_RCC_ClockConfig+0x240>)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b83      	ldr	r3, [pc, #524]	@ (8002af8 <HAL_RCC_ClockConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e184      	b.n	8002c06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d010      	beq.n	800292a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	4b7b      	ldr	r3, [pc, #492]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002914:	429a      	cmp	r2, r3
 8002916:	d908      	bls.n	800292a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002918:	4b78      	ldr	r3, [pc, #480]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	4975      	ldr	r1, [pc, #468]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002926:	4313      	orrs	r3, r2
 8002928:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d010      	beq.n	8002958 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	4b70      	ldr	r3, [pc, #448]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002942:	429a      	cmp	r2, r3
 8002944:	d908      	bls.n	8002958 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002946:	4b6d      	ldr	r3, [pc, #436]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	496a      	ldr	r1, [pc, #424]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002954:	4313      	orrs	r3, r2
 8002956:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	d010      	beq.n	8002986 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	4b64      	ldr	r3, [pc, #400]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002970:	429a      	cmp	r2, r3
 8002972:	d908      	bls.n	8002986 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002974:	4b61      	ldr	r3, [pc, #388]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	495e      	ldr	r1, [pc, #376]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002982:	4313      	orrs	r3, r2
 8002984:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	d010      	beq.n	80029b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	4b59      	ldr	r3, [pc, #356]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800299e:	429a      	cmp	r2, r3
 80029a0:	d908      	bls.n	80029b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029a2:	4b56      	ldr	r3, [pc, #344]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4953      	ldr	r1, [pc, #332]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d010      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	4b4d      	ldr	r3, [pc, #308]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d908      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d0:	4b4a      	ldr	r3, [pc, #296]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f023 020f 	bic.w	r2, r3, #15
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4947      	ldr	r1, [pc, #284]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d055      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80029ee:	4b43      	ldr	r3, [pc, #268]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	4940      	ldr	r1, [pc, #256]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a08:	4b3c      	ldr	r3, [pc, #240]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d121      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0f6      	b.n	8002c06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a20:	4b36      	ldr	r3, [pc, #216]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d115      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0ea      	b.n	8002c06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a38:	4b30      	ldr	r3, [pc, #192]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0de      	b.n	8002c06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a48:	4b2c      	ldr	r3, [pc, #176]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0d6      	b.n	8002c06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a58:	4b28      	ldr	r3, [pc, #160]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f023 0207 	bic.w	r2, r3, #7
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4925      	ldr	r1, [pc, #148]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6a:	f7fe ff2f 	bl	80018cc <HAL_GetTick>
 8002a6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a72:	f7fe ff2b 	bl	80018cc <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0be      	b.n	8002c06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a88:	4b1c      	ldr	r3, [pc, #112]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d1eb      	bne.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d010      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	4b14      	ldr	r3, [pc, #80]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d208      	bcs.n	8002ac8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab6:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f023 020f 	bic.w	r2, r3, #15
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	490e      	ldr	r1, [pc, #56]	@ (8002afc <HAL_RCC_ClockConfig+0x244>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <HAL_RCC_ClockConfig+0x240>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d214      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <HAL_RCC_ClockConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 020f 	bic.w	r2, r3, #15
 8002ade:	4906      	ldr	r1, [pc, #24]	@ (8002af8 <HAL_RCC_ClockConfig+0x240>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <HAL_RCC_ClockConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e086      	b.n	8002c06 <HAL_RCC_ClockConfig+0x34e>
 8002af8:	52002000 	.word	0x52002000
 8002afc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d010      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	4b3f      	ldr	r3, [pc, #252]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d208      	bcs.n	8002b2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	4939      	ldr	r1, [pc, #228]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d010      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	4b34      	ldr	r3, [pc, #208]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d208      	bcs.n	8002b5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b4a:	4b31      	ldr	r3, [pc, #196]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	492e      	ldr	r1, [pc, #184]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d010      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699a      	ldr	r2, [r3, #24]
 8002b6c:	4b28      	ldr	r3, [pc, #160]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d208      	bcs.n	8002b8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b78:	4b25      	ldr	r3, [pc, #148]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	4922      	ldr	r1, [pc, #136]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d010      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d208      	bcs.n	8002bb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	4917      	ldr	r1, [pc, #92]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bb8:	f000 f834 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b14      	ldr	r3, [pc, #80]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	4912      	ldr	r1, [pc, #72]	@ (8002c14 <HAL_RCC_ClockConfig+0x35c>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c10 <HAL_RCC_ClockConfig+0x358>)
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	4a0d      	ldr	r2, [pc, #52]	@ (8002c14 <HAL_RCC_ClockConfig+0x35c>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bec:	4a0a      	ldr	r2, [pc, #40]	@ (8002c18 <HAL_RCC_ClockConfig+0x360>)
 8002bee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <HAL_RCC_ClockConfig+0x364>)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c20 <HAL_RCC_ClockConfig+0x368>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fe1c 	bl	8001838 <HAL_InitTick>
 8002c00:	4603      	mov	r3, r0
 8002c02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	58024400 	.word	0x58024400
 8002c14:	08007e20 	.word	0x08007e20
 8002c18:	2400000c 	.word	0x2400000c
 8002c1c:	24000008 	.word	0x24000008
 8002c20:	24000010 	.word	0x24000010

08002c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c2a:	4bb3      	ldr	r3, [pc, #716]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c32:	2b18      	cmp	r3, #24
 8002c34:	f200 8155 	bhi.w	8002ee2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002c38:	a201      	add	r2, pc, #4	@ (adr r2, 8002c40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002ca5 	.word	0x08002ca5
 8002c44:	08002ee3 	.word	0x08002ee3
 8002c48:	08002ee3 	.word	0x08002ee3
 8002c4c:	08002ee3 	.word	0x08002ee3
 8002c50:	08002ee3 	.word	0x08002ee3
 8002c54:	08002ee3 	.word	0x08002ee3
 8002c58:	08002ee3 	.word	0x08002ee3
 8002c5c:	08002ee3 	.word	0x08002ee3
 8002c60:	08002ccb 	.word	0x08002ccb
 8002c64:	08002ee3 	.word	0x08002ee3
 8002c68:	08002ee3 	.word	0x08002ee3
 8002c6c:	08002ee3 	.word	0x08002ee3
 8002c70:	08002ee3 	.word	0x08002ee3
 8002c74:	08002ee3 	.word	0x08002ee3
 8002c78:	08002ee3 	.word	0x08002ee3
 8002c7c:	08002ee3 	.word	0x08002ee3
 8002c80:	08002cd1 	.word	0x08002cd1
 8002c84:	08002ee3 	.word	0x08002ee3
 8002c88:	08002ee3 	.word	0x08002ee3
 8002c8c:	08002ee3 	.word	0x08002ee3
 8002c90:	08002ee3 	.word	0x08002ee3
 8002c94:	08002ee3 	.word	0x08002ee3
 8002c98:	08002ee3 	.word	0x08002ee3
 8002c9c:	08002ee3 	.word	0x08002ee3
 8002ca0:	08002cd7 	.word	0x08002cd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ca4:	4b94      	ldr	r3, [pc, #592]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d009      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cb0:	4b91      	ldr	r3, [pc, #580]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	08db      	lsrs	r3, r3, #3
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	4a90      	ldr	r2, [pc, #576]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002cc2:	e111      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002cc4:	4b8d      	ldr	r3, [pc, #564]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cc6:	61bb      	str	r3, [r7, #24]
      break;
 8002cc8:	e10e      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002cca:	4b8d      	ldr	r3, [pc, #564]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ccc:	61bb      	str	r3, [r7, #24]
      break;
 8002cce:	e10b      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002cd2:	61bb      	str	r3, [r7, #24]
      break;
 8002cd4:	e108      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cd6:	4b88      	ldr	r3, [pc, #544]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ce0:	4b85      	ldr	r3, [pc, #532]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002cec:	4b82      	ldr	r3, [pc, #520]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002cf6:	4b80      	ldr	r3, [pc, #512]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfa:	08db      	lsrs	r3, r3, #3
 8002cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80e1 	beq.w	8002edc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	f000 8083 	beq.w	8002e28 <HAL_RCC_GetSysClockFreq+0x204>
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	f200 80a1 	bhi.w	8002e6c <HAL_RCC_GetSysClockFreq+0x248>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x114>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d056      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d36:	e099      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d38:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d02d      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d44:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	4a6b      	ldr	r2, [pc, #428]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
 8002d54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	ee07 3a90 	vmov	s15, r3
 8002d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d6e:	4b62      	ldr	r3, [pc, #392]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d82:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002d9e:	e087      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	ee07 3a90 	vmov	s15, r3
 8002da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002daa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002f0c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db2:	4b51      	ldr	r3, [pc, #324]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dc6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002de2:	e065      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002f10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002df6:	4b40      	ldr	r3, [pc, #256]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e0a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e26:	e043      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	ee07 3a90 	vmov	s15, r3
 8002e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e32:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002f14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e4e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e6a:	e021      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	ee07 3a90 	vmov	s15, r3
 8002e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e76:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002f10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e92:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	0a5b      	lsrs	r3, r3, #9
 8002eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eba:	3301      	adds	r3, #1
 8002ebc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed4:	ee17 3a90 	vmov	r3, s15
 8002ed8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002eda:	e005      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61bb      	str	r3, [r7, #24]
      break;
 8002ee0:	e002      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ee2:	4b07      	ldr	r3, [pc, #28]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ee4:	61bb      	str	r3, [r7, #24]
      break;
 8002ee6:	bf00      	nop
  }

  return sysclockfreq;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	03d09000 	.word	0x03d09000
 8002f00:	003d0900 	.word	0x003d0900
 8002f04:	017d7840 	.word	0x017d7840
 8002f08:	46000000 	.word	0x46000000
 8002f0c:	4c742400 	.word	0x4c742400
 8002f10:	4a742400 	.word	0x4a742400
 8002f14:	4bbebc20 	.word	0x4bbebc20

08002f18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f1c:	b0ca      	sub	sp, #296	@ 0x128
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f24:	2300      	movs	r3, #0
 8002f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002f3c:	2500      	movs	r5, #0
 8002f3e:	ea54 0305 	orrs.w	r3, r4, r5
 8002f42:	d049      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f4e:	d02f      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002f50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f54:	d828      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002f56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f5a:	d01a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f60:	d822      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f6a:	d007      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f6c:	e01c      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f6e:	4bb8      	ldr	r3, [pc, #736]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f72:	4ab7      	ldr	r2, [pc, #732]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f7a:	e01a      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f80:	3308      	adds	r3, #8
 8002f82:	2102      	movs	r1, #2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 f9d1 	bl	800432c <RCCEx_PLL2_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f90:	e00f      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f96:	3328      	adds	r3, #40	@ 0x28
 8002f98:	2102      	movs	r1, #2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f001 fa78 	bl	8004490 <RCCEx_PLL3_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fa6:	e004      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fae:	e000      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10a      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002fba:	4ba5      	ldr	r3, [pc, #660]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fbe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fc8:	4aa1      	ldr	r2, [pc, #644]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fce:	e003      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002fe4:	f04f 0900 	mov.w	r9, #0
 8002fe8:	ea58 0309 	orrs.w	r3, r8, r9
 8002fec:	d047      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d82a      	bhi.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8003000 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffe:	bf00      	nop
 8003000:	08003015 	.word	0x08003015
 8003004:	08003023 	.word	0x08003023
 8003008:	08003039 	.word	0x08003039
 800300c:	08003057 	.word	0x08003057
 8003010:	08003057 	.word	0x08003057
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003014:	4b8e      	ldr	r3, [pc, #568]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	4a8d      	ldr	r2, [pc, #564]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800301a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800301e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003020:	e01a      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003026:	3308      	adds	r3, #8
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f001 f97e 	bl	800432c <RCCEx_PLL2_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003036:	e00f      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303c:	3328      	adds	r3, #40	@ 0x28
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f001 fa25 	bl	8004490 <RCCEx_PLL3_Config>
 8003046:	4603      	mov	r3, r0
 8003048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800304c:	e004      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003054:	e000      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003060:	4b7b      	ldr	r3, [pc, #492]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003064:	f023 0107 	bic.w	r1, r3, #7
 8003068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306e:	4a78      	ldr	r2, [pc, #480]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003070:	430b      	orrs	r3, r1
 8003072:	6513      	str	r3, [r2, #80]	@ 0x50
 8003074:	e003      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800307a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800307e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800308a:	f04f 0b00 	mov.w	fp, #0
 800308e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003092:	d04c      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800309e:	d030      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80030a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030a4:	d829      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80030a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80030a8:	d02d      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80030aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80030ac:	d825      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80030ae:	2b80      	cmp	r3, #128	@ 0x80
 80030b0:	d018      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80030b2:	2b80      	cmp	r3, #128	@ 0x80
 80030b4:	d821      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80030ba:	2b40      	cmp	r3, #64	@ 0x40
 80030bc:	d007      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80030be:	e01c      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c0:	4b63      	ldr	r3, [pc, #396]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c4:	4a62      	ldr	r2, [pc, #392]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80030cc:	e01c      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d2:	3308      	adds	r3, #8
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 f928 	bl	800432c <RCCEx_PLL2_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80030e2:	e011      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e8:	3328      	adds	r3, #40	@ 0x28
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 f9cf 	bl	8004490 <RCCEx_PLL3_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80030f8:	e006      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003100:	e002      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003110:	4b4f      	ldr	r3, [pc, #316]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003114:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311e:	4a4c      	ldr	r2, [pc, #304]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003120:	430b      	orrs	r3, r1
 8003122:	6513      	str	r3, [r2, #80]	@ 0x50
 8003124:	e003      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800312a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800313a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800313e:	2300      	movs	r3, #0
 8003140:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003144:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003148:	460b      	mov	r3, r1
 800314a:	4313      	orrs	r3, r2
 800314c:	d053      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800314e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003152:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003156:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800315a:	d035      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800315c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003160:	d82e      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003162:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003166:	d031      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003168:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800316c:	d828      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800316e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003172:	d01a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003178:	d822      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800317e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003182:	d007      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003184:	e01c      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003186:	4b32      	ldr	r3, [pc, #200]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	4a31      	ldr	r2, [pc, #196]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800318c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003190:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003192:	e01c      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003198:	3308      	adds	r3, #8
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f001 f8c5 	bl	800432c <RCCEx_PLL2_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80031a8:	e011      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ae:	3328      	adds	r3, #40	@ 0x28
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f001 f96c 	bl	8004490 <RCCEx_PLL3_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031be:	e006      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031c6:	e002      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80031c8:	bf00      	nop
 80031ca:	e000      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80031cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80031d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031da:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80031de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80031e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ec:	e003      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003202:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800320c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003210:	460b      	mov	r3, r1
 8003212:	4313      	orrs	r3, r2
 8003214:	d056      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800321e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003222:	d038      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003224:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003228:	d831      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800322a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800322e:	d034      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003230:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003234:	d82b      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003236:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800323a:	d01d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800323c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003240:	d825      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d006      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003246:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800324c:	e01f      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800324e:	bf00      	nop
 8003250:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003254:	4ba2      	ldr	r3, [pc, #648]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	4aa1      	ldr	r2, [pc, #644]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800325a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003260:	e01c      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003266:	3308      	adds	r3, #8
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f001 f85e 	bl	800432c <RCCEx_PLL2_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003276:	e011      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327c:	3328      	adds	r3, #40	@ 0x28
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f001 f905 	bl	8004490 <RCCEx_PLL3_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800328c:	e006      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003294:	e002      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003296:	bf00      	nop
 8003298:	e000      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800329a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800329c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80032a4:	4b8e      	ldr	r3, [pc, #568]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80032b4:	4a8a      	ldr	r2, [pc, #552]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032b6:	430b      	orrs	r3, r1
 80032b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032ba:	e003      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80032c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80032d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80032da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80032de:	460b      	mov	r3, r1
 80032e0:	4313      	orrs	r3, r2
 80032e2:	d03a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ea:	2b30      	cmp	r3, #48	@ 0x30
 80032ec:	d01f      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80032ee:	2b30      	cmp	r3, #48	@ 0x30
 80032f0:	d819      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d00c      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d815      	bhi.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d019      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d111      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003302:	4b77      	ldr	r3, [pc, #476]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003306:	4a76      	ldr	r2, [pc, #472]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800330c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800330e:	e011      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003314:	3308      	adds	r3, #8
 8003316:	2102      	movs	r1, #2
 8003318:	4618      	mov	r0, r3
 800331a:	f001 f807 	bl	800432c <RCCEx_PLL2_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003324:	e006      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800332c:	e002      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800332e:	bf00      	nop
 8003330:	e000      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800333c:	4b68      	ldr	r3, [pc, #416]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800333e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003340:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334a:	4a65      	ldr	r2, [pc, #404]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800334c:	430b      	orrs	r3, r1
 800334e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003350:	e003      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003366:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800336a:	2300      	movs	r3, #0
 800336c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003370:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003374:	460b      	mov	r3, r1
 8003376:	4313      	orrs	r3, r2
 8003378:	d051      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800337a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003380:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003384:	d035      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003386:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800338a:	d82e      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800338c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003390:	d031      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003392:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003396:	d828      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800339c:	d01a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800339e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033a2:	d822      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ac:	d007      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80033ae:	e01c      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b0:	4b4b      	ldr	r3, [pc, #300]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	4a4a      	ldr	r2, [pc, #296]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033bc:	e01c      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c2:	3308      	adds	r3, #8
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 ffb0 	bl	800432c <RCCEx_PLL2_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033d2:	e011      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d8:	3328      	adds	r3, #40	@ 0x28
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 f857 	bl	8004490 <RCCEx_PLL3_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033e8:	e006      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033f0:	e002      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80033f2:	bf00      	nop
 80033f4:	e000      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80033f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003400:	4b37      	ldr	r3, [pc, #220]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003404:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340e:	4a34      	ldr	r2, [pc, #208]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003410:	430b      	orrs	r3, r1
 8003412:	6513      	str	r3, [r2, #80]	@ 0x50
 8003414:	e003      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800342a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800342e:	2300      	movs	r3, #0
 8003430:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003434:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003438:	460b      	mov	r3, r1
 800343a:	4313      	orrs	r3, r2
 800343c:	d056      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003448:	d033      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800344a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800344e:	d82c      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003450:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003454:	d02f      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003456:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800345a:	d826      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800345c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003460:	d02b      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003462:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003466:	d820      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800346c:	d012      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800346e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003472:	d81a      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d022      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347c:	d115      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800347e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003482:	3308      	adds	r3, #8
 8003484:	2101      	movs	r1, #1
 8003486:	4618      	mov	r0, r3
 8003488:	f000 ff50 	bl	800432c <RCCEx_PLL2_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003492:	e015      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003498:	3328      	adds	r3, #40	@ 0x28
 800349a:	2101      	movs	r1, #1
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fff7 	bl	8004490 <RCCEx_PLL3_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034a8:	e00a      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034b0:	e006      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034b2:	bf00      	nop
 80034b4:	e004      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034b6:	bf00      	nop
 80034b8:	e002      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034ba:	bf00      	nop
 80034bc:	e000      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10d      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034c8:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80034d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034d6:	4a02      	ldr	r2, [pc, #8]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034d8:	430b      	orrs	r3, r1
 80034da:	6513      	str	r3, [r2, #80]	@ 0x50
 80034dc:	e006      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80034de:	bf00      	nop
 80034e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80034f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003502:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003506:	460b      	mov	r3, r1
 8003508:	4313      	orrs	r3, r2
 800350a:	d055      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800350c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003510:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003514:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003518:	d033      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800351a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800351e:	d82c      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003524:	d02f      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800352a:	d826      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800352c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003530:	d02b      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003532:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003536:	d820      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800353c:	d012      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800353e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003542:	d81a      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d022      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003548:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800354c:	d115      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003552:	3308      	adds	r3, #8
 8003554:	2101      	movs	r1, #1
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fee8 	bl	800432c <RCCEx_PLL2_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003562:	e015      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003568:	3328      	adds	r3, #40	@ 0x28
 800356a:	2101      	movs	r1, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f000 ff8f 	bl	8004490 <RCCEx_PLL3_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003578:	e00a      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003580:	e006      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003582:	bf00      	nop
 8003584:	e004      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003586:	bf00      	nop
 8003588:	e002      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800358e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003598:	4ba3      	ldr	r3, [pc, #652]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035a8:	4a9f      	ldr	r2, [pc, #636]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ae:	e003      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80035c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80035ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035d2:	460b      	mov	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	d037      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035e2:	d00e      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80035e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035e8:	d816      	bhi.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d018      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80035ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035f2:	d111      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	4a8b      	ldr	r2, [pc, #556]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003600:	e00f      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003606:	3308      	adds	r3, #8
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fe8e 	bl	800432c <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003616:	e004      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800361e:	e000      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800362a:	4b7f      	ldr	r3, [pc, #508]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800362c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800362e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003638:	4a7b      	ldr	r2, [pc, #492]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800363a:	430b      	orrs	r3, r1
 800363c:	6513      	str	r3, [r2, #80]	@ 0x50
 800363e:	e003      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003658:	2300      	movs	r3, #0
 800365a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800365e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003662:	460b      	mov	r3, r1
 8003664:	4313      	orrs	r3, r2
 8003666:	d039      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800366e:	2b03      	cmp	r3, #3
 8003670:	d81c      	bhi.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003672:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	080036b5 	.word	0x080036b5
 800367c:	08003689 	.word	0x08003689
 8003680:	08003697 	.word	0x08003697
 8003684:	080036b5 	.word	0x080036b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003688:	4b67      	ldr	r3, [pc, #412]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	4a66      	ldr	r2, [pc, #408]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800368e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003692:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003694:	e00f      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	3308      	adds	r3, #8
 800369c:	2102      	movs	r1, #2
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fe44 	bl	800432c <RCCEx_PLL2_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036aa:	e004      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036b2:	e000      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80036b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036be:	4b5a      	ldr	r3, [pc, #360]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c2:	f023 0103 	bic.w	r1, r3, #3
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036cc:	4a56      	ldr	r2, [pc, #344]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ce:	430b      	orrs	r3, r1
 80036d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036d2:	e003      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80036e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80036f6:	460b      	mov	r3, r1
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f000 809f 	beq.w	800383c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036fe:	4b4b      	ldr	r3, [pc, #300]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a4a      	ldr	r2, [pc, #296]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003708:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800370a:	f7fe f8df 	bl	80018cc <HAL_GetTick>
 800370e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003712:	e00b      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003714:	f7fe f8da 	bl	80018cc <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b64      	cmp	r3, #100	@ 0x64
 8003722:	d903      	bls.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800372a:	e005      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800372c:	4b3f      	ldr	r3, [pc, #252]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ed      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800373c:	2b00      	cmp	r3, #0
 800373e:	d179      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003740:	4b39      	ldr	r3, [pc, #228]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003742:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003748:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800374c:	4053      	eors	r3, r2
 800374e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003752:	2b00      	cmp	r3, #0
 8003754:	d015      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003756:	4b34      	ldr	r3, [pc, #208]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800375e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003762:	4b31      	ldr	r3, [pc, #196]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003766:	4a30      	ldr	r2, [pc, #192]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800376e:	4b2e      	ldr	r3, [pc, #184]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003772:	4a2d      	ldr	r2, [pc, #180]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003778:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800377a:	4a2b      	ldr	r2, [pc, #172]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800377c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003780:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003786:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800378a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800378e:	d118      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe f89c 	bl	80018cc <HAL_GetTick>
 8003794:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003798:	e00d      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fe f897 	bl	80018cc <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80037a4:	1ad2      	subs	r2, r2, r3
 80037a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d903      	bls.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80037b4:	e005      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0eb      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80037c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d129      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80037d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037da:	d10e      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80037dc:	4b12      	ldr	r3, [pc, #72]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80037ec:	091a      	lsrs	r2, r3, #4
 80037ee:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037f4:	430b      	orrs	r3, r1
 80037f6:	6113      	str	r3, [r2, #16]
 80037f8:	e005      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80037fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003800:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003804:	6113      	str	r3, [r2, #16]
 8003806:	4b08      	ldr	r3, [pc, #32]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003808:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800380a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003816:	4a04      	ldr	r2, [pc, #16]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003818:	430b      	orrs	r3, r1
 800381a:	6713      	str	r3, [r2, #112]	@ 0x70
 800381c:	e00e      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800381e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003826:	e009      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003828:	58024400 	.word	0x58024400
 800382c:	58024800 	.word	0x58024800
 8003830:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003838:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800383c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f002 0301 	and.w	r3, r2, #1
 8003848:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800384c:	2300      	movs	r3, #0
 800384e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003852:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003856:	460b      	mov	r3, r1
 8003858:	4313      	orrs	r3, r2
 800385a:	f000 8089 	beq.w	8003970 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800385e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003862:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003864:	2b28      	cmp	r3, #40	@ 0x28
 8003866:	d86b      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003868:	a201      	add	r2, pc, #4	@ (adr r2, 8003870 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	08003949 	.word	0x08003949
 8003874:	08003941 	.word	0x08003941
 8003878:	08003941 	.word	0x08003941
 800387c:	08003941 	.word	0x08003941
 8003880:	08003941 	.word	0x08003941
 8003884:	08003941 	.word	0x08003941
 8003888:	08003941 	.word	0x08003941
 800388c:	08003941 	.word	0x08003941
 8003890:	08003915 	.word	0x08003915
 8003894:	08003941 	.word	0x08003941
 8003898:	08003941 	.word	0x08003941
 800389c:	08003941 	.word	0x08003941
 80038a0:	08003941 	.word	0x08003941
 80038a4:	08003941 	.word	0x08003941
 80038a8:	08003941 	.word	0x08003941
 80038ac:	08003941 	.word	0x08003941
 80038b0:	0800392b 	.word	0x0800392b
 80038b4:	08003941 	.word	0x08003941
 80038b8:	08003941 	.word	0x08003941
 80038bc:	08003941 	.word	0x08003941
 80038c0:	08003941 	.word	0x08003941
 80038c4:	08003941 	.word	0x08003941
 80038c8:	08003941 	.word	0x08003941
 80038cc:	08003941 	.word	0x08003941
 80038d0:	08003949 	.word	0x08003949
 80038d4:	08003941 	.word	0x08003941
 80038d8:	08003941 	.word	0x08003941
 80038dc:	08003941 	.word	0x08003941
 80038e0:	08003941 	.word	0x08003941
 80038e4:	08003941 	.word	0x08003941
 80038e8:	08003941 	.word	0x08003941
 80038ec:	08003941 	.word	0x08003941
 80038f0:	08003949 	.word	0x08003949
 80038f4:	08003941 	.word	0x08003941
 80038f8:	08003941 	.word	0x08003941
 80038fc:	08003941 	.word	0x08003941
 8003900:	08003941 	.word	0x08003941
 8003904:	08003941 	.word	0x08003941
 8003908:	08003941 	.word	0x08003941
 800390c:	08003941 	.word	0x08003941
 8003910:	08003949 	.word	0x08003949
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	3308      	adds	r3, #8
 800391a:	2101      	movs	r1, #1
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fd05 	bl	800432c <RCCEx_PLL2_Config>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003928:	e00f      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	3328      	adds	r3, #40	@ 0x28
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fdac 	bl	8004490 <RCCEx_PLL3_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800393e:	e004      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003952:	4bbf      	ldr	r3, [pc, #764]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003956:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003960:	4abb      	ldr	r2, [pc, #748]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003962:	430b      	orrs	r3, r1
 8003964:	6553      	str	r3, [r2, #84]	@ 0x54
 8003966:	e003      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800396c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f002 0302 	and.w	r3, r2, #2
 800397c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003986:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800398a:	460b      	mov	r3, r1
 800398c:	4313      	orrs	r3, r2
 800398e:	d041      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003996:	2b05      	cmp	r3, #5
 8003998:	d824      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800399a:	a201      	add	r2, pc, #4	@ (adr r2, 80039a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039ed 	.word	0x080039ed
 80039a4:	080039b9 	.word	0x080039b9
 80039a8:	080039cf 	.word	0x080039cf
 80039ac:	080039ed 	.word	0x080039ed
 80039b0:	080039ed 	.word	0x080039ed
 80039b4:	080039ed 	.word	0x080039ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039bc:	3308      	adds	r3, #8
 80039be:	2101      	movs	r1, #1
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fcb3 	bl	800432c <RCCEx_PLL2_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039cc:	e00f      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	3328      	adds	r3, #40	@ 0x28
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fd5a 	bl	8004490 <RCCEx_PLL3_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039e2:	e004      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039ea:	e000      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80039ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039f6:	4b96      	ldr	r3, [pc, #600]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fa:	f023 0107 	bic.w	r1, r3, #7
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a04:	4a92      	ldr	r2, [pc, #584]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a06:	430b      	orrs	r3, r1
 8003a08:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a0a:	e003      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f002 0304 	and.w	r3, r2, #4
 8003a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4313      	orrs	r3, r2
 8003a32:	d044      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a3c:	2b05      	cmp	r3, #5
 8003a3e:	d825      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003a40:	a201      	add	r2, pc, #4	@ (adr r2, 8003a48 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a95 	.word	0x08003a95
 8003a4c:	08003a61 	.word	0x08003a61
 8003a50:	08003a77 	.word	0x08003a77
 8003a54:	08003a95 	.word	0x08003a95
 8003a58:	08003a95 	.word	0x08003a95
 8003a5c:	08003a95 	.word	0x08003a95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a64:	3308      	adds	r3, #8
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fc5f 	bl	800432c <RCCEx_PLL2_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a74:	e00f      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	3328      	adds	r3, #40	@ 0x28
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fd06 	bl	8004490 <RCCEx_PLL3_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a8a:	e004      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10b      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a9e:	4b6c      	ldr	r3, [pc, #432]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa2:	f023 0107 	bic.w	r1, r3, #7
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aae:	4a68      	ldr	r2, [pc, #416]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ab4:	e003      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f002 0320 	and.w	r3, r2, #32
 8003aca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ad4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4313      	orrs	r3, r2
 8003adc:	d055      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aea:	d033      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af0:	d82c      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af6:	d02f      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003afc:	d826      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003afe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b02:	d02b      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003b04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b08:	d820      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b0e:	d012      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b14:	d81a      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d022      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003b1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b1e:	d115      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	3308      	adds	r3, #8
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fbff 	bl	800432c <RCCEx_PLL2_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b34:	e015      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3a:	3328      	adds	r3, #40	@ 0x28
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fca6 	bl	8004490 <RCCEx_PLL3_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b52:	e006      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003b54:	bf00      	nop
 8003b56:	e004      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003b58:	bf00      	nop
 8003b5a:	e002      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003b5c:	bf00      	nop
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b6a:	4b39      	ldr	r3, [pc, #228]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7a:	4a35      	ldr	r2, [pc, #212]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b80:	e003      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ba0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	d058      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bb2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003bb6:	d033      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003bb8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003bbc:	d82c      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc2:	d02f      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc8:	d826      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003bca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bce:	d02b      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003bd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bd4:	d820      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003bd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bda:	d012      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003be0:	d81a      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d022      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bea:	d115      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fb99 	bl	800432c <RCCEx_PLL2_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c00:	e015      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c06:	3328      	adds	r3, #40	@ 0x28
 8003c08:	2102      	movs	r1, #2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fc40 	bl	8004490 <RCCEx_PLL3_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c16:	e00a      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c1e:	e006      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c20:	bf00      	nop
 8003c22:	e004      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c24:	bf00      	nop
 8003c26:	e002      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c28:	bf00      	nop
 8003c2a:	e000      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10e      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c46:	4a02      	ldr	r2, [pc, #8]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c4c:	e006      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003c4e:	bf00      	nop
 8003c50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003c76:	460b      	mov	r3, r1
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	d055      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c84:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c88:	d033      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003c8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c8e:	d82c      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003c90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c94:	d02f      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c9a:	d826      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003c9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ca0:	d02b      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003ca2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ca6:	d820      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cac:	d012      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003cae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cb2:	d81a      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d022      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cbc:	d115      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fb30 	bl	800432c <RCCEx_PLL2_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003cd2:	e015      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd8:	3328      	adds	r3, #40	@ 0x28
 8003cda:	2102      	movs	r1, #2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fbd7 	bl	8004490 <RCCEx_PLL3_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf0:	e006      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003cf2:	bf00      	nop
 8003cf4:	e004      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003cf6:	bf00      	nop
 8003cf8:	e002      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d08:	4ba1      	ldr	r3, [pc, #644]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d18:	4a9d      	ldr	r2, [pc, #628]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d1e:	e003      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f002 0308 	and.w	r3, r2, #8
 8003d34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003d42:	460b      	mov	r3, r1
 8003d44:	4313      	orrs	r3, r2
 8003d46:	d01e      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5a:	3328      	adds	r3, #40	@ 0x28
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fb96 	bl	8004490 <RCCEx_PLL3_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d70:	4b87      	ldr	r3, [pc, #540]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d80:	4a83      	ldr	r2, [pc, #524]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d82:	430b      	orrs	r3, r1
 8003d84:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f002 0310 	and.w	r3, r2, #16
 8003d92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d96:	2300      	movs	r3, #0
 8003d98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003d9c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003da0:	460b      	mov	r3, r1
 8003da2:	4313      	orrs	r3, r2
 8003da4:	d01e      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003db2:	d10c      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	3328      	adds	r3, #40	@ 0x28
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fb67 	bl	8004490 <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dce:	4b70      	ldr	r3, [pc, #448]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dde:	4a6c      	ldr	r2, [pc, #432]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003df0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003df4:	2300      	movs	r3, #0
 8003df6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dfa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4313      	orrs	r3, r2
 8003e02:	d03e      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e10:	d022      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003e12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e16:	d81b      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e20:	d00b      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003e22:	e015      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e28:	3308      	adds	r3, #8
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fa7d 	bl	800432c <RCCEx_PLL2_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e38:	e00f      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3e:	3328      	adds	r3, #40	@ 0x28
 8003e40:	2102      	movs	r1, #2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fb24 	bl	8004490 <RCCEx_PLL3_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e4e:	e004      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e56:	e000      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e62:	4b4b      	ldr	r3, [pc, #300]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e66:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e72:	4a47      	ldr	r2, [pc, #284]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e90:	2300      	movs	r3, #0
 8003e92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e94:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	d03b      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003eaa:	d01f      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003eac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003eb0:	d818      	bhi.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003eb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003eb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ebc:	d007      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003ebe:	e011      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec0:	4b33      	ldr	r3, [pc, #204]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	4a32      	ldr	r2, [pc, #200]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ecc:	e00f      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed2:	3328      	adds	r3, #40	@ 0x28
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fada 	bl	8004490 <RCCEx_PLL3_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ee2:	e004      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eea:	e000      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10b      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ef6:	4b26      	ldr	r3, [pc, #152]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	4a22      	ldr	r2, [pc, #136]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f0c:	e003      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003f22:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f24:	2300      	movs	r3, #0
 8003f26:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	d034      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f40:	d007      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003f42:	e011      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f44:	4b12      	ldr	r3, [pc, #72]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	4a11      	ldr	r2, [pc, #68]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f50:	e00e      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f56:	3308      	adds	r3, #8
 8003f58:	2102      	movs	r1, #2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f9e6 	bl	800432c <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f66:	e003      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f86:	4a02      	ldr	r2, [pc, #8]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f8c:	e006      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003f8e:	bf00      	nop
 8003f90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003faa:	2300      	movs	r3, #0
 8003fac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbc:	3328      	adds	r3, #40	@ 0x28
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fa65 	bl	8004490 <RCCEx_PLL3_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003fde:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fe4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d038      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ffa:	d018      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003ffc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004000:	d811      	bhi.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004006:	d014      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800400c:	d80b      	bhi.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d011      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004016:	d106      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004018:	4bc3      	ldr	r3, [pc, #780]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	4ac2      	ldr	r2, [pc, #776]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800401e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004024:	e008      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800402c:	e004      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800402e:	bf00      	nop
 8004030:	e002      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004040:	4bb9      	ldr	r3, [pc, #740]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004044:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004050:	4ab5      	ldr	r2, [pc, #724]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004052:	430b      	orrs	r3, r1
 8004054:	6553      	str	r3, [r2, #84]	@ 0x54
 8004056:	e003      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800406c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800406e:	2300      	movs	r3, #0
 8004070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004072:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004076:	460b      	mov	r3, r1
 8004078:	4313      	orrs	r3, r2
 800407a:	d009      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800407c:	4baa      	ldr	r3, [pc, #680]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800408a:	4aa7      	ldr	r2, [pc, #668]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800408c:	430b      	orrs	r3, r1
 800408e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800409c:	653b      	str	r3, [r7, #80]	@ 0x50
 800409e:	2300      	movs	r3, #0
 80040a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80040a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80040a6:	460b      	mov	r3, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80040ac:	4b9e      	ldr	r3, [pc, #632]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80040bc:	4a9a      	ldr	r2, [pc, #616]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040be:	430b      	orrs	r3, r1
 80040c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80040ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d0:	2300      	movs	r3, #0
 80040d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80040d8:	460b      	mov	r3, r1
 80040da:	4313      	orrs	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040de:	4b92      	ldr	r3, [pc, #584]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040ec:	4a8e      	ldr	r2, [pc, #568]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80040fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004100:	2300      	movs	r3, #0
 8004102:	647b      	str	r3, [r7, #68]	@ 0x44
 8004104:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004108:	460b      	mov	r3, r1
 800410a:	4313      	orrs	r3, r2
 800410c:	d00e      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800410e:	4b86      	ldr	r3, [pc, #536]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	4a85      	ldr	r2, [pc, #532]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004114:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004118:	6113      	str	r3, [r2, #16]
 800411a:	4b83      	ldr	r3, [pc, #524]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800411c:	6919      	ldr	r1, [r3, #16]
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004122:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004126:	4a80      	ldr	r2, [pc, #512]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004128:	430b      	orrs	r3, r1
 800412a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004138:	63bb      	str	r3, [r7, #56]	@ 0x38
 800413a:	2300      	movs	r3, #0
 800413c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800413e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004142:	460b      	mov	r3, r1
 8004144:	4313      	orrs	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004148:	4b77      	ldr	r3, [pc, #476]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800414a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004156:	4a74      	ldr	r2, [pc, #464]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004158:	430b      	orrs	r3, r1
 800415a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800415c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004168:	633b      	str	r3, [r7, #48]	@ 0x30
 800416a:	2300      	movs	r3, #0
 800416c:	637b      	str	r3, [r7, #52]	@ 0x34
 800416e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004172:	460b      	mov	r3, r1
 8004174:	4313      	orrs	r3, r2
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004178:	4b6b      	ldr	r3, [pc, #428]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800417a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004188:	4a67      	ldr	r2, [pc, #412]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800418a:	430b      	orrs	r3, r1
 800418c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800418e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	2100      	movs	r1, #0
 8004198:	62b9      	str	r1, [r7, #40]	@ 0x28
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80041a4:	460b      	mov	r3, r1
 80041a6:	4313      	orrs	r3, r2
 80041a8:	d011      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	3308      	adds	r3, #8
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f8ba 	bl	800432c <RCCEx_PLL2_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80041be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	2100      	movs	r1, #0
 80041d8:	6239      	str	r1, [r7, #32]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
 80041e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80041e4:	460b      	mov	r3, r1
 80041e6:	4313      	orrs	r3, r2
 80041e8:	d011      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	3308      	adds	r3, #8
 80041f0:	2101      	movs	r1, #1
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 f89a 	bl	800432c <RCCEx_PLL2_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80041fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	2100      	movs	r1, #0
 8004218:	61b9      	str	r1, [r7, #24]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004224:	460b      	mov	r3, r1
 8004226:	4313      	orrs	r3, r2
 8004228:	d011      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422e:	3308      	adds	r3, #8
 8004230:	2102      	movs	r1, #2
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f87a 	bl	800432c <RCCEx_PLL2_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800423e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800424e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	2100      	movs	r1, #0
 8004258:	6139      	str	r1, [r7, #16]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004264:	460b      	mov	r3, r1
 8004266:	4313      	orrs	r3, r2
 8004268:	d011      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426e:	3328      	adds	r3, #40	@ 0x28
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f000 f90c 	bl	8004490 <RCCEx_PLL3_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800427e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800428a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	2100      	movs	r1, #0
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80042a4:	460b      	mov	r3, r1
 80042a6:	4313      	orrs	r3, r2
 80042a8:	d011      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ae:	3328      	adds	r3, #40	@ 0x28
 80042b0:	2101      	movs	r1, #1
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f8ec 	bl	8004490 <RCCEx_PLL3_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80042be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	2100      	movs	r1, #0
 80042d8:	6039      	str	r1, [r7, #0]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80042e4:	460b      	mov	r3, r1
 80042e6:	4313      	orrs	r3, r2
 80042e8:	d011      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ee:	3328      	adds	r3, #40	@ 0x28
 80042f0:	2102      	movs	r1, #2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f8cc 	bl	8004490 <RCCEx_PLL3_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80042fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800430a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800430e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
}
 800431c:	4618      	mov	r0, r3
 800431e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004322:	46bd      	mov	sp, r7
 8004324:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004328:	58024400 	.word	0x58024400

0800432c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800433a:	4b53      	ldr	r3, [pc, #332]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b03      	cmp	r3, #3
 8004344:	d101      	bne.n	800434a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e099      	b.n	800447e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800434a:	4b4f      	ldr	r3, [pc, #316]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a4e      	ldr	r2, [pc, #312]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 8004350:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004356:	f7fd fab9 	bl	80018cc <HAL_GetTick>
 800435a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800435c:	e008      	b.n	8004370 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800435e:	f7fd fab5 	bl	80018cc <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e086      	b.n	800447e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004370:	4b45      	ldr	r3, [pc, #276]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800437c:	4b42      	ldr	r3, [pc, #264]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	031b      	lsls	r3, r3, #12
 800438a:	493f      	ldr	r1, [pc, #252]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 800438c:	4313      	orrs	r3, r2
 800438e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	3b01      	subs	r3, #1
 8004396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	3b01      	subs	r3, #1
 80043a0:	025b      	lsls	r3, r3, #9
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	061b      	lsls	r3, r3, #24
 80043bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043c0:	4931      	ldr	r1, [pc, #196]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80043c6:	4b30      	ldr	r3, [pc, #192]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	492d      	ldr	r1, [pc, #180]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80043d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	f023 0220 	bic.w	r2, r3, #32
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	4928      	ldr	r1, [pc, #160]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80043ea:	4b27      	ldr	r3, [pc, #156]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ee:	4a26      	ldr	r2, [pc, #152]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 80043f0:	f023 0310 	bic.w	r3, r3, #16
 80043f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80043f6:	4b24      	ldr	r3, [pc, #144]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 80043f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043fa:	4b24      	ldr	r3, [pc, #144]	@ (800448c <RCCEx_PLL2_Config+0x160>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	69d2      	ldr	r2, [r2, #28]
 8004402:	00d2      	lsls	r2, r2, #3
 8004404:	4920      	ldr	r1, [pc, #128]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800440a:	4b1f      	ldr	r3, [pc, #124]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	4a1e      	ldr	r2, [pc, #120]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 8004410:	f043 0310 	orr.w	r3, r3, #16
 8004414:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d106      	bne.n	800442a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800441c:	4b1a      	ldr	r3, [pc, #104]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	4a19      	ldr	r2, [pc, #100]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 8004422:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004426:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004428:	e00f      	b.n	800444a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d106      	bne.n	800443e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004430:	4b15      	ldr	r3, [pc, #84]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	4a14      	ldr	r2, [pc, #80]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 8004436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800443a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800443c:	e005      	b.n	800444a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800443e:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	4a11      	ldr	r2, [pc, #68]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 8004444:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004448:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800444a:	4b0f      	ldr	r3, [pc, #60]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a0e      	ldr	r2, [pc, #56]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 8004450:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004456:	f7fd fa39 	bl	80018cc <HAL_GetTick>
 800445a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800445c:	e008      	b.n	8004470 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800445e:	f7fd fa35 	bl	80018cc <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e006      	b.n	800447e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <RCCEx_PLL2_Config+0x15c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	58024400 	.word	0x58024400
 800448c:	ffff0007 	.word	0xffff0007

08004490 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800449e:	4b53      	ldr	r3, [pc, #332]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d101      	bne.n	80044ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e099      	b.n	80045e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044ae:	4b4f      	ldr	r3, [pc, #316]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a4e      	ldr	r2, [pc, #312]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 80044b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ba:	f7fd fa07 	bl	80018cc <HAL_GetTick>
 80044be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044c0:	e008      	b.n	80044d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044c2:	f7fd fa03 	bl	80018cc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e086      	b.n	80045e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044d4:	4b45      	ldr	r3, [pc, #276]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80044e0:	4b42      	ldr	r3, [pc, #264]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 80044e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	051b      	lsls	r3, r3, #20
 80044ee:	493f      	ldr	r1, [pc, #252]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	3b01      	subs	r3, #1
 8004504:	025b      	lsls	r3, r3, #9
 8004506:	b29b      	uxth	r3, r3
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	3b01      	subs	r3, #1
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	3b01      	subs	r3, #1
 800451e:	061b      	lsls	r3, r3, #24
 8004520:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004524:	4931      	ldr	r1, [pc, #196]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 8004526:	4313      	orrs	r3, r2
 8004528:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800452a:	4b30      	ldr	r3, [pc, #192]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	492d      	ldr	r1, [pc, #180]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 8004538:	4313      	orrs	r3, r2
 800453a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800453c:	4b2b      	ldr	r3, [pc, #172]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	4928      	ldr	r1, [pc, #160]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800454e:	4b27      	ldr	r3, [pc, #156]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 8004550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004552:	4a26      	ldr	r2, [pc, #152]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 8004554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004558:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800455a:	4b24      	ldr	r3, [pc, #144]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 800455c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800455e:	4b24      	ldr	r3, [pc, #144]	@ (80045f0 <RCCEx_PLL3_Config+0x160>)
 8004560:	4013      	ands	r3, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	69d2      	ldr	r2, [r2, #28]
 8004566:	00d2      	lsls	r2, r2, #3
 8004568:	4920      	ldr	r1, [pc, #128]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 800456a:	4313      	orrs	r3, r2
 800456c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800456e:	4b1f      	ldr	r3, [pc, #124]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	4a1e      	ldr	r2, [pc, #120]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 8004574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004578:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004580:	4b1a      	ldr	r3, [pc, #104]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	4a19      	ldr	r2, [pc, #100]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 8004586:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800458a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800458c:	e00f      	b.n	80045ae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d106      	bne.n	80045a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004594:	4b15      	ldr	r3, [pc, #84]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 8004596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004598:	4a14      	ldr	r2, [pc, #80]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 800459a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800459e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045a0:	e005      	b.n	80045ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045a2:	4b12      	ldr	r3, [pc, #72]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	4a11      	ldr	r2, [pc, #68]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 80045a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045ae:	4b0f      	ldr	r3, [pc, #60]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a0e      	ldr	r2, [pc, #56]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 80045b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ba:	f7fd f987 	bl	80018cc <HAL_GetTick>
 80045be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045c0:	e008      	b.n	80045d4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045c2:	f7fd f983 	bl	80018cc <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e006      	b.n	80045e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045d4:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <RCCEx_PLL3_Config+0x15c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	58024400 	.word	0x58024400
 80045f0:	ffff0007 	.word	0xffff0007

080045f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e10f      	b.n	8004826 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a87      	ldr	r2, [pc, #540]	@ (8004830 <HAL_SPI_Init+0x23c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00f      	beq.n	8004636 <HAL_SPI_Init+0x42>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a86      	ldr	r2, [pc, #536]	@ (8004834 <HAL_SPI_Init+0x240>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00a      	beq.n	8004636 <HAL_SPI_Init+0x42>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a84      	ldr	r2, [pc, #528]	@ (8004838 <HAL_SPI_Init+0x244>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d005      	beq.n	8004636 <HAL_SPI_Init+0x42>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b0f      	cmp	r3, #15
 8004630:	d901      	bls.n	8004636 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e0f7      	b.n	8004826 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fe2e 	bl	8005298 <SPI_GetPacketSize>
 800463c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a7b      	ldr	r2, [pc, #492]	@ (8004830 <HAL_SPI_Init+0x23c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00c      	beq.n	8004662 <HAL_SPI_Init+0x6e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a79      	ldr	r2, [pc, #484]	@ (8004834 <HAL_SPI_Init+0x240>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d007      	beq.n	8004662 <HAL_SPI_Init+0x6e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a78      	ldr	r2, [pc, #480]	@ (8004838 <HAL_SPI_Init+0x244>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d002      	beq.n	8004662 <HAL_SPI_Init+0x6e>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b08      	cmp	r3, #8
 8004660:	d811      	bhi.n	8004686 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004666:	4a72      	ldr	r2, [pc, #456]	@ (8004830 <HAL_SPI_Init+0x23c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d009      	beq.n	8004680 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a70      	ldr	r2, [pc, #448]	@ (8004834 <HAL_SPI_Init+0x240>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_SPI_Init+0x8c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6f      	ldr	r2, [pc, #444]	@ (8004838 <HAL_SPI_Init+0x244>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d104      	bne.n	800468a <HAL_SPI_Init+0x96>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b10      	cmp	r3, #16
 8004684:	d901      	bls.n	800468a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e0cd      	b.n	8004826 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fc fe1a 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80046c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046d0:	d119      	bne.n	8004706 <HAL_SPI_Init+0x112>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046da:	d103      	bne.n	80046e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10c      	bne.n	8004706 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80046f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046f4:	d107      	bne.n	8004706 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004704:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00f      	beq.n	8004732 <HAL_SPI_Init+0x13e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d90b      	bls.n	8004732 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e007      	b.n	8004742 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004740:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474a:	431a      	orrs	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004754:	ea42 0103 	orr.w	r1, r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a2:	ea42 0103 	orr.w	r1, r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d113      	bne.n	80047e2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40013000 	.word	0x40013000
 8004834:	40003800 	.word	0x40003800
 8004838:	40003c00 	.word	0x40003c00

0800483c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	4613      	mov	r3, r2
 800484a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3320      	adds	r3, #32
 8004852:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004854:	f7fd f83a 	bl	80018cc <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	d001      	beq.n	800486a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
 8004868:	e1d1      	b.n	8004c0e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_SPI_Transmit+0x3a>
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e1c9      	b.n	8004c0e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_SPI_Transmit+0x4c>
 8004884:	2302      	movs	r3, #2
 8004886:	e1c2      	b.n	8004c0e <HAL_SPI_Transmit+0x3d2>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2203      	movs	r2, #3
 8004894:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80048e0:	d108      	bne.n	80048f4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e009      	b.n	8004908 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004906:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	4b96      	ldr	r3, [pc, #600]	@ (8004b68 <HAL_SPI_Transmit+0x32c>)
 8004910:	4013      	ands	r3, r2
 8004912:	88f9      	ldrh	r1, [r7, #6]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	430b      	orrs	r3, r1
 800491a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004934:	d107      	bne.n	8004946 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004944:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	d947      	bls.n	80049de <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800494e:	e03f      	b.n	80049d0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d114      	bne.n	8004988 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496e:	1d1a      	adds	r2, r3, #4
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004986:	e023      	b.n	80049d0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004988:	f7fc ffa0 	bl	80018cc <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d803      	bhi.n	80049a0 <HAL_SPI_Transmit+0x164>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d102      	bne.n	80049a6 <HAL_SPI_Transmit+0x16a>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d114      	bne.n	80049d0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 fba8 	bl	80050fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e11e      	b.n	8004c0e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1b9      	bne.n	8004950 <HAL_SPI_Transmit+0x114>
 80049dc:	e0f1      	b.n	8004bc2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b07      	cmp	r3, #7
 80049e4:	f240 80e6 	bls.w	8004bb4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80049e8:	e05d      	b.n	8004aa6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d132      	bne.n	8004a5e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d918      	bls.n	8004a36 <HAL_SPI_Transmit+0x1fa>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d014      	beq.n	8004a36 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1c:	1d1a      	adds	r2, r3, #4
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b02      	subs	r3, #2
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004a34:	e037      	b.n	8004aa6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3a:	881a      	ldrh	r2, [r3, #0]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a44:	1c9a      	adds	r2, r3, #2
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004a5c:	e023      	b.n	8004aa6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a5e:	f7fc ff35 	bl	80018cc <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d803      	bhi.n	8004a76 <HAL_SPI_Transmit+0x23a>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d102      	bne.n	8004a7c <HAL_SPI_Transmit+0x240>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d114      	bne.n	8004aa6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 fb3d 	bl	80050fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e0b3      	b.n	8004c0e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d19b      	bne.n	80049ea <HAL_SPI_Transmit+0x1ae>
 8004ab2:	e086      	b.n	8004bc2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d154      	bne.n	8004b6c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d918      	bls.n	8004b00 <HAL_SPI_Transmit+0x2c4>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad2:	2b40      	cmp	r3, #64	@ 0x40
 8004ad4:	d914      	bls.n	8004b00 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	1d1a      	adds	r2, r3, #4
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b04      	subs	r3, #4
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004afe:	e059      	b.n	8004bb4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d917      	bls.n	8004b3c <HAL_SPI_Transmit+0x300>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d013      	beq.n	8004b3c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b18:	881a      	ldrh	r2, [r3, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b22:	1c9a      	adds	r2, r3, #2
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b02      	subs	r3, #2
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004b3a:	e03b      	b.n	8004bb4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3320      	adds	r3, #32
 8004b46:	7812      	ldrb	r2, [r2, #0]
 8004b48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004b66:	e025      	b.n	8004bb4 <HAL_SPI_Transmit+0x378>
 8004b68:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b6c:	f7fc feae 	bl	80018cc <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d803      	bhi.n	8004b84 <HAL_SPI_Transmit+0x348>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d102      	bne.n	8004b8a <HAL_SPI_Transmit+0x34e>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d114      	bne.n	8004bb4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fab6 	bl	80050fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e02c      	b.n	8004c0e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f47f af79 	bne.w	8004ab4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2108      	movs	r1, #8
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fb35 	bl	800523c <SPI_WaitOnFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bde:	f043 0220 	orr.w	r2, r3, #32
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fa87 	bl	80050fc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
  }
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop

08004c18 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	4613      	mov	r3, r2
 8004c26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3301      	adds	r3, #1
 8004c32:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3330      	adds	r3, #48	@ 0x30
 8004c3a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c3c:	f7fc fe46 	bl	80018cc <HAL_GetTick>
 8004c40:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d001      	beq.n	8004c52 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e250      	b.n	80050f4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_SPI_Receive+0x46>
 8004c58:	88fb      	ldrh	r3, [r7, #6]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e248      	b.n	80050f4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_SPI_Receive+0x58>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e241      	b.n	80050f4 <HAL_SPI_Receive+0x4dc>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	88fa      	ldrh	r2, [r7, #6]
 8004c92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	88fa      	ldrh	r2, [r7, #6]
 8004c9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004cc8:	d108      	bne.n	8004cdc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	e009      	b.n	8004cf0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004cee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	4b95      	ldr	r3, [pc, #596]	@ (8004f4c <HAL_SPI_Receive+0x334>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	88f9      	ldrh	r1, [r7, #6]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	430b      	orrs	r3, r1
 8004d02:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d1c:	d107      	bne.n	8004d2e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b0f      	cmp	r3, #15
 8004d34:	d96c      	bls.n	8004e10 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004d36:	e064      	b.n	8004e02 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d114      	bne.n	8004d78 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d56:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d58:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d5e:	1d1a      	adds	r2, r3, #4
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004d76:	e044      	b.n	8004e02 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8bfa      	ldrh	r2, [r7, #30]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d919      	bls.n	8004dba <HAL_SPI_Receive+0x1a2>
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d014      	beq.n	8004dba <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d9a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004da0:	1d1a      	adds	r2, r3, #4
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004db8:	e023      	b.n	8004e02 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dba:	f7fc fd87 	bl	80018cc <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d803      	bhi.n	8004dd2 <HAL_SPI_Receive+0x1ba>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d102      	bne.n	8004dd8 <HAL_SPI_Receive+0x1c0>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d114      	bne.n	8004e02 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 f98f 	bl	80050fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004de4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e178      	b.n	80050f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d194      	bne.n	8004d38 <HAL_SPI_Receive+0x120>
 8004e0e:	e15e      	b.n	80050ce <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	2b07      	cmp	r3, #7
 8004e16:	f240 8153 	bls.w	80050c0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004e1a:	e08f      	b.n	8004f3c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d114      	bne.n	8004e5c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	8812      	ldrh	r2, [r2, #0]
 8004e3a:	b292      	uxth	r2, r2
 8004e3c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e42:	1c9a      	adds	r2, r3, #2
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004e5a:	e06f      	b.n	8004f3c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8bfa      	ldrh	r2, [r7, #30]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d924      	bls.n	8004eb4 <HAL_SPI_Receive+0x29c>
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01f      	beq.n	8004eb4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	8812      	ldrh	r2, [r2, #0]
 8004e7c:	b292      	uxth	r2, r2
 8004e7e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e84:	1c9a      	adds	r2, r3, #2
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	8812      	ldrh	r2, [r2, #0]
 8004e92:	b292      	uxth	r2, r2
 8004e94:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e9a:	1c9a      	adds	r2, r3, #2
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b02      	subs	r3, #2
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004eb2:	e043      	b.n	8004f3c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d119      	bne.n	8004ef4 <HAL_SPI_Receive+0x2dc>
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d014      	beq.n	8004ef4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	8812      	ldrh	r2, [r2, #0]
 8004ed2:	b292      	uxth	r2, r2
 8004ed4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eda:	1c9a      	adds	r2, r3, #2
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004ef2:	e023      	b.n	8004f3c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef4:	f7fc fcea 	bl	80018cc <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d803      	bhi.n	8004f0c <HAL_SPI_Receive+0x2f4>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d102      	bne.n	8004f12 <HAL_SPI_Receive+0x2fa>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d114      	bne.n	8004f3c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f8f2 	bl	80050fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e0db      	b.n	80050f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f47f af69 	bne.w	8004e1c <HAL_SPI_Receive+0x204>
 8004f4a:	e0c0      	b.n	80050ce <HAL_SPI_Receive+0x4b6>
 8004f4c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d117      	bne.n	8004f96 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f72:	7812      	ldrb	r2, [r2, #0]
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004f94:	e094      	b.n	80050c0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	8bfa      	ldrh	r2, [r7, #30]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d946      	bls.n	8005032 <HAL_SPI_Receive+0x41a>
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d041      	beq.n	8005032 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fba:	7812      	ldrb	r2, [r2, #0]
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fd6:	7812      	ldrb	r2, [r2, #0]
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ff2:	7812      	ldrb	r2, [r2, #0]
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800500e:	7812      	ldrb	r2, [r2, #0]
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b04      	subs	r3, #4
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005030:	e046      	b.n	80050c0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b03      	cmp	r3, #3
 800503c:	d81c      	bhi.n	8005078 <HAL_SPI_Receive+0x460>
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d017      	beq.n	8005078 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005054:	7812      	ldrb	r2, [r2, #0]
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005076:	e023      	b.n	80050c0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005078:	f7fc fc28 	bl	80018cc <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d803      	bhi.n	8005090 <HAL_SPI_Receive+0x478>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d102      	bne.n	8005096 <HAL_SPI_Receive+0x47e>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d114      	bne.n	80050c0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f830 	bl	80050fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e019      	b.n	80050f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f47f af41 	bne.w	8004f50 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f814 	bl	80050fc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80050f2:	2300      	movs	r3, #0
  }
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3720      	adds	r7, #32
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0210 	orr.w	r2, r2, #16
 800512a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0201 	bic.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6919      	ldr	r1, [r3, #16]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4b3c      	ldr	r3, [pc, #240]	@ (8005238 <SPI_CloseTransfer+0x13c>)
 8005148:	400b      	ands	r3, r1
 800514a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800515a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b04      	cmp	r3, #4
 8005166:	d014      	beq.n	8005192 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00f      	beq.n	8005192 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005178:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0220 	orr.w	r2, r2, #32
 8005190:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b03      	cmp	r3, #3
 800519c:	d014      	beq.n	80051c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00f      	beq.n	80051c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ae:	f043 0204 	orr.w	r2, r3, #4
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00f      	beq.n	80051f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051d8:	f043 0201 	orr.w	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00f      	beq.n	800521c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005202:	f043 0208 	orr.w	r2, r3, #8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800521a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	fffffc90 	.word	0xfffffc90

0800523c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800524c:	e010      	b.n	8005270 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800524e:	f7fc fb3d 	bl	80018cc <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d803      	bhi.n	8005266 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005264:	d102      	bne.n	800526c <SPI_WaitOnFlagUntilTimeout+0x30>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e00f      	b.n	8005290 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4013      	ands	r3, r2
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	429a      	cmp	r2, r3
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	429a      	cmp	r2, r3
 800528c:	d0df      	beq.n	800524e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	3307      	adds	r3, #7
 80052b6:	08db      	lsrs	r3, r3, #3
 80052b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	fb02 f303 	mul.w	r3, r2, r3
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <__cvt>:
 80052ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d0:	ed2d 8b02 	vpush	{d8}
 80052d4:	eeb0 8b40 	vmov.f64	d8, d0
 80052d8:	b085      	sub	sp, #20
 80052da:	4617      	mov	r7, r2
 80052dc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80052de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052e0:	ee18 2a90 	vmov	r2, s17
 80052e4:	f025 0520 	bic.w	r5, r5, #32
 80052e8:	2a00      	cmp	r2, #0
 80052ea:	bfb6      	itet	lt
 80052ec:	222d      	movlt	r2, #45	@ 0x2d
 80052ee:	2200      	movge	r2, #0
 80052f0:	eeb1 8b40 	vneglt.f64	d8, d0
 80052f4:	2d46      	cmp	r5, #70	@ 0x46
 80052f6:	460c      	mov	r4, r1
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	d004      	beq.n	8005306 <__cvt+0x38>
 80052fc:	2d45      	cmp	r5, #69	@ 0x45
 80052fe:	d100      	bne.n	8005302 <__cvt+0x34>
 8005300:	3401      	adds	r4, #1
 8005302:	2102      	movs	r1, #2
 8005304:	e000      	b.n	8005308 <__cvt+0x3a>
 8005306:	2103      	movs	r1, #3
 8005308:	ab03      	add	r3, sp, #12
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	ab02      	add	r3, sp, #8
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	4622      	mov	r2, r4
 8005312:	4633      	mov	r3, r6
 8005314:	eeb0 0b48 	vmov.f64	d0, d8
 8005318:	f000 ff26 	bl	8006168 <_dtoa_r>
 800531c:	2d47      	cmp	r5, #71	@ 0x47
 800531e:	d114      	bne.n	800534a <__cvt+0x7c>
 8005320:	07fb      	lsls	r3, r7, #31
 8005322:	d50a      	bpl.n	800533a <__cvt+0x6c>
 8005324:	1902      	adds	r2, r0, r4
 8005326:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800532a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800532e:	bf08      	it	eq
 8005330:	9203      	streq	r2, [sp, #12]
 8005332:	2130      	movs	r1, #48	@ 0x30
 8005334:	9b03      	ldr	r3, [sp, #12]
 8005336:	4293      	cmp	r3, r2
 8005338:	d319      	bcc.n	800536e <__cvt+0xa0>
 800533a:	9b03      	ldr	r3, [sp, #12]
 800533c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800533e:	1a1b      	subs	r3, r3, r0
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	b005      	add	sp, #20
 8005344:	ecbd 8b02 	vpop	{d8}
 8005348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800534a:	2d46      	cmp	r5, #70	@ 0x46
 800534c:	eb00 0204 	add.w	r2, r0, r4
 8005350:	d1e9      	bne.n	8005326 <__cvt+0x58>
 8005352:	7803      	ldrb	r3, [r0, #0]
 8005354:	2b30      	cmp	r3, #48	@ 0x30
 8005356:	d107      	bne.n	8005368 <__cvt+0x9a>
 8005358:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800535c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005360:	bf1c      	itt	ne
 8005362:	f1c4 0401 	rsbne	r4, r4, #1
 8005366:	6034      	strne	r4, [r6, #0]
 8005368:	6833      	ldr	r3, [r6, #0]
 800536a:	441a      	add	r2, r3
 800536c:	e7db      	b.n	8005326 <__cvt+0x58>
 800536e:	1c5c      	adds	r4, r3, #1
 8005370:	9403      	str	r4, [sp, #12]
 8005372:	7019      	strb	r1, [r3, #0]
 8005374:	e7de      	b.n	8005334 <__cvt+0x66>

08005376 <__exponent>:
 8005376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005378:	2900      	cmp	r1, #0
 800537a:	bfba      	itte	lt
 800537c:	4249      	neglt	r1, r1
 800537e:	232d      	movlt	r3, #45	@ 0x2d
 8005380:	232b      	movge	r3, #43	@ 0x2b
 8005382:	2909      	cmp	r1, #9
 8005384:	7002      	strb	r2, [r0, #0]
 8005386:	7043      	strb	r3, [r0, #1]
 8005388:	dd29      	ble.n	80053de <__exponent+0x68>
 800538a:	f10d 0307 	add.w	r3, sp, #7
 800538e:	461d      	mov	r5, r3
 8005390:	270a      	movs	r7, #10
 8005392:	461a      	mov	r2, r3
 8005394:	fbb1 f6f7 	udiv	r6, r1, r7
 8005398:	fb07 1416 	mls	r4, r7, r6, r1
 800539c:	3430      	adds	r4, #48	@ 0x30
 800539e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80053a2:	460c      	mov	r4, r1
 80053a4:	2c63      	cmp	r4, #99	@ 0x63
 80053a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80053aa:	4631      	mov	r1, r6
 80053ac:	dcf1      	bgt.n	8005392 <__exponent+0x1c>
 80053ae:	3130      	adds	r1, #48	@ 0x30
 80053b0:	1e94      	subs	r4, r2, #2
 80053b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053b6:	1c41      	adds	r1, r0, #1
 80053b8:	4623      	mov	r3, r4
 80053ba:	42ab      	cmp	r3, r5
 80053bc:	d30a      	bcc.n	80053d4 <__exponent+0x5e>
 80053be:	f10d 0309 	add.w	r3, sp, #9
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	42ac      	cmp	r4, r5
 80053c6:	bf88      	it	hi
 80053c8:	2300      	movhi	r3, #0
 80053ca:	3302      	adds	r3, #2
 80053cc:	4403      	add	r3, r0
 80053ce:	1a18      	subs	r0, r3, r0
 80053d0:	b003      	add	sp, #12
 80053d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053dc:	e7ed      	b.n	80053ba <__exponent+0x44>
 80053de:	2330      	movs	r3, #48	@ 0x30
 80053e0:	3130      	adds	r1, #48	@ 0x30
 80053e2:	7083      	strb	r3, [r0, #2]
 80053e4:	70c1      	strb	r1, [r0, #3]
 80053e6:	1d03      	adds	r3, r0, #4
 80053e8:	e7f1      	b.n	80053ce <__exponent+0x58>
 80053ea:	0000      	movs	r0, r0
 80053ec:	0000      	movs	r0, r0
	...

080053f0 <_printf_float>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	b08d      	sub	sp, #52	@ 0x34
 80053f6:	460c      	mov	r4, r1
 80053f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80053fc:	4616      	mov	r6, r2
 80053fe:	461f      	mov	r7, r3
 8005400:	4605      	mov	r5, r0
 8005402:	f000 fdaf 	bl	8005f64 <_localeconv_r>
 8005406:	f8d0 b000 	ldr.w	fp, [r0]
 800540a:	4658      	mov	r0, fp
 800540c:	f7fa ffb8 	bl	8000380 <strlen>
 8005410:	2300      	movs	r3, #0
 8005412:	930a      	str	r3, [sp, #40]	@ 0x28
 8005414:	f8d8 3000 	ldr.w	r3, [r8]
 8005418:	f894 9018 	ldrb.w	r9, [r4, #24]
 800541c:	6822      	ldr	r2, [r4, #0]
 800541e:	9005      	str	r0, [sp, #20]
 8005420:	3307      	adds	r3, #7
 8005422:	f023 0307 	bic.w	r3, r3, #7
 8005426:	f103 0108 	add.w	r1, r3, #8
 800542a:	f8c8 1000 	str.w	r1, [r8]
 800542e:	ed93 0b00 	vldr	d0, [r3]
 8005432:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8005690 <_printf_float+0x2a0>
 8005436:	eeb0 7bc0 	vabs.f64	d7, d0
 800543a:	eeb4 7b46 	vcmp.f64	d7, d6
 800543e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005442:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8005446:	dd24      	ble.n	8005492 <_printf_float+0xa2>
 8005448:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800544c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005450:	d502      	bpl.n	8005458 <_printf_float+0x68>
 8005452:	232d      	movs	r3, #45	@ 0x2d
 8005454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005458:	498f      	ldr	r1, [pc, #572]	@ (8005698 <_printf_float+0x2a8>)
 800545a:	4b90      	ldr	r3, [pc, #576]	@ (800569c <_printf_float+0x2ac>)
 800545c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8005460:	bf94      	ite	ls
 8005462:	4688      	movls	r8, r1
 8005464:	4698      	movhi	r8, r3
 8005466:	f022 0204 	bic.w	r2, r2, #4
 800546a:	2303      	movs	r3, #3
 800546c:	6123      	str	r3, [r4, #16]
 800546e:	6022      	str	r2, [r4, #0]
 8005470:	f04f 0a00 	mov.w	sl, #0
 8005474:	9700      	str	r7, [sp, #0]
 8005476:	4633      	mov	r3, r6
 8005478:	aa0b      	add	r2, sp, #44	@ 0x2c
 800547a:	4621      	mov	r1, r4
 800547c:	4628      	mov	r0, r5
 800547e:	f000 f9d1 	bl	8005824 <_printf_common>
 8005482:	3001      	adds	r0, #1
 8005484:	f040 8089 	bne.w	800559a <_printf_float+0x1aa>
 8005488:	f04f 30ff 	mov.w	r0, #4294967295
 800548c:	b00d      	add	sp, #52	@ 0x34
 800548e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005492:	eeb4 0b40 	vcmp.f64	d0, d0
 8005496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549a:	d709      	bvc.n	80054b0 <_printf_float+0xc0>
 800549c:	ee10 3a90 	vmov	r3, s1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bfbc      	itt	lt
 80054a4:	232d      	movlt	r3, #45	@ 0x2d
 80054a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054aa:	497d      	ldr	r1, [pc, #500]	@ (80056a0 <_printf_float+0x2b0>)
 80054ac:	4b7d      	ldr	r3, [pc, #500]	@ (80056a4 <_printf_float+0x2b4>)
 80054ae:	e7d5      	b.n	800545c <_printf_float+0x6c>
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	1c59      	adds	r1, r3, #1
 80054b4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80054b8:	d139      	bne.n	800552e <_printf_float+0x13e>
 80054ba:	2306      	movs	r3, #6
 80054bc:	6063      	str	r3, [r4, #4]
 80054be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054c2:	2300      	movs	r3, #0
 80054c4:	6022      	str	r2, [r4, #0]
 80054c6:	9303      	str	r3, [sp, #12]
 80054c8:	ab0a      	add	r3, sp, #40	@ 0x28
 80054ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80054ce:	ab09      	add	r3, sp, #36	@ 0x24
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	6861      	ldr	r1, [r4, #4]
 80054d4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80054d8:	4628      	mov	r0, r5
 80054da:	f7ff fef8 	bl	80052ce <__cvt>
 80054de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80054e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80054e4:	4680      	mov	r8, r0
 80054e6:	d129      	bne.n	800553c <_printf_float+0x14c>
 80054e8:	1cc8      	adds	r0, r1, #3
 80054ea:	db02      	blt.n	80054f2 <_printf_float+0x102>
 80054ec:	6863      	ldr	r3, [r4, #4]
 80054ee:	4299      	cmp	r1, r3
 80054f0:	dd41      	ble.n	8005576 <_printf_float+0x186>
 80054f2:	f1a9 0902 	sub.w	r9, r9, #2
 80054f6:	fa5f f989 	uxtb.w	r9, r9
 80054fa:	3901      	subs	r1, #1
 80054fc:	464a      	mov	r2, r9
 80054fe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005502:	9109      	str	r1, [sp, #36]	@ 0x24
 8005504:	f7ff ff37 	bl	8005376 <__exponent>
 8005508:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800550a:	1813      	adds	r3, r2, r0
 800550c:	2a01      	cmp	r2, #1
 800550e:	4682      	mov	sl, r0
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	dc02      	bgt.n	800551a <_printf_float+0x12a>
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	07d2      	lsls	r2, r2, #31
 8005518:	d501      	bpl.n	800551e <_printf_float+0x12e>
 800551a:	3301      	adds	r3, #1
 800551c:	6123      	str	r3, [r4, #16]
 800551e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0a6      	beq.n	8005474 <_printf_float+0x84>
 8005526:	232d      	movs	r3, #45	@ 0x2d
 8005528:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800552c:	e7a2      	b.n	8005474 <_printf_float+0x84>
 800552e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005532:	d1c4      	bne.n	80054be <_printf_float+0xce>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1c2      	bne.n	80054be <_printf_float+0xce>
 8005538:	2301      	movs	r3, #1
 800553a:	e7bf      	b.n	80054bc <_printf_float+0xcc>
 800553c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005540:	d9db      	bls.n	80054fa <_printf_float+0x10a>
 8005542:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8005546:	d118      	bne.n	800557a <_printf_float+0x18a>
 8005548:	2900      	cmp	r1, #0
 800554a:	6863      	ldr	r3, [r4, #4]
 800554c:	dd0b      	ble.n	8005566 <_printf_float+0x176>
 800554e:	6121      	str	r1, [r4, #16]
 8005550:	b913      	cbnz	r3, 8005558 <_printf_float+0x168>
 8005552:	6822      	ldr	r2, [r4, #0]
 8005554:	07d0      	lsls	r0, r2, #31
 8005556:	d502      	bpl.n	800555e <_printf_float+0x16e>
 8005558:	3301      	adds	r3, #1
 800555a:	440b      	add	r3, r1
 800555c:	6123      	str	r3, [r4, #16]
 800555e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005560:	f04f 0a00 	mov.w	sl, #0
 8005564:	e7db      	b.n	800551e <_printf_float+0x12e>
 8005566:	b913      	cbnz	r3, 800556e <_printf_float+0x17e>
 8005568:	6822      	ldr	r2, [r4, #0]
 800556a:	07d2      	lsls	r2, r2, #31
 800556c:	d501      	bpl.n	8005572 <_printf_float+0x182>
 800556e:	3302      	adds	r3, #2
 8005570:	e7f4      	b.n	800555c <_printf_float+0x16c>
 8005572:	2301      	movs	r3, #1
 8005574:	e7f2      	b.n	800555c <_printf_float+0x16c>
 8005576:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800557a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800557c:	4299      	cmp	r1, r3
 800557e:	db05      	blt.n	800558c <_printf_float+0x19c>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	6121      	str	r1, [r4, #16]
 8005584:	07d8      	lsls	r0, r3, #31
 8005586:	d5ea      	bpl.n	800555e <_printf_float+0x16e>
 8005588:	1c4b      	adds	r3, r1, #1
 800558a:	e7e7      	b.n	800555c <_printf_float+0x16c>
 800558c:	2900      	cmp	r1, #0
 800558e:	bfd4      	ite	le
 8005590:	f1c1 0202 	rsble	r2, r1, #2
 8005594:	2201      	movgt	r2, #1
 8005596:	4413      	add	r3, r2
 8005598:	e7e0      	b.n	800555c <_printf_float+0x16c>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	055a      	lsls	r2, r3, #21
 800559e:	d407      	bmi.n	80055b0 <_printf_float+0x1c0>
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	4642      	mov	r2, r8
 80055a4:	4631      	mov	r1, r6
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b8      	blx	r7
 80055aa:	3001      	adds	r0, #1
 80055ac:	d12a      	bne.n	8005604 <_printf_float+0x214>
 80055ae:	e76b      	b.n	8005488 <_printf_float+0x98>
 80055b0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80055b4:	f240 80e0 	bls.w	8005778 <_printf_float+0x388>
 80055b8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80055bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80055c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c4:	d133      	bne.n	800562e <_printf_float+0x23e>
 80055c6:	4a38      	ldr	r2, [pc, #224]	@ (80056a8 <_printf_float+0x2b8>)
 80055c8:	2301      	movs	r3, #1
 80055ca:	4631      	mov	r1, r6
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b8      	blx	r7
 80055d0:	3001      	adds	r0, #1
 80055d2:	f43f af59 	beq.w	8005488 <_printf_float+0x98>
 80055d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80055da:	4543      	cmp	r3, r8
 80055dc:	db02      	blt.n	80055e4 <_printf_float+0x1f4>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	07d8      	lsls	r0, r3, #31
 80055e2:	d50f      	bpl.n	8005604 <_printf_float+0x214>
 80055e4:	9b05      	ldr	r3, [sp, #20]
 80055e6:	465a      	mov	r2, fp
 80055e8:	4631      	mov	r1, r6
 80055ea:	4628      	mov	r0, r5
 80055ec:	47b8      	blx	r7
 80055ee:	3001      	adds	r0, #1
 80055f0:	f43f af4a 	beq.w	8005488 <_printf_float+0x98>
 80055f4:	f04f 0900 	mov.w	r9, #0
 80055f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80055fc:	f104 0a1a 	add.w	sl, r4, #26
 8005600:	45c8      	cmp	r8, r9
 8005602:	dc09      	bgt.n	8005618 <_printf_float+0x228>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	079b      	lsls	r3, r3, #30
 8005608:	f100 8107 	bmi.w	800581a <_printf_float+0x42a>
 800560c:	68e0      	ldr	r0, [r4, #12]
 800560e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005610:	4298      	cmp	r0, r3
 8005612:	bfb8      	it	lt
 8005614:	4618      	movlt	r0, r3
 8005616:	e739      	b.n	800548c <_printf_float+0x9c>
 8005618:	2301      	movs	r3, #1
 800561a:	4652      	mov	r2, sl
 800561c:	4631      	mov	r1, r6
 800561e:	4628      	mov	r0, r5
 8005620:	47b8      	blx	r7
 8005622:	3001      	adds	r0, #1
 8005624:	f43f af30 	beq.w	8005488 <_printf_float+0x98>
 8005628:	f109 0901 	add.w	r9, r9, #1
 800562c:	e7e8      	b.n	8005600 <_printf_float+0x210>
 800562e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005630:	2b00      	cmp	r3, #0
 8005632:	dc3b      	bgt.n	80056ac <_printf_float+0x2bc>
 8005634:	4a1c      	ldr	r2, [pc, #112]	@ (80056a8 <_printf_float+0x2b8>)
 8005636:	2301      	movs	r3, #1
 8005638:	4631      	mov	r1, r6
 800563a:	4628      	mov	r0, r5
 800563c:	47b8      	blx	r7
 800563e:	3001      	adds	r0, #1
 8005640:	f43f af22 	beq.w	8005488 <_printf_float+0x98>
 8005644:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005648:	ea59 0303 	orrs.w	r3, r9, r3
 800564c:	d102      	bne.n	8005654 <_printf_float+0x264>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	07d9      	lsls	r1, r3, #31
 8005652:	d5d7      	bpl.n	8005604 <_printf_float+0x214>
 8005654:	9b05      	ldr	r3, [sp, #20]
 8005656:	465a      	mov	r2, fp
 8005658:	4631      	mov	r1, r6
 800565a:	4628      	mov	r0, r5
 800565c:	47b8      	blx	r7
 800565e:	3001      	adds	r0, #1
 8005660:	f43f af12 	beq.w	8005488 <_printf_float+0x98>
 8005664:	f04f 0a00 	mov.w	sl, #0
 8005668:	f104 0b1a 	add.w	fp, r4, #26
 800566c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800566e:	425b      	negs	r3, r3
 8005670:	4553      	cmp	r3, sl
 8005672:	dc01      	bgt.n	8005678 <_printf_float+0x288>
 8005674:	464b      	mov	r3, r9
 8005676:	e794      	b.n	80055a2 <_printf_float+0x1b2>
 8005678:	2301      	movs	r3, #1
 800567a:	465a      	mov	r2, fp
 800567c:	4631      	mov	r1, r6
 800567e:	4628      	mov	r0, r5
 8005680:	47b8      	blx	r7
 8005682:	3001      	adds	r0, #1
 8005684:	f43f af00 	beq.w	8005488 <_printf_float+0x98>
 8005688:	f10a 0a01 	add.w	sl, sl, #1
 800568c:	e7ee      	b.n	800566c <_printf_float+0x27c>
 800568e:	bf00      	nop
 8005690:	ffffffff 	.word	0xffffffff
 8005694:	7fefffff 	.word	0x7fefffff
 8005698:	08007e30 	.word	0x08007e30
 800569c:	08007e34 	.word	0x08007e34
 80056a0:	08007e38 	.word	0x08007e38
 80056a4:	08007e3c 	.word	0x08007e3c
 80056a8:	08007e40 	.word	0x08007e40
 80056ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056b2:	4553      	cmp	r3, sl
 80056b4:	bfa8      	it	ge
 80056b6:	4653      	movge	r3, sl
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	4699      	mov	r9, r3
 80056bc:	dc37      	bgt.n	800572e <_printf_float+0x33e>
 80056be:	2300      	movs	r3, #0
 80056c0:	9307      	str	r3, [sp, #28]
 80056c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056c6:	f104 021a 	add.w	r2, r4, #26
 80056ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056cc:	9907      	ldr	r1, [sp, #28]
 80056ce:	9306      	str	r3, [sp, #24]
 80056d0:	eba3 0309 	sub.w	r3, r3, r9
 80056d4:	428b      	cmp	r3, r1
 80056d6:	dc31      	bgt.n	800573c <_printf_float+0x34c>
 80056d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056da:	459a      	cmp	sl, r3
 80056dc:	dc3b      	bgt.n	8005756 <_printf_float+0x366>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	07da      	lsls	r2, r3, #31
 80056e2:	d438      	bmi.n	8005756 <_printf_float+0x366>
 80056e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056e6:	ebaa 0903 	sub.w	r9, sl, r3
 80056ea:	9b06      	ldr	r3, [sp, #24]
 80056ec:	ebaa 0303 	sub.w	r3, sl, r3
 80056f0:	4599      	cmp	r9, r3
 80056f2:	bfa8      	it	ge
 80056f4:	4699      	movge	r9, r3
 80056f6:	f1b9 0f00 	cmp.w	r9, #0
 80056fa:	dc34      	bgt.n	8005766 <_printf_float+0x376>
 80056fc:	f04f 0800 	mov.w	r8, #0
 8005700:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005704:	f104 0b1a 	add.w	fp, r4, #26
 8005708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800570a:	ebaa 0303 	sub.w	r3, sl, r3
 800570e:	eba3 0309 	sub.w	r3, r3, r9
 8005712:	4543      	cmp	r3, r8
 8005714:	f77f af76 	ble.w	8005604 <_printf_float+0x214>
 8005718:	2301      	movs	r3, #1
 800571a:	465a      	mov	r2, fp
 800571c:	4631      	mov	r1, r6
 800571e:	4628      	mov	r0, r5
 8005720:	47b8      	blx	r7
 8005722:	3001      	adds	r0, #1
 8005724:	f43f aeb0 	beq.w	8005488 <_printf_float+0x98>
 8005728:	f108 0801 	add.w	r8, r8, #1
 800572c:	e7ec      	b.n	8005708 <_printf_float+0x318>
 800572e:	4642      	mov	r2, r8
 8005730:	4631      	mov	r1, r6
 8005732:	4628      	mov	r0, r5
 8005734:	47b8      	blx	r7
 8005736:	3001      	adds	r0, #1
 8005738:	d1c1      	bne.n	80056be <_printf_float+0x2ce>
 800573a:	e6a5      	b.n	8005488 <_printf_float+0x98>
 800573c:	2301      	movs	r3, #1
 800573e:	4631      	mov	r1, r6
 8005740:	4628      	mov	r0, r5
 8005742:	9206      	str	r2, [sp, #24]
 8005744:	47b8      	blx	r7
 8005746:	3001      	adds	r0, #1
 8005748:	f43f ae9e 	beq.w	8005488 <_printf_float+0x98>
 800574c:	9b07      	ldr	r3, [sp, #28]
 800574e:	9a06      	ldr	r2, [sp, #24]
 8005750:	3301      	adds	r3, #1
 8005752:	9307      	str	r3, [sp, #28]
 8005754:	e7b9      	b.n	80056ca <_printf_float+0x2da>
 8005756:	9b05      	ldr	r3, [sp, #20]
 8005758:	465a      	mov	r2, fp
 800575a:	4631      	mov	r1, r6
 800575c:	4628      	mov	r0, r5
 800575e:	47b8      	blx	r7
 8005760:	3001      	adds	r0, #1
 8005762:	d1bf      	bne.n	80056e4 <_printf_float+0x2f4>
 8005764:	e690      	b.n	8005488 <_printf_float+0x98>
 8005766:	9a06      	ldr	r2, [sp, #24]
 8005768:	464b      	mov	r3, r9
 800576a:	4442      	add	r2, r8
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	d1c2      	bne.n	80056fc <_printf_float+0x30c>
 8005776:	e687      	b.n	8005488 <_printf_float+0x98>
 8005778:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800577c:	f1b9 0f01 	cmp.w	r9, #1
 8005780:	dc01      	bgt.n	8005786 <_printf_float+0x396>
 8005782:	07db      	lsls	r3, r3, #31
 8005784:	d536      	bpl.n	80057f4 <_printf_float+0x404>
 8005786:	2301      	movs	r3, #1
 8005788:	4642      	mov	r2, r8
 800578a:	4631      	mov	r1, r6
 800578c:	4628      	mov	r0, r5
 800578e:	47b8      	blx	r7
 8005790:	3001      	adds	r0, #1
 8005792:	f43f ae79 	beq.w	8005488 <_printf_float+0x98>
 8005796:	9b05      	ldr	r3, [sp, #20]
 8005798:	465a      	mov	r2, fp
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	f43f ae71 	beq.w	8005488 <_printf_float+0x98>
 80057a6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80057aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80057ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80057b6:	d018      	beq.n	80057ea <_printf_float+0x3fa>
 80057b8:	464b      	mov	r3, r9
 80057ba:	f108 0201 	add.w	r2, r8, #1
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	d10c      	bne.n	80057e2 <_printf_float+0x3f2>
 80057c8:	e65e      	b.n	8005488 <_printf_float+0x98>
 80057ca:	2301      	movs	r3, #1
 80057cc:	465a      	mov	r2, fp
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	f43f ae57 	beq.w	8005488 <_printf_float+0x98>
 80057da:	f108 0801 	add.w	r8, r8, #1
 80057de:	45c8      	cmp	r8, r9
 80057e0:	dbf3      	blt.n	80057ca <_printf_float+0x3da>
 80057e2:	4653      	mov	r3, sl
 80057e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80057e8:	e6dc      	b.n	80055a4 <_printf_float+0x1b4>
 80057ea:	f04f 0800 	mov.w	r8, #0
 80057ee:	f104 0b1a 	add.w	fp, r4, #26
 80057f2:	e7f4      	b.n	80057de <_printf_float+0x3ee>
 80057f4:	2301      	movs	r3, #1
 80057f6:	4642      	mov	r2, r8
 80057f8:	e7e1      	b.n	80057be <_printf_float+0x3ce>
 80057fa:	2301      	movs	r3, #1
 80057fc:	464a      	mov	r2, r9
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	47b8      	blx	r7
 8005804:	3001      	adds	r0, #1
 8005806:	f43f ae3f 	beq.w	8005488 <_printf_float+0x98>
 800580a:	f108 0801 	add.w	r8, r8, #1
 800580e:	68e3      	ldr	r3, [r4, #12]
 8005810:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005812:	1a5b      	subs	r3, r3, r1
 8005814:	4543      	cmp	r3, r8
 8005816:	dcf0      	bgt.n	80057fa <_printf_float+0x40a>
 8005818:	e6f8      	b.n	800560c <_printf_float+0x21c>
 800581a:	f04f 0800 	mov.w	r8, #0
 800581e:	f104 0919 	add.w	r9, r4, #25
 8005822:	e7f4      	b.n	800580e <_printf_float+0x41e>

08005824 <_printf_common>:
 8005824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	4616      	mov	r6, r2
 800582a:	4698      	mov	r8, r3
 800582c:	688a      	ldr	r2, [r1, #8]
 800582e:	690b      	ldr	r3, [r1, #16]
 8005830:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005834:	4293      	cmp	r3, r2
 8005836:	bfb8      	it	lt
 8005838:	4613      	movlt	r3, r2
 800583a:	6033      	str	r3, [r6, #0]
 800583c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005840:	4607      	mov	r7, r0
 8005842:	460c      	mov	r4, r1
 8005844:	b10a      	cbz	r2, 800584a <_printf_common+0x26>
 8005846:	3301      	adds	r3, #1
 8005848:	6033      	str	r3, [r6, #0]
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	0699      	lsls	r1, r3, #26
 800584e:	bf42      	ittt	mi
 8005850:	6833      	ldrmi	r3, [r6, #0]
 8005852:	3302      	addmi	r3, #2
 8005854:	6033      	strmi	r3, [r6, #0]
 8005856:	6825      	ldr	r5, [r4, #0]
 8005858:	f015 0506 	ands.w	r5, r5, #6
 800585c:	d106      	bne.n	800586c <_printf_common+0x48>
 800585e:	f104 0a19 	add.w	sl, r4, #25
 8005862:	68e3      	ldr	r3, [r4, #12]
 8005864:	6832      	ldr	r2, [r6, #0]
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	42ab      	cmp	r3, r5
 800586a:	dc26      	bgt.n	80058ba <_printf_common+0x96>
 800586c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005870:	6822      	ldr	r2, [r4, #0]
 8005872:	3b00      	subs	r3, #0
 8005874:	bf18      	it	ne
 8005876:	2301      	movne	r3, #1
 8005878:	0692      	lsls	r2, r2, #26
 800587a:	d42b      	bmi.n	80058d4 <_printf_common+0xb0>
 800587c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005880:	4641      	mov	r1, r8
 8005882:	4638      	mov	r0, r7
 8005884:	47c8      	blx	r9
 8005886:	3001      	adds	r0, #1
 8005888:	d01e      	beq.n	80058c8 <_printf_common+0xa4>
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	6922      	ldr	r2, [r4, #16]
 800588e:	f003 0306 	and.w	r3, r3, #6
 8005892:	2b04      	cmp	r3, #4
 8005894:	bf02      	ittt	eq
 8005896:	68e5      	ldreq	r5, [r4, #12]
 8005898:	6833      	ldreq	r3, [r6, #0]
 800589a:	1aed      	subeq	r5, r5, r3
 800589c:	68a3      	ldr	r3, [r4, #8]
 800589e:	bf0c      	ite	eq
 80058a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a4:	2500      	movne	r5, #0
 80058a6:	4293      	cmp	r3, r2
 80058a8:	bfc4      	itt	gt
 80058aa:	1a9b      	subgt	r3, r3, r2
 80058ac:	18ed      	addgt	r5, r5, r3
 80058ae:	2600      	movs	r6, #0
 80058b0:	341a      	adds	r4, #26
 80058b2:	42b5      	cmp	r5, r6
 80058b4:	d11a      	bne.n	80058ec <_printf_common+0xc8>
 80058b6:	2000      	movs	r0, #0
 80058b8:	e008      	b.n	80058cc <_printf_common+0xa8>
 80058ba:	2301      	movs	r3, #1
 80058bc:	4652      	mov	r2, sl
 80058be:	4641      	mov	r1, r8
 80058c0:	4638      	mov	r0, r7
 80058c2:	47c8      	blx	r9
 80058c4:	3001      	adds	r0, #1
 80058c6:	d103      	bne.n	80058d0 <_printf_common+0xac>
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d0:	3501      	adds	r5, #1
 80058d2:	e7c6      	b.n	8005862 <_printf_common+0x3e>
 80058d4:	18e1      	adds	r1, r4, r3
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	2030      	movs	r0, #48	@ 0x30
 80058da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058de:	4422      	add	r2, r4
 80058e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058e8:	3302      	adds	r3, #2
 80058ea:	e7c7      	b.n	800587c <_printf_common+0x58>
 80058ec:	2301      	movs	r3, #1
 80058ee:	4622      	mov	r2, r4
 80058f0:	4641      	mov	r1, r8
 80058f2:	4638      	mov	r0, r7
 80058f4:	47c8      	blx	r9
 80058f6:	3001      	adds	r0, #1
 80058f8:	d0e6      	beq.n	80058c8 <_printf_common+0xa4>
 80058fa:	3601      	adds	r6, #1
 80058fc:	e7d9      	b.n	80058b2 <_printf_common+0x8e>
	...

08005900 <_printf_i>:
 8005900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005904:	7e0f      	ldrb	r7, [r1, #24]
 8005906:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005908:	2f78      	cmp	r7, #120	@ 0x78
 800590a:	4691      	mov	r9, r2
 800590c:	4680      	mov	r8, r0
 800590e:	460c      	mov	r4, r1
 8005910:	469a      	mov	sl, r3
 8005912:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005916:	d807      	bhi.n	8005928 <_printf_i+0x28>
 8005918:	2f62      	cmp	r7, #98	@ 0x62
 800591a:	d80a      	bhi.n	8005932 <_printf_i+0x32>
 800591c:	2f00      	cmp	r7, #0
 800591e:	f000 80d2 	beq.w	8005ac6 <_printf_i+0x1c6>
 8005922:	2f58      	cmp	r7, #88	@ 0x58
 8005924:	f000 80b9 	beq.w	8005a9a <_printf_i+0x19a>
 8005928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800592c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005930:	e03a      	b.n	80059a8 <_printf_i+0xa8>
 8005932:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005936:	2b15      	cmp	r3, #21
 8005938:	d8f6      	bhi.n	8005928 <_printf_i+0x28>
 800593a:	a101      	add	r1, pc, #4	@ (adr r1, 8005940 <_printf_i+0x40>)
 800593c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005940:	08005999 	.word	0x08005999
 8005944:	080059ad 	.word	0x080059ad
 8005948:	08005929 	.word	0x08005929
 800594c:	08005929 	.word	0x08005929
 8005950:	08005929 	.word	0x08005929
 8005954:	08005929 	.word	0x08005929
 8005958:	080059ad 	.word	0x080059ad
 800595c:	08005929 	.word	0x08005929
 8005960:	08005929 	.word	0x08005929
 8005964:	08005929 	.word	0x08005929
 8005968:	08005929 	.word	0x08005929
 800596c:	08005aad 	.word	0x08005aad
 8005970:	080059d7 	.word	0x080059d7
 8005974:	08005a67 	.word	0x08005a67
 8005978:	08005929 	.word	0x08005929
 800597c:	08005929 	.word	0x08005929
 8005980:	08005acf 	.word	0x08005acf
 8005984:	08005929 	.word	0x08005929
 8005988:	080059d7 	.word	0x080059d7
 800598c:	08005929 	.word	0x08005929
 8005990:	08005929 	.word	0x08005929
 8005994:	08005a6f 	.word	0x08005a6f
 8005998:	6833      	ldr	r3, [r6, #0]
 800599a:	1d1a      	adds	r2, r3, #4
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6032      	str	r2, [r6, #0]
 80059a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059a8:	2301      	movs	r3, #1
 80059aa:	e09d      	b.n	8005ae8 <_printf_i+0x1e8>
 80059ac:	6833      	ldr	r3, [r6, #0]
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	1d19      	adds	r1, r3, #4
 80059b2:	6031      	str	r1, [r6, #0]
 80059b4:	0606      	lsls	r6, r0, #24
 80059b6:	d501      	bpl.n	80059bc <_printf_i+0xbc>
 80059b8:	681d      	ldr	r5, [r3, #0]
 80059ba:	e003      	b.n	80059c4 <_printf_i+0xc4>
 80059bc:	0645      	lsls	r5, r0, #25
 80059be:	d5fb      	bpl.n	80059b8 <_printf_i+0xb8>
 80059c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059c4:	2d00      	cmp	r5, #0
 80059c6:	da03      	bge.n	80059d0 <_printf_i+0xd0>
 80059c8:	232d      	movs	r3, #45	@ 0x2d
 80059ca:	426d      	negs	r5, r5
 80059cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059d0:	4859      	ldr	r0, [pc, #356]	@ (8005b38 <_printf_i+0x238>)
 80059d2:	230a      	movs	r3, #10
 80059d4:	e011      	b.n	80059fa <_printf_i+0xfa>
 80059d6:	6821      	ldr	r1, [r4, #0]
 80059d8:	6833      	ldr	r3, [r6, #0]
 80059da:	0608      	lsls	r0, r1, #24
 80059dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80059e0:	d402      	bmi.n	80059e8 <_printf_i+0xe8>
 80059e2:	0649      	lsls	r1, r1, #25
 80059e4:	bf48      	it	mi
 80059e6:	b2ad      	uxthmi	r5, r5
 80059e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80059ea:	4853      	ldr	r0, [pc, #332]	@ (8005b38 <_printf_i+0x238>)
 80059ec:	6033      	str	r3, [r6, #0]
 80059ee:	bf14      	ite	ne
 80059f0:	230a      	movne	r3, #10
 80059f2:	2308      	moveq	r3, #8
 80059f4:	2100      	movs	r1, #0
 80059f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059fa:	6866      	ldr	r6, [r4, #4]
 80059fc:	60a6      	str	r6, [r4, #8]
 80059fe:	2e00      	cmp	r6, #0
 8005a00:	bfa2      	ittt	ge
 8005a02:	6821      	ldrge	r1, [r4, #0]
 8005a04:	f021 0104 	bicge.w	r1, r1, #4
 8005a08:	6021      	strge	r1, [r4, #0]
 8005a0a:	b90d      	cbnz	r5, 8005a10 <_printf_i+0x110>
 8005a0c:	2e00      	cmp	r6, #0
 8005a0e:	d04b      	beq.n	8005aa8 <_printf_i+0x1a8>
 8005a10:	4616      	mov	r6, r2
 8005a12:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a16:	fb03 5711 	mls	r7, r3, r1, r5
 8005a1a:	5dc7      	ldrb	r7, [r0, r7]
 8005a1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a20:	462f      	mov	r7, r5
 8005a22:	42bb      	cmp	r3, r7
 8005a24:	460d      	mov	r5, r1
 8005a26:	d9f4      	bls.n	8005a12 <_printf_i+0x112>
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d10b      	bne.n	8005a44 <_printf_i+0x144>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	07df      	lsls	r7, r3, #31
 8005a30:	d508      	bpl.n	8005a44 <_printf_i+0x144>
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	6861      	ldr	r1, [r4, #4]
 8005a36:	4299      	cmp	r1, r3
 8005a38:	bfde      	ittt	le
 8005a3a:	2330      	movle	r3, #48	@ 0x30
 8005a3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a44:	1b92      	subs	r2, r2, r6
 8005a46:	6122      	str	r2, [r4, #16]
 8005a48:	f8cd a000 	str.w	sl, [sp]
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	aa03      	add	r2, sp, #12
 8005a50:	4621      	mov	r1, r4
 8005a52:	4640      	mov	r0, r8
 8005a54:	f7ff fee6 	bl	8005824 <_printf_common>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d14a      	bne.n	8005af2 <_printf_i+0x1f2>
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	b004      	add	sp, #16
 8005a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	f043 0320 	orr.w	r3, r3, #32
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	4833      	ldr	r0, [pc, #204]	@ (8005b3c <_printf_i+0x23c>)
 8005a70:	2778      	movs	r7, #120	@ 0x78
 8005a72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	6831      	ldr	r1, [r6, #0]
 8005a7a:	061f      	lsls	r7, r3, #24
 8005a7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a80:	d402      	bmi.n	8005a88 <_printf_i+0x188>
 8005a82:	065f      	lsls	r7, r3, #25
 8005a84:	bf48      	it	mi
 8005a86:	b2ad      	uxthmi	r5, r5
 8005a88:	6031      	str	r1, [r6, #0]
 8005a8a:	07d9      	lsls	r1, r3, #31
 8005a8c:	bf44      	itt	mi
 8005a8e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a92:	6023      	strmi	r3, [r4, #0]
 8005a94:	b11d      	cbz	r5, 8005a9e <_printf_i+0x19e>
 8005a96:	2310      	movs	r3, #16
 8005a98:	e7ac      	b.n	80059f4 <_printf_i+0xf4>
 8005a9a:	4827      	ldr	r0, [pc, #156]	@ (8005b38 <_printf_i+0x238>)
 8005a9c:	e7e9      	b.n	8005a72 <_printf_i+0x172>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	f023 0320 	bic.w	r3, r3, #32
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	e7f6      	b.n	8005a96 <_printf_i+0x196>
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	e7bd      	b.n	8005a28 <_printf_i+0x128>
 8005aac:	6833      	ldr	r3, [r6, #0]
 8005aae:	6825      	ldr	r5, [r4, #0]
 8005ab0:	6961      	ldr	r1, [r4, #20]
 8005ab2:	1d18      	adds	r0, r3, #4
 8005ab4:	6030      	str	r0, [r6, #0]
 8005ab6:	062e      	lsls	r6, r5, #24
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	d501      	bpl.n	8005ac0 <_printf_i+0x1c0>
 8005abc:	6019      	str	r1, [r3, #0]
 8005abe:	e002      	b.n	8005ac6 <_printf_i+0x1c6>
 8005ac0:	0668      	lsls	r0, r5, #25
 8005ac2:	d5fb      	bpl.n	8005abc <_printf_i+0x1bc>
 8005ac4:	8019      	strh	r1, [r3, #0]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	4616      	mov	r6, r2
 8005acc:	e7bc      	b.n	8005a48 <_printf_i+0x148>
 8005ace:	6833      	ldr	r3, [r6, #0]
 8005ad0:	1d1a      	adds	r2, r3, #4
 8005ad2:	6032      	str	r2, [r6, #0]
 8005ad4:	681e      	ldr	r6, [r3, #0]
 8005ad6:	6862      	ldr	r2, [r4, #4]
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4630      	mov	r0, r6
 8005adc:	f7fa fc00 	bl	80002e0 <memchr>
 8005ae0:	b108      	cbz	r0, 8005ae6 <_printf_i+0x1e6>
 8005ae2:	1b80      	subs	r0, r0, r6
 8005ae4:	6060      	str	r0, [r4, #4]
 8005ae6:	6863      	ldr	r3, [r4, #4]
 8005ae8:	6123      	str	r3, [r4, #16]
 8005aea:	2300      	movs	r3, #0
 8005aec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005af0:	e7aa      	b.n	8005a48 <_printf_i+0x148>
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	4632      	mov	r2, r6
 8005af6:	4649      	mov	r1, r9
 8005af8:	4640      	mov	r0, r8
 8005afa:	47d0      	blx	sl
 8005afc:	3001      	adds	r0, #1
 8005afe:	d0ad      	beq.n	8005a5c <_printf_i+0x15c>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	079b      	lsls	r3, r3, #30
 8005b04:	d413      	bmi.n	8005b2e <_printf_i+0x22e>
 8005b06:	68e0      	ldr	r0, [r4, #12]
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	4298      	cmp	r0, r3
 8005b0c:	bfb8      	it	lt
 8005b0e:	4618      	movlt	r0, r3
 8005b10:	e7a6      	b.n	8005a60 <_printf_i+0x160>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4632      	mov	r2, r6
 8005b16:	4649      	mov	r1, r9
 8005b18:	4640      	mov	r0, r8
 8005b1a:	47d0      	blx	sl
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d09d      	beq.n	8005a5c <_printf_i+0x15c>
 8005b20:	3501      	adds	r5, #1
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	9903      	ldr	r1, [sp, #12]
 8005b26:	1a5b      	subs	r3, r3, r1
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dcf2      	bgt.n	8005b12 <_printf_i+0x212>
 8005b2c:	e7eb      	b.n	8005b06 <_printf_i+0x206>
 8005b2e:	2500      	movs	r5, #0
 8005b30:	f104 0619 	add.w	r6, r4, #25
 8005b34:	e7f5      	b.n	8005b22 <_printf_i+0x222>
 8005b36:	bf00      	nop
 8005b38:	08007e42 	.word	0x08007e42
 8005b3c:	08007e53 	.word	0x08007e53

08005b40 <std>:
 8005b40:	2300      	movs	r3, #0
 8005b42:	b510      	push	{r4, lr}
 8005b44:	4604      	mov	r4, r0
 8005b46:	e9c0 3300 	strd	r3, r3, [r0]
 8005b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b4e:	6083      	str	r3, [r0, #8]
 8005b50:	8181      	strh	r1, [r0, #12]
 8005b52:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b54:	81c2      	strh	r2, [r0, #14]
 8005b56:	6183      	str	r3, [r0, #24]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	305c      	adds	r0, #92	@ 0x5c
 8005b5e:	f000 f9f9 	bl	8005f54 <memset>
 8005b62:	4b0d      	ldr	r3, [pc, #52]	@ (8005b98 <std+0x58>)
 8005b64:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b66:	4b0d      	ldr	r3, [pc, #52]	@ (8005b9c <std+0x5c>)
 8005b68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <std+0x60>)
 8005b6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba4 <std+0x64>)
 8005b70:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba8 <std+0x68>)
 8005b74:	6224      	str	r4, [r4, #32]
 8005b76:	429c      	cmp	r4, r3
 8005b78:	d006      	beq.n	8005b88 <std+0x48>
 8005b7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b7e:	4294      	cmp	r4, r2
 8005b80:	d002      	beq.n	8005b88 <std+0x48>
 8005b82:	33d0      	adds	r3, #208	@ 0xd0
 8005b84:	429c      	cmp	r4, r3
 8005b86:	d105      	bne.n	8005b94 <std+0x54>
 8005b88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b90:	f000 ba5c 	b.w	800604c <__retarget_lock_init_recursive>
 8005b94:	bd10      	pop	{r4, pc}
 8005b96:	bf00      	nop
 8005b98:	08005da5 	.word	0x08005da5
 8005b9c:	08005dc7 	.word	0x08005dc7
 8005ba0:	08005dff 	.word	0x08005dff
 8005ba4:	08005e23 	.word	0x08005e23
 8005ba8:	240002c8 	.word	0x240002c8

08005bac <stdio_exit_handler>:
 8005bac:	4a02      	ldr	r2, [pc, #8]	@ (8005bb8 <stdio_exit_handler+0xc>)
 8005bae:	4903      	ldr	r1, [pc, #12]	@ (8005bbc <stdio_exit_handler+0x10>)
 8005bb0:	4803      	ldr	r0, [pc, #12]	@ (8005bc0 <stdio_exit_handler+0x14>)
 8005bb2:	f000 b869 	b.w	8005c88 <_fwalk_sglue>
 8005bb6:	bf00      	nop
 8005bb8:	24000018 	.word	0x24000018
 8005bbc:	080078a5 	.word	0x080078a5
 8005bc0:	24000028 	.word	0x24000028

08005bc4 <cleanup_stdio>:
 8005bc4:	6841      	ldr	r1, [r0, #4]
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf8 <cleanup_stdio+0x34>)
 8005bc8:	4299      	cmp	r1, r3
 8005bca:	b510      	push	{r4, lr}
 8005bcc:	4604      	mov	r4, r0
 8005bce:	d001      	beq.n	8005bd4 <cleanup_stdio+0x10>
 8005bd0:	f001 fe68 	bl	80078a4 <_fflush_r>
 8005bd4:	68a1      	ldr	r1, [r4, #8]
 8005bd6:	4b09      	ldr	r3, [pc, #36]	@ (8005bfc <cleanup_stdio+0x38>)
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	d002      	beq.n	8005be2 <cleanup_stdio+0x1e>
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f001 fe61 	bl	80078a4 <_fflush_r>
 8005be2:	68e1      	ldr	r1, [r4, #12]
 8005be4:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <cleanup_stdio+0x3c>)
 8005be6:	4299      	cmp	r1, r3
 8005be8:	d004      	beq.n	8005bf4 <cleanup_stdio+0x30>
 8005bea:	4620      	mov	r0, r4
 8005bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf0:	f001 be58 	b.w	80078a4 <_fflush_r>
 8005bf4:	bd10      	pop	{r4, pc}
 8005bf6:	bf00      	nop
 8005bf8:	240002c8 	.word	0x240002c8
 8005bfc:	24000330 	.word	0x24000330
 8005c00:	24000398 	.word	0x24000398

08005c04 <global_stdio_init.part.0>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4b0b      	ldr	r3, [pc, #44]	@ (8005c34 <global_stdio_init.part.0+0x30>)
 8005c08:	4c0b      	ldr	r4, [pc, #44]	@ (8005c38 <global_stdio_init.part.0+0x34>)
 8005c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c3c <global_stdio_init.part.0+0x38>)
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	4620      	mov	r0, r4
 8005c10:	2200      	movs	r2, #0
 8005c12:	2104      	movs	r1, #4
 8005c14:	f7ff ff94 	bl	8005b40 <std>
 8005c18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	2109      	movs	r1, #9
 8005c20:	f7ff ff8e 	bl	8005b40 <std>
 8005c24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c28:	2202      	movs	r2, #2
 8005c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c2e:	2112      	movs	r1, #18
 8005c30:	f7ff bf86 	b.w	8005b40 <std>
 8005c34:	24000400 	.word	0x24000400
 8005c38:	240002c8 	.word	0x240002c8
 8005c3c:	08005bad 	.word	0x08005bad

08005c40 <__sfp_lock_acquire>:
 8005c40:	4801      	ldr	r0, [pc, #4]	@ (8005c48 <__sfp_lock_acquire+0x8>)
 8005c42:	f000 ba04 	b.w	800604e <__retarget_lock_acquire_recursive>
 8005c46:	bf00      	nop
 8005c48:	24000409 	.word	0x24000409

08005c4c <__sfp_lock_release>:
 8005c4c:	4801      	ldr	r0, [pc, #4]	@ (8005c54 <__sfp_lock_release+0x8>)
 8005c4e:	f000 b9ff 	b.w	8006050 <__retarget_lock_release_recursive>
 8005c52:	bf00      	nop
 8005c54:	24000409 	.word	0x24000409

08005c58 <__sinit>:
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	f7ff fff0 	bl	8005c40 <__sfp_lock_acquire>
 8005c60:	6a23      	ldr	r3, [r4, #32]
 8005c62:	b11b      	cbz	r3, 8005c6c <__sinit+0x14>
 8005c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c68:	f7ff bff0 	b.w	8005c4c <__sfp_lock_release>
 8005c6c:	4b04      	ldr	r3, [pc, #16]	@ (8005c80 <__sinit+0x28>)
 8005c6e:	6223      	str	r3, [r4, #32]
 8005c70:	4b04      	ldr	r3, [pc, #16]	@ (8005c84 <__sinit+0x2c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f5      	bne.n	8005c64 <__sinit+0xc>
 8005c78:	f7ff ffc4 	bl	8005c04 <global_stdio_init.part.0>
 8005c7c:	e7f2      	b.n	8005c64 <__sinit+0xc>
 8005c7e:	bf00      	nop
 8005c80:	08005bc5 	.word	0x08005bc5
 8005c84:	24000400 	.word	0x24000400

08005c88 <_fwalk_sglue>:
 8005c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	4688      	mov	r8, r1
 8005c90:	4614      	mov	r4, r2
 8005c92:	2600      	movs	r6, #0
 8005c94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c98:	f1b9 0901 	subs.w	r9, r9, #1
 8005c9c:	d505      	bpl.n	8005caa <_fwalk_sglue+0x22>
 8005c9e:	6824      	ldr	r4, [r4, #0]
 8005ca0:	2c00      	cmp	r4, #0
 8005ca2:	d1f7      	bne.n	8005c94 <_fwalk_sglue+0xc>
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005caa:	89ab      	ldrh	r3, [r5, #12]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d907      	bls.n	8005cc0 <_fwalk_sglue+0x38>
 8005cb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	d003      	beq.n	8005cc0 <_fwalk_sglue+0x38>
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4638      	mov	r0, r7
 8005cbc:	47c0      	blx	r8
 8005cbe:	4306      	orrs	r6, r0
 8005cc0:	3568      	adds	r5, #104	@ 0x68
 8005cc2:	e7e9      	b.n	8005c98 <_fwalk_sglue+0x10>

08005cc4 <iprintf>:
 8005cc4:	b40f      	push	{r0, r1, r2, r3}
 8005cc6:	b507      	push	{r0, r1, r2, lr}
 8005cc8:	4906      	ldr	r1, [pc, #24]	@ (8005ce4 <iprintf+0x20>)
 8005cca:	ab04      	add	r3, sp, #16
 8005ccc:	6808      	ldr	r0, [r1, #0]
 8005cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd2:	6881      	ldr	r1, [r0, #8]
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	f001 fc49 	bl	800756c <_vfiprintf_r>
 8005cda:	b003      	add	sp, #12
 8005cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ce0:	b004      	add	sp, #16
 8005ce2:	4770      	bx	lr
 8005ce4:	24000024 	.word	0x24000024

08005ce8 <_puts_r>:
 8005ce8:	6a03      	ldr	r3, [r0, #32]
 8005cea:	b570      	push	{r4, r5, r6, lr}
 8005cec:	6884      	ldr	r4, [r0, #8]
 8005cee:	4605      	mov	r5, r0
 8005cf0:	460e      	mov	r6, r1
 8005cf2:	b90b      	cbnz	r3, 8005cf8 <_puts_r+0x10>
 8005cf4:	f7ff ffb0 	bl	8005c58 <__sinit>
 8005cf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cfa:	07db      	lsls	r3, r3, #31
 8005cfc:	d405      	bmi.n	8005d0a <_puts_r+0x22>
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	0598      	lsls	r0, r3, #22
 8005d02:	d402      	bmi.n	8005d0a <_puts_r+0x22>
 8005d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d06:	f000 f9a2 	bl	800604e <__retarget_lock_acquire_recursive>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	0719      	lsls	r1, r3, #28
 8005d0e:	d502      	bpl.n	8005d16 <_puts_r+0x2e>
 8005d10:	6923      	ldr	r3, [r4, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d135      	bne.n	8005d82 <_puts_r+0x9a>
 8005d16:	4621      	mov	r1, r4
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 f8c5 	bl	8005ea8 <__swsetup_r>
 8005d1e:	b380      	cbz	r0, 8005d82 <_puts_r+0x9a>
 8005d20:	f04f 35ff 	mov.w	r5, #4294967295
 8005d24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d26:	07da      	lsls	r2, r3, #31
 8005d28:	d405      	bmi.n	8005d36 <_puts_r+0x4e>
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	059b      	lsls	r3, r3, #22
 8005d2e:	d402      	bmi.n	8005d36 <_puts_r+0x4e>
 8005d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d32:	f000 f98d 	bl	8006050 <__retarget_lock_release_recursive>
 8005d36:	4628      	mov	r0, r5
 8005d38:	bd70      	pop	{r4, r5, r6, pc}
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da04      	bge.n	8005d48 <_puts_r+0x60>
 8005d3e:	69a2      	ldr	r2, [r4, #24]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	dc17      	bgt.n	8005d74 <_puts_r+0x8c>
 8005d44:	290a      	cmp	r1, #10
 8005d46:	d015      	beq.n	8005d74 <_puts_r+0x8c>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	6022      	str	r2, [r4, #0]
 8005d4e:	7019      	strb	r1, [r3, #0]
 8005d50:	68a3      	ldr	r3, [r4, #8]
 8005d52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d56:	3b01      	subs	r3, #1
 8005d58:	60a3      	str	r3, [r4, #8]
 8005d5a:	2900      	cmp	r1, #0
 8005d5c:	d1ed      	bne.n	8005d3a <_puts_r+0x52>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	da11      	bge.n	8005d86 <_puts_r+0x9e>
 8005d62:	4622      	mov	r2, r4
 8005d64:	210a      	movs	r1, #10
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 f85f 	bl	8005e2a <__swbuf_r>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d0d7      	beq.n	8005d20 <_puts_r+0x38>
 8005d70:	250a      	movs	r5, #10
 8005d72:	e7d7      	b.n	8005d24 <_puts_r+0x3c>
 8005d74:	4622      	mov	r2, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 f857 	bl	8005e2a <__swbuf_r>
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d1e7      	bne.n	8005d50 <_puts_r+0x68>
 8005d80:	e7ce      	b.n	8005d20 <_puts_r+0x38>
 8005d82:	3e01      	subs	r6, #1
 8005d84:	e7e4      	b.n	8005d50 <_puts_r+0x68>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	6022      	str	r2, [r4, #0]
 8005d8c:	220a      	movs	r2, #10
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	e7ee      	b.n	8005d70 <_puts_r+0x88>
	...

08005d94 <puts>:
 8005d94:	4b02      	ldr	r3, [pc, #8]	@ (8005da0 <puts+0xc>)
 8005d96:	4601      	mov	r1, r0
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	f7ff bfa5 	b.w	8005ce8 <_puts_r>
 8005d9e:	bf00      	nop
 8005da0:	24000024 	.word	0x24000024

08005da4 <__sread>:
 8005da4:	b510      	push	{r4, lr}
 8005da6:	460c      	mov	r4, r1
 8005da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dac:	f000 f900 	bl	8005fb0 <_read_r>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	bfab      	itete	ge
 8005db4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005db6:	89a3      	ldrhlt	r3, [r4, #12]
 8005db8:	181b      	addge	r3, r3, r0
 8005dba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005dbe:	bfac      	ite	ge
 8005dc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005dc2:	81a3      	strhlt	r3, [r4, #12]
 8005dc4:	bd10      	pop	{r4, pc}

08005dc6 <__swrite>:
 8005dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dca:	461f      	mov	r7, r3
 8005dcc:	898b      	ldrh	r3, [r1, #12]
 8005dce:	05db      	lsls	r3, r3, #23
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	4616      	mov	r6, r2
 8005dd6:	d505      	bpl.n	8005de4 <__swrite+0x1e>
 8005dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ddc:	2302      	movs	r3, #2
 8005dde:	2200      	movs	r2, #0
 8005de0:	f000 f8d4 	bl	8005f8c <_lseek_r>
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dee:	81a3      	strh	r3, [r4, #12]
 8005df0:	4632      	mov	r2, r6
 8005df2:	463b      	mov	r3, r7
 8005df4:	4628      	mov	r0, r5
 8005df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfa:	f000 b8eb 	b.w	8005fd4 <_write_r>

08005dfe <__sseek>:
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	460c      	mov	r4, r1
 8005e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e06:	f000 f8c1 	bl	8005f8c <_lseek_r>
 8005e0a:	1c43      	adds	r3, r0, #1
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	bf15      	itete	ne
 8005e10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e1a:	81a3      	strheq	r3, [r4, #12]
 8005e1c:	bf18      	it	ne
 8005e1e:	81a3      	strhne	r3, [r4, #12]
 8005e20:	bd10      	pop	{r4, pc}

08005e22 <__sclose>:
 8005e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e26:	f000 b8a1 	b.w	8005f6c <_close_r>

08005e2a <__swbuf_r>:
 8005e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2c:	460e      	mov	r6, r1
 8005e2e:	4614      	mov	r4, r2
 8005e30:	4605      	mov	r5, r0
 8005e32:	b118      	cbz	r0, 8005e3c <__swbuf_r+0x12>
 8005e34:	6a03      	ldr	r3, [r0, #32]
 8005e36:	b90b      	cbnz	r3, 8005e3c <__swbuf_r+0x12>
 8005e38:	f7ff ff0e 	bl	8005c58 <__sinit>
 8005e3c:	69a3      	ldr	r3, [r4, #24]
 8005e3e:	60a3      	str	r3, [r4, #8]
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	071a      	lsls	r2, r3, #28
 8005e44:	d501      	bpl.n	8005e4a <__swbuf_r+0x20>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	b943      	cbnz	r3, 8005e5c <__swbuf_r+0x32>
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f000 f82b 	bl	8005ea8 <__swsetup_r>
 8005e52:	b118      	cbz	r0, 8005e5c <__swbuf_r+0x32>
 8005e54:	f04f 37ff 	mov.w	r7, #4294967295
 8005e58:	4638      	mov	r0, r7
 8005e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	6922      	ldr	r2, [r4, #16]
 8005e60:	1a98      	subs	r0, r3, r2
 8005e62:	6963      	ldr	r3, [r4, #20]
 8005e64:	b2f6      	uxtb	r6, r6
 8005e66:	4283      	cmp	r3, r0
 8005e68:	4637      	mov	r7, r6
 8005e6a:	dc05      	bgt.n	8005e78 <__swbuf_r+0x4e>
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f001 fd18 	bl	80078a4 <_fflush_r>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d1ed      	bne.n	8005e54 <__swbuf_r+0x2a>
 8005e78:	68a3      	ldr	r3, [r4, #8]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	60a3      	str	r3, [r4, #8]
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	6022      	str	r2, [r4, #0]
 8005e84:	701e      	strb	r6, [r3, #0]
 8005e86:	6962      	ldr	r2, [r4, #20]
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d004      	beq.n	8005e98 <__swbuf_r+0x6e>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	07db      	lsls	r3, r3, #31
 8005e92:	d5e1      	bpl.n	8005e58 <__swbuf_r+0x2e>
 8005e94:	2e0a      	cmp	r6, #10
 8005e96:	d1df      	bne.n	8005e58 <__swbuf_r+0x2e>
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	f001 fd02 	bl	80078a4 <_fflush_r>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d0d9      	beq.n	8005e58 <__swbuf_r+0x2e>
 8005ea4:	e7d6      	b.n	8005e54 <__swbuf_r+0x2a>
	...

08005ea8 <__swsetup_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	4b29      	ldr	r3, [pc, #164]	@ (8005f50 <__swsetup_r+0xa8>)
 8005eac:	4605      	mov	r5, r0
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	b118      	cbz	r0, 8005ebc <__swsetup_r+0x14>
 8005eb4:	6a03      	ldr	r3, [r0, #32]
 8005eb6:	b90b      	cbnz	r3, 8005ebc <__swsetup_r+0x14>
 8005eb8:	f7ff fece 	bl	8005c58 <__sinit>
 8005ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec0:	0719      	lsls	r1, r3, #28
 8005ec2:	d422      	bmi.n	8005f0a <__swsetup_r+0x62>
 8005ec4:	06da      	lsls	r2, r3, #27
 8005ec6:	d407      	bmi.n	8005ed8 <__swsetup_r+0x30>
 8005ec8:	2209      	movs	r2, #9
 8005eca:	602a      	str	r2, [r5, #0]
 8005ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ed0:	81a3      	strh	r3, [r4, #12]
 8005ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed6:	e033      	b.n	8005f40 <__swsetup_r+0x98>
 8005ed8:	0758      	lsls	r0, r3, #29
 8005eda:	d512      	bpl.n	8005f02 <__swsetup_r+0x5a>
 8005edc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ede:	b141      	cbz	r1, 8005ef2 <__swsetup_r+0x4a>
 8005ee0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ee4:	4299      	cmp	r1, r3
 8005ee6:	d002      	beq.n	8005eee <__swsetup_r+0x46>
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f000 fe93 	bl	8006c14 <_free_r>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ef8:	81a3      	strh	r3, [r4, #12]
 8005efa:	2300      	movs	r3, #0
 8005efc:	6063      	str	r3, [r4, #4]
 8005efe:	6923      	ldr	r3, [r4, #16]
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f043 0308 	orr.w	r3, r3, #8
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	6923      	ldr	r3, [r4, #16]
 8005f0c:	b94b      	cbnz	r3, 8005f22 <__swsetup_r+0x7a>
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f18:	d003      	beq.n	8005f22 <__swsetup_r+0x7a>
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f001 fd0f 	bl	8007940 <__smakebuf_r>
 8005f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f26:	f013 0201 	ands.w	r2, r3, #1
 8005f2a:	d00a      	beq.n	8005f42 <__swsetup_r+0x9a>
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	60a2      	str	r2, [r4, #8]
 8005f30:	6962      	ldr	r2, [r4, #20]
 8005f32:	4252      	negs	r2, r2
 8005f34:	61a2      	str	r2, [r4, #24]
 8005f36:	6922      	ldr	r2, [r4, #16]
 8005f38:	b942      	cbnz	r2, 8005f4c <__swsetup_r+0xa4>
 8005f3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f3e:	d1c5      	bne.n	8005ecc <__swsetup_r+0x24>
 8005f40:	bd38      	pop	{r3, r4, r5, pc}
 8005f42:	0799      	lsls	r1, r3, #30
 8005f44:	bf58      	it	pl
 8005f46:	6962      	ldrpl	r2, [r4, #20]
 8005f48:	60a2      	str	r2, [r4, #8]
 8005f4a:	e7f4      	b.n	8005f36 <__swsetup_r+0x8e>
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e7f7      	b.n	8005f40 <__swsetup_r+0x98>
 8005f50:	24000024 	.word	0x24000024

08005f54 <memset>:
 8005f54:	4402      	add	r2, r0
 8005f56:	4603      	mov	r3, r0
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d100      	bne.n	8005f5e <memset+0xa>
 8005f5c:	4770      	bx	lr
 8005f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f62:	e7f9      	b.n	8005f58 <memset+0x4>

08005f64 <_localeconv_r>:
 8005f64:	4800      	ldr	r0, [pc, #0]	@ (8005f68 <_localeconv_r+0x4>)
 8005f66:	4770      	bx	lr
 8005f68:	24000164 	.word	0x24000164

08005f6c <_close_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4d06      	ldr	r5, [pc, #24]	@ (8005f88 <_close_r+0x1c>)
 8005f70:	2300      	movs	r3, #0
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	f7fb fad3 	bl	8001522 <_close>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	d102      	bne.n	8005f86 <_close_r+0x1a>
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	b103      	cbz	r3, 8005f86 <_close_r+0x1a>
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
 8005f88:	24000404 	.word	0x24000404

08005f8c <_lseek_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	4d07      	ldr	r5, [pc, #28]	@ (8005fac <_lseek_r+0x20>)
 8005f90:	4604      	mov	r4, r0
 8005f92:	4608      	mov	r0, r1
 8005f94:	4611      	mov	r1, r2
 8005f96:	2200      	movs	r2, #0
 8005f98:	602a      	str	r2, [r5, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f7fb fae8 	bl	8001570 <_lseek>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_lseek_r+0x1e>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_lseek_r+0x1e>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	24000404 	.word	0x24000404

08005fb0 <_read_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4d07      	ldr	r5, [pc, #28]	@ (8005fd0 <_read_r+0x20>)
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	4608      	mov	r0, r1
 8005fb8:	4611      	mov	r1, r2
 8005fba:	2200      	movs	r2, #0
 8005fbc:	602a      	str	r2, [r5, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f7fb fa92 	bl	80014e8 <_read>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_read_r+0x1e>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_read_r+0x1e>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	24000404 	.word	0x24000404

08005fd4 <_write_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4d07      	ldr	r5, [pc, #28]	@ (8005ff4 <_write_r+0x20>)
 8005fd8:	4604      	mov	r4, r0
 8005fda:	4608      	mov	r0, r1
 8005fdc:	4611      	mov	r1, r2
 8005fde:	2200      	movs	r2, #0
 8005fe0:	602a      	str	r2, [r5, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f7fb f910 	bl	8001208 <_write>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_write_r+0x1e>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_write_r+0x1e>
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	24000404 	.word	0x24000404

08005ff8 <__errno>:
 8005ff8:	4b01      	ldr	r3, [pc, #4]	@ (8006000 <__errno+0x8>)
 8005ffa:	6818      	ldr	r0, [r3, #0]
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	24000024 	.word	0x24000024

08006004 <__libc_init_array>:
 8006004:	b570      	push	{r4, r5, r6, lr}
 8006006:	4d0d      	ldr	r5, [pc, #52]	@ (800603c <__libc_init_array+0x38>)
 8006008:	4c0d      	ldr	r4, [pc, #52]	@ (8006040 <__libc_init_array+0x3c>)
 800600a:	1b64      	subs	r4, r4, r5
 800600c:	10a4      	asrs	r4, r4, #2
 800600e:	2600      	movs	r6, #0
 8006010:	42a6      	cmp	r6, r4
 8006012:	d109      	bne.n	8006028 <__libc_init_array+0x24>
 8006014:	4d0b      	ldr	r5, [pc, #44]	@ (8006044 <__libc_init_array+0x40>)
 8006016:	4c0c      	ldr	r4, [pc, #48]	@ (8006048 <__libc_init_array+0x44>)
 8006018:	f001 fdbe 	bl	8007b98 <_init>
 800601c:	1b64      	subs	r4, r4, r5
 800601e:	10a4      	asrs	r4, r4, #2
 8006020:	2600      	movs	r6, #0
 8006022:	42a6      	cmp	r6, r4
 8006024:	d105      	bne.n	8006032 <__libc_init_array+0x2e>
 8006026:	bd70      	pop	{r4, r5, r6, pc}
 8006028:	f855 3b04 	ldr.w	r3, [r5], #4
 800602c:	4798      	blx	r3
 800602e:	3601      	adds	r6, #1
 8006030:	e7ee      	b.n	8006010 <__libc_init_array+0xc>
 8006032:	f855 3b04 	ldr.w	r3, [r5], #4
 8006036:	4798      	blx	r3
 8006038:	3601      	adds	r6, #1
 800603a:	e7f2      	b.n	8006022 <__libc_init_array+0x1e>
 800603c:	080081a8 	.word	0x080081a8
 8006040:	080081a8 	.word	0x080081a8
 8006044:	080081a8 	.word	0x080081a8
 8006048:	080081ac 	.word	0x080081ac

0800604c <__retarget_lock_init_recursive>:
 800604c:	4770      	bx	lr

0800604e <__retarget_lock_acquire_recursive>:
 800604e:	4770      	bx	lr

08006050 <__retarget_lock_release_recursive>:
 8006050:	4770      	bx	lr

08006052 <quorem>:
 8006052:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006056:	6903      	ldr	r3, [r0, #16]
 8006058:	690c      	ldr	r4, [r1, #16]
 800605a:	42a3      	cmp	r3, r4
 800605c:	4607      	mov	r7, r0
 800605e:	db7e      	blt.n	800615e <quorem+0x10c>
 8006060:	3c01      	subs	r4, #1
 8006062:	f101 0814 	add.w	r8, r1, #20
 8006066:	00a3      	lsls	r3, r4, #2
 8006068:	f100 0514 	add.w	r5, r0, #20
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006078:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800607c:	3301      	adds	r3, #1
 800607e:	429a      	cmp	r2, r3
 8006080:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006084:	fbb2 f6f3 	udiv	r6, r2, r3
 8006088:	d32e      	bcc.n	80060e8 <quorem+0x96>
 800608a:	f04f 0a00 	mov.w	sl, #0
 800608e:	46c4      	mov	ip, r8
 8006090:	46ae      	mov	lr, r5
 8006092:	46d3      	mov	fp, sl
 8006094:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006098:	b298      	uxth	r0, r3
 800609a:	fb06 a000 	mla	r0, r6, r0, sl
 800609e:	0c02      	lsrs	r2, r0, #16
 80060a0:	0c1b      	lsrs	r3, r3, #16
 80060a2:	fb06 2303 	mla	r3, r6, r3, r2
 80060a6:	f8de 2000 	ldr.w	r2, [lr]
 80060aa:	b280      	uxth	r0, r0
 80060ac:	b292      	uxth	r2, r2
 80060ae:	1a12      	subs	r2, r2, r0
 80060b0:	445a      	add	r2, fp
 80060b2:	f8de 0000 	ldr.w	r0, [lr]
 80060b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80060c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80060c4:	b292      	uxth	r2, r2
 80060c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80060ca:	45e1      	cmp	r9, ip
 80060cc:	f84e 2b04 	str.w	r2, [lr], #4
 80060d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80060d4:	d2de      	bcs.n	8006094 <quorem+0x42>
 80060d6:	9b00      	ldr	r3, [sp, #0]
 80060d8:	58eb      	ldr	r3, [r5, r3]
 80060da:	b92b      	cbnz	r3, 80060e8 <quorem+0x96>
 80060dc:	9b01      	ldr	r3, [sp, #4]
 80060de:	3b04      	subs	r3, #4
 80060e0:	429d      	cmp	r5, r3
 80060e2:	461a      	mov	r2, r3
 80060e4:	d32f      	bcc.n	8006146 <quorem+0xf4>
 80060e6:	613c      	str	r4, [r7, #16]
 80060e8:	4638      	mov	r0, r7
 80060ea:	f001 f90d 	bl	8007308 <__mcmp>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	db25      	blt.n	800613e <quorem+0xec>
 80060f2:	4629      	mov	r1, r5
 80060f4:	2000      	movs	r0, #0
 80060f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80060fa:	f8d1 c000 	ldr.w	ip, [r1]
 80060fe:	fa1f fe82 	uxth.w	lr, r2
 8006102:	fa1f f38c 	uxth.w	r3, ip
 8006106:	eba3 030e 	sub.w	r3, r3, lr
 800610a:	4403      	add	r3, r0
 800610c:	0c12      	lsrs	r2, r2, #16
 800610e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006112:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006116:	b29b      	uxth	r3, r3
 8006118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800611c:	45c1      	cmp	r9, r8
 800611e:	f841 3b04 	str.w	r3, [r1], #4
 8006122:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006126:	d2e6      	bcs.n	80060f6 <quorem+0xa4>
 8006128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800612c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006130:	b922      	cbnz	r2, 800613c <quorem+0xea>
 8006132:	3b04      	subs	r3, #4
 8006134:	429d      	cmp	r5, r3
 8006136:	461a      	mov	r2, r3
 8006138:	d30b      	bcc.n	8006152 <quorem+0x100>
 800613a:	613c      	str	r4, [r7, #16]
 800613c:	3601      	adds	r6, #1
 800613e:	4630      	mov	r0, r6
 8006140:	b003      	add	sp, #12
 8006142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	3b04      	subs	r3, #4
 800614a:	2a00      	cmp	r2, #0
 800614c:	d1cb      	bne.n	80060e6 <quorem+0x94>
 800614e:	3c01      	subs	r4, #1
 8006150:	e7c6      	b.n	80060e0 <quorem+0x8e>
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	3b04      	subs	r3, #4
 8006156:	2a00      	cmp	r2, #0
 8006158:	d1ef      	bne.n	800613a <quorem+0xe8>
 800615a:	3c01      	subs	r4, #1
 800615c:	e7ea      	b.n	8006134 <quorem+0xe2>
 800615e:	2000      	movs	r0, #0
 8006160:	e7ee      	b.n	8006140 <quorem+0xee>
 8006162:	0000      	movs	r0, r0
 8006164:	0000      	movs	r0, r0
	...

08006168 <_dtoa_r>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	ed2d 8b02 	vpush	{d8}
 8006170:	69c7      	ldr	r7, [r0, #28]
 8006172:	b091      	sub	sp, #68	@ 0x44
 8006174:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006178:	ec55 4b10 	vmov	r4, r5, d0
 800617c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800617e:	9107      	str	r1, [sp, #28]
 8006180:	4681      	mov	r9, r0
 8006182:	9209      	str	r2, [sp, #36]	@ 0x24
 8006184:	930d      	str	r3, [sp, #52]	@ 0x34
 8006186:	b97f      	cbnz	r7, 80061a8 <_dtoa_r+0x40>
 8006188:	2010      	movs	r0, #16
 800618a:	f000 fd8d 	bl	8006ca8 <malloc>
 800618e:	4602      	mov	r2, r0
 8006190:	f8c9 001c 	str.w	r0, [r9, #28]
 8006194:	b920      	cbnz	r0, 80061a0 <_dtoa_r+0x38>
 8006196:	4ba0      	ldr	r3, [pc, #640]	@ (8006418 <_dtoa_r+0x2b0>)
 8006198:	21ef      	movs	r1, #239	@ 0xef
 800619a:	48a0      	ldr	r0, [pc, #640]	@ (800641c <_dtoa_r+0x2b4>)
 800619c:	f001 fc4c 	bl	8007a38 <__assert_func>
 80061a0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061a4:	6007      	str	r7, [r0, #0]
 80061a6:	60c7      	str	r7, [r0, #12]
 80061a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061ac:	6819      	ldr	r1, [r3, #0]
 80061ae:	b159      	cbz	r1, 80061c8 <_dtoa_r+0x60>
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	604a      	str	r2, [r1, #4]
 80061b4:	2301      	movs	r3, #1
 80061b6:	4093      	lsls	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
 80061ba:	4648      	mov	r0, r9
 80061bc:	f000 fe6a 	bl	8006e94 <_Bfree>
 80061c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	1e2b      	subs	r3, r5, #0
 80061ca:	bfbb      	ittet	lt
 80061cc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80061d0:	9303      	strlt	r3, [sp, #12]
 80061d2:	2300      	movge	r3, #0
 80061d4:	2201      	movlt	r2, #1
 80061d6:	bfac      	ite	ge
 80061d8:	6033      	strge	r3, [r6, #0]
 80061da:	6032      	strlt	r2, [r6, #0]
 80061dc:	4b90      	ldr	r3, [pc, #576]	@ (8006420 <_dtoa_r+0x2b8>)
 80061de:	9e03      	ldr	r6, [sp, #12]
 80061e0:	43b3      	bics	r3, r6
 80061e2:	d110      	bne.n	8006206 <_dtoa_r+0x9e>
 80061e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80061e6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80061f0:	4323      	orrs	r3, r4
 80061f2:	f000 84de 	beq.w	8006bb2 <_dtoa_r+0xa4a>
 80061f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80061f8:	4f8a      	ldr	r7, [pc, #552]	@ (8006424 <_dtoa_r+0x2bc>)
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 84e0 	beq.w	8006bc0 <_dtoa_r+0xa58>
 8006200:	1cfb      	adds	r3, r7, #3
 8006202:	f000 bcdb 	b.w	8006bbc <_dtoa_r+0xa54>
 8006206:	ed9d 8b02 	vldr	d8, [sp, #8]
 800620a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800620e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006212:	d10a      	bne.n	800622a <_dtoa_r+0xc2>
 8006214:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006216:	2301      	movs	r3, #1
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800621c:	b113      	cbz	r3, 8006224 <_dtoa_r+0xbc>
 800621e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006220:	4b81      	ldr	r3, [pc, #516]	@ (8006428 <_dtoa_r+0x2c0>)
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	4f81      	ldr	r7, [pc, #516]	@ (800642c <_dtoa_r+0x2c4>)
 8006226:	f000 bccb 	b.w	8006bc0 <_dtoa_r+0xa58>
 800622a:	aa0e      	add	r2, sp, #56	@ 0x38
 800622c:	a90f      	add	r1, sp, #60	@ 0x3c
 800622e:	4648      	mov	r0, r9
 8006230:	eeb0 0b48 	vmov.f64	d0, d8
 8006234:	f001 f918 	bl	8007468 <__d2b>
 8006238:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800623c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800623e:	9001      	str	r0, [sp, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d045      	beq.n	80062d0 <_dtoa_r+0x168>
 8006244:	eeb0 7b48 	vmov.f64	d7, d8
 8006248:	ee18 1a90 	vmov	r1, s17
 800624c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006250:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8006254:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006258:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800625c:	2500      	movs	r5, #0
 800625e:	ee07 1a90 	vmov	s15, r1
 8006262:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8006266:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006400 <_dtoa_r+0x298>
 800626a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800626e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8006408 <_dtoa_r+0x2a0>
 8006272:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006276:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006410 <_dtoa_r+0x2a8>
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006282:	eeb0 7b46 	vmov.f64	d7, d6
 8006286:	eea4 7b05 	vfma.f64	d7, d4, d5
 800628a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800628e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006296:	ee16 8a90 	vmov	r8, s13
 800629a:	d508      	bpl.n	80062ae <_dtoa_r+0x146>
 800629c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80062a0:	eeb4 6b47 	vcmp.f64	d6, d7
 80062a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a8:	bf18      	it	ne
 80062aa:	f108 38ff 	addne.w	r8, r8, #4294967295
 80062ae:	f1b8 0f16 	cmp.w	r8, #22
 80062b2:	d82b      	bhi.n	800630c <_dtoa_r+0x1a4>
 80062b4:	495e      	ldr	r1, [pc, #376]	@ (8006430 <_dtoa_r+0x2c8>)
 80062b6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80062ba:	ed91 7b00 	vldr	d7, [r1]
 80062be:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80062c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c6:	d501      	bpl.n	80062cc <_dtoa_r+0x164>
 80062c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80062cc:	2100      	movs	r1, #0
 80062ce:	e01e      	b.n	800630e <_dtoa_r+0x1a6>
 80062d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062d2:	4413      	add	r3, r2
 80062d4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80062d8:	2920      	cmp	r1, #32
 80062da:	bfc1      	itttt	gt
 80062dc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80062e0:	408e      	lslgt	r6, r1
 80062e2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80062e6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80062ea:	bfd6      	itet	le
 80062ec:	f1c1 0120 	rsble	r1, r1, #32
 80062f0:	4331      	orrgt	r1, r6
 80062f2:	fa04 f101 	lslle.w	r1, r4, r1
 80062f6:	ee07 1a90 	vmov	s15, r1
 80062fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80062fe:	3b01      	subs	r3, #1
 8006300:	ee17 1a90 	vmov	r1, s15
 8006304:	2501      	movs	r5, #1
 8006306:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800630a:	e7a8      	b.n	800625e <_dtoa_r+0xf6>
 800630c:	2101      	movs	r1, #1
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	1e53      	subs	r3, r2, #1
 8006312:	9306      	str	r3, [sp, #24]
 8006314:	bf45      	ittet	mi
 8006316:	f1c2 0301 	rsbmi	r3, r2, #1
 800631a:	9305      	strmi	r3, [sp, #20]
 800631c:	2300      	movpl	r3, #0
 800631e:	2300      	movmi	r3, #0
 8006320:	bf4c      	ite	mi
 8006322:	9306      	strmi	r3, [sp, #24]
 8006324:	9305      	strpl	r3, [sp, #20]
 8006326:	f1b8 0f00 	cmp.w	r8, #0
 800632a:	910c      	str	r1, [sp, #48]	@ 0x30
 800632c:	db18      	blt.n	8006360 <_dtoa_r+0x1f8>
 800632e:	9b06      	ldr	r3, [sp, #24]
 8006330:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006334:	4443      	add	r3, r8
 8006336:	9306      	str	r3, [sp, #24]
 8006338:	2300      	movs	r3, #0
 800633a:	9a07      	ldr	r2, [sp, #28]
 800633c:	2a09      	cmp	r2, #9
 800633e:	d849      	bhi.n	80063d4 <_dtoa_r+0x26c>
 8006340:	2a05      	cmp	r2, #5
 8006342:	bfc4      	itt	gt
 8006344:	3a04      	subgt	r2, #4
 8006346:	9207      	strgt	r2, [sp, #28]
 8006348:	9a07      	ldr	r2, [sp, #28]
 800634a:	f1a2 0202 	sub.w	r2, r2, #2
 800634e:	bfcc      	ite	gt
 8006350:	2400      	movgt	r4, #0
 8006352:	2401      	movle	r4, #1
 8006354:	2a03      	cmp	r2, #3
 8006356:	d848      	bhi.n	80063ea <_dtoa_r+0x282>
 8006358:	e8df f002 	tbb	[pc, r2]
 800635c:	3a2c2e0b 	.word	0x3a2c2e0b
 8006360:	9b05      	ldr	r3, [sp, #20]
 8006362:	2200      	movs	r2, #0
 8006364:	eba3 0308 	sub.w	r3, r3, r8
 8006368:	9305      	str	r3, [sp, #20]
 800636a:	920a      	str	r2, [sp, #40]	@ 0x28
 800636c:	f1c8 0300 	rsb	r3, r8, #0
 8006370:	e7e3      	b.n	800633a <_dtoa_r+0x1d2>
 8006372:	2200      	movs	r2, #0
 8006374:	9208      	str	r2, [sp, #32]
 8006376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006378:	2a00      	cmp	r2, #0
 800637a:	dc39      	bgt.n	80063f0 <_dtoa_r+0x288>
 800637c:	f04f 0b01 	mov.w	fp, #1
 8006380:	46da      	mov	sl, fp
 8006382:	465a      	mov	r2, fp
 8006384:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8006388:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800638c:	2100      	movs	r1, #0
 800638e:	2004      	movs	r0, #4
 8006390:	f100 0614 	add.w	r6, r0, #20
 8006394:	4296      	cmp	r6, r2
 8006396:	d930      	bls.n	80063fa <_dtoa_r+0x292>
 8006398:	6079      	str	r1, [r7, #4]
 800639a:	4648      	mov	r0, r9
 800639c:	9304      	str	r3, [sp, #16]
 800639e:	f000 fd39 	bl	8006e14 <_Balloc>
 80063a2:	9b04      	ldr	r3, [sp, #16]
 80063a4:	4607      	mov	r7, r0
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d146      	bne.n	8006438 <_dtoa_r+0x2d0>
 80063aa:	4b22      	ldr	r3, [pc, #136]	@ (8006434 <_dtoa_r+0x2cc>)
 80063ac:	4602      	mov	r2, r0
 80063ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80063b2:	e6f2      	b.n	800619a <_dtoa_r+0x32>
 80063b4:	2201      	movs	r2, #1
 80063b6:	e7dd      	b.n	8006374 <_dtoa_r+0x20c>
 80063b8:	2200      	movs	r2, #0
 80063ba:	9208      	str	r2, [sp, #32]
 80063bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063be:	eb08 0b02 	add.w	fp, r8, r2
 80063c2:	f10b 0a01 	add.w	sl, fp, #1
 80063c6:	4652      	mov	r2, sl
 80063c8:	2a01      	cmp	r2, #1
 80063ca:	bfb8      	it	lt
 80063cc:	2201      	movlt	r2, #1
 80063ce:	e7db      	b.n	8006388 <_dtoa_r+0x220>
 80063d0:	2201      	movs	r2, #1
 80063d2:	e7f2      	b.n	80063ba <_dtoa_r+0x252>
 80063d4:	2401      	movs	r4, #1
 80063d6:	2200      	movs	r2, #0
 80063d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80063dc:	f04f 3bff 	mov.w	fp, #4294967295
 80063e0:	2100      	movs	r1, #0
 80063e2:	46da      	mov	sl, fp
 80063e4:	2212      	movs	r2, #18
 80063e6:	9109      	str	r1, [sp, #36]	@ 0x24
 80063e8:	e7ce      	b.n	8006388 <_dtoa_r+0x220>
 80063ea:	2201      	movs	r2, #1
 80063ec:	9208      	str	r2, [sp, #32]
 80063ee:	e7f5      	b.n	80063dc <_dtoa_r+0x274>
 80063f0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80063f4:	46da      	mov	sl, fp
 80063f6:	465a      	mov	r2, fp
 80063f8:	e7c6      	b.n	8006388 <_dtoa_r+0x220>
 80063fa:	3101      	adds	r1, #1
 80063fc:	0040      	lsls	r0, r0, #1
 80063fe:	e7c7      	b.n	8006390 <_dtoa_r+0x228>
 8006400:	636f4361 	.word	0x636f4361
 8006404:	3fd287a7 	.word	0x3fd287a7
 8006408:	8b60c8b3 	.word	0x8b60c8b3
 800640c:	3fc68a28 	.word	0x3fc68a28
 8006410:	509f79fb 	.word	0x509f79fb
 8006414:	3fd34413 	.word	0x3fd34413
 8006418:	08007e71 	.word	0x08007e71
 800641c:	08007e88 	.word	0x08007e88
 8006420:	7ff00000 	.word	0x7ff00000
 8006424:	08007e6d 	.word	0x08007e6d
 8006428:	08007e41 	.word	0x08007e41
 800642c:	08007e40 	.word	0x08007e40
 8006430:	08007f80 	.word	0x08007f80
 8006434:	08007ee0 	.word	0x08007ee0
 8006438:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800643c:	f1ba 0f0e 	cmp.w	sl, #14
 8006440:	6010      	str	r0, [r2, #0]
 8006442:	d86f      	bhi.n	8006524 <_dtoa_r+0x3bc>
 8006444:	2c00      	cmp	r4, #0
 8006446:	d06d      	beq.n	8006524 <_dtoa_r+0x3bc>
 8006448:	f1b8 0f00 	cmp.w	r8, #0
 800644c:	f340 80c2 	ble.w	80065d4 <_dtoa_r+0x46c>
 8006450:	4aca      	ldr	r2, [pc, #808]	@ (800677c <_dtoa_r+0x614>)
 8006452:	f008 010f 	and.w	r1, r8, #15
 8006456:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800645a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800645e:	ed92 7b00 	vldr	d7, [r2]
 8006462:	ea4f 1128 	mov.w	r1, r8, asr #4
 8006466:	f000 80a9 	beq.w	80065bc <_dtoa_r+0x454>
 800646a:	4ac5      	ldr	r2, [pc, #788]	@ (8006780 <_dtoa_r+0x618>)
 800646c:	ed92 6b08 	vldr	d6, [r2, #32]
 8006470:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006474:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006478:	f001 010f 	and.w	r1, r1, #15
 800647c:	2203      	movs	r2, #3
 800647e:	48c0      	ldr	r0, [pc, #768]	@ (8006780 <_dtoa_r+0x618>)
 8006480:	2900      	cmp	r1, #0
 8006482:	f040 809d 	bne.w	80065c0 <_dtoa_r+0x458>
 8006486:	ed9d 6b02 	vldr	d6, [sp, #8]
 800648a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800648e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006492:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006494:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006498:	2900      	cmp	r1, #0
 800649a:	f000 80c1 	beq.w	8006620 <_dtoa_r+0x4b8>
 800649e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80064a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80064a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064aa:	f140 80b9 	bpl.w	8006620 <_dtoa_r+0x4b8>
 80064ae:	f1ba 0f00 	cmp.w	sl, #0
 80064b2:	f000 80b5 	beq.w	8006620 <_dtoa_r+0x4b8>
 80064b6:	f1bb 0f00 	cmp.w	fp, #0
 80064ba:	dd31      	ble.n	8006520 <_dtoa_r+0x3b8>
 80064bc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80064c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80064c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80064c8:	f108 31ff 	add.w	r1, r8, #4294967295
 80064cc:	9104      	str	r1, [sp, #16]
 80064ce:	3201      	adds	r2, #1
 80064d0:	465c      	mov	r4, fp
 80064d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80064d6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80064da:	ee07 2a90 	vmov	s15, r2
 80064de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80064e6:	ee15 2a90 	vmov	r2, s11
 80064ea:	ec51 0b15 	vmov	r0, r1, d5
 80064ee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80064f2:	2c00      	cmp	r4, #0
 80064f4:	f040 8098 	bne.w	8006628 <_dtoa_r+0x4c0>
 80064f8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80064fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006500:	ec41 0b17 	vmov	d7, r0, r1
 8006504:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800650c:	f300 8261 	bgt.w	80069d2 <_dtoa_r+0x86a>
 8006510:	eeb1 7b47 	vneg.f64	d7, d7
 8006514:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651c:	f100 80f5 	bmi.w	800670a <_dtoa_r+0x5a2>
 8006520:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006524:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006526:	2a00      	cmp	r2, #0
 8006528:	f2c0 812c 	blt.w	8006784 <_dtoa_r+0x61c>
 800652c:	f1b8 0f0e 	cmp.w	r8, #14
 8006530:	f300 8128 	bgt.w	8006784 <_dtoa_r+0x61c>
 8006534:	4b91      	ldr	r3, [pc, #580]	@ (800677c <_dtoa_r+0x614>)
 8006536:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800653a:	ed93 6b00 	vldr	d6, [r3]
 800653e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	da03      	bge.n	800654c <_dtoa_r+0x3e4>
 8006544:	f1ba 0f00 	cmp.w	sl, #0
 8006548:	f340 80d2 	ble.w	80066f0 <_dtoa_r+0x588>
 800654c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8006550:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006554:	463e      	mov	r6, r7
 8006556:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800655a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800655e:	ee15 3a10 	vmov	r3, s10
 8006562:	3330      	adds	r3, #48	@ 0x30
 8006564:	f806 3b01 	strb.w	r3, [r6], #1
 8006568:	1bf3      	subs	r3, r6, r7
 800656a:	459a      	cmp	sl, r3
 800656c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006570:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006574:	f040 80f8 	bne.w	8006768 <_dtoa_r+0x600>
 8006578:	ee37 7b07 	vadd.f64	d7, d7, d7
 800657c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006584:	f300 80dd 	bgt.w	8006742 <_dtoa_r+0x5da>
 8006588:	eeb4 7b46 	vcmp.f64	d7, d6
 800658c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006590:	d104      	bne.n	800659c <_dtoa_r+0x434>
 8006592:	ee15 3a10 	vmov	r3, s10
 8006596:	07db      	lsls	r3, r3, #31
 8006598:	f100 80d3 	bmi.w	8006742 <_dtoa_r+0x5da>
 800659c:	9901      	ldr	r1, [sp, #4]
 800659e:	4648      	mov	r0, r9
 80065a0:	f000 fc78 	bl	8006e94 <_Bfree>
 80065a4:	2300      	movs	r3, #0
 80065a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80065a8:	7033      	strb	r3, [r6, #0]
 80065aa:	f108 0301 	add.w	r3, r8, #1
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8304 	beq.w	8006bc0 <_dtoa_r+0xa58>
 80065b8:	601e      	str	r6, [r3, #0]
 80065ba:	e301      	b.n	8006bc0 <_dtoa_r+0xa58>
 80065bc:	2202      	movs	r2, #2
 80065be:	e75e      	b.n	800647e <_dtoa_r+0x316>
 80065c0:	07cc      	lsls	r4, r1, #31
 80065c2:	d504      	bpl.n	80065ce <_dtoa_r+0x466>
 80065c4:	ed90 6b00 	vldr	d6, [r0]
 80065c8:	3201      	adds	r2, #1
 80065ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80065ce:	1049      	asrs	r1, r1, #1
 80065d0:	3008      	adds	r0, #8
 80065d2:	e755      	b.n	8006480 <_dtoa_r+0x318>
 80065d4:	d022      	beq.n	800661c <_dtoa_r+0x4b4>
 80065d6:	f1c8 0100 	rsb	r1, r8, #0
 80065da:	4a68      	ldr	r2, [pc, #416]	@ (800677c <_dtoa_r+0x614>)
 80065dc:	f001 000f 	and.w	r0, r1, #15
 80065e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80065e4:	ed92 7b00 	vldr	d7, [r2]
 80065e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80065ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80065f0:	4863      	ldr	r0, [pc, #396]	@ (8006780 <_dtoa_r+0x618>)
 80065f2:	1109      	asrs	r1, r1, #4
 80065f4:	2400      	movs	r4, #0
 80065f6:	2202      	movs	r2, #2
 80065f8:	b929      	cbnz	r1, 8006606 <_dtoa_r+0x49e>
 80065fa:	2c00      	cmp	r4, #0
 80065fc:	f43f af49 	beq.w	8006492 <_dtoa_r+0x32a>
 8006600:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006604:	e745      	b.n	8006492 <_dtoa_r+0x32a>
 8006606:	07ce      	lsls	r6, r1, #31
 8006608:	d505      	bpl.n	8006616 <_dtoa_r+0x4ae>
 800660a:	ed90 6b00 	vldr	d6, [r0]
 800660e:	3201      	adds	r2, #1
 8006610:	2401      	movs	r4, #1
 8006612:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006616:	1049      	asrs	r1, r1, #1
 8006618:	3008      	adds	r0, #8
 800661a:	e7ed      	b.n	80065f8 <_dtoa_r+0x490>
 800661c:	2202      	movs	r2, #2
 800661e:	e738      	b.n	8006492 <_dtoa_r+0x32a>
 8006620:	f8cd 8010 	str.w	r8, [sp, #16]
 8006624:	4654      	mov	r4, sl
 8006626:	e754      	b.n	80064d2 <_dtoa_r+0x36a>
 8006628:	4a54      	ldr	r2, [pc, #336]	@ (800677c <_dtoa_r+0x614>)
 800662a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800662e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006632:	9a08      	ldr	r2, [sp, #32]
 8006634:	ec41 0b17 	vmov	d7, r0, r1
 8006638:	443c      	add	r4, r7
 800663a:	b34a      	cbz	r2, 8006690 <_dtoa_r+0x528>
 800663c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8006640:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8006644:	463e      	mov	r6, r7
 8006646:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800664a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800664e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006652:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006656:	ee14 2a90 	vmov	r2, s9
 800665a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800665e:	3230      	adds	r2, #48	@ 0x30
 8006660:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006664:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666c:	f806 2b01 	strb.w	r2, [r6], #1
 8006670:	d438      	bmi.n	80066e4 <_dtoa_r+0x57c>
 8006672:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006676:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800667a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667e:	d462      	bmi.n	8006746 <_dtoa_r+0x5de>
 8006680:	42a6      	cmp	r6, r4
 8006682:	f43f af4d 	beq.w	8006520 <_dtoa_r+0x3b8>
 8006686:	ee27 7b03 	vmul.f64	d7, d7, d3
 800668a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800668e:	e7e0      	b.n	8006652 <_dtoa_r+0x4ea>
 8006690:	4621      	mov	r1, r4
 8006692:	463e      	mov	r6, r7
 8006694:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006698:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800669c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80066a0:	ee14 2a90 	vmov	r2, s9
 80066a4:	3230      	adds	r2, #48	@ 0x30
 80066a6:	f806 2b01 	strb.w	r2, [r6], #1
 80066aa:	42a6      	cmp	r6, r4
 80066ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80066b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80066b4:	d119      	bne.n	80066ea <_dtoa_r+0x582>
 80066b6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80066ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 80066be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80066c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c6:	dc3e      	bgt.n	8006746 <_dtoa_r+0x5de>
 80066c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80066cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80066d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d4:	f57f af24 	bpl.w	8006520 <_dtoa_r+0x3b8>
 80066d8:	460e      	mov	r6, r1
 80066da:	3901      	subs	r1, #1
 80066dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80066e0:	2b30      	cmp	r3, #48	@ 0x30
 80066e2:	d0f9      	beq.n	80066d8 <_dtoa_r+0x570>
 80066e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80066e8:	e758      	b.n	800659c <_dtoa_r+0x434>
 80066ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 80066ee:	e7d5      	b.n	800669c <_dtoa_r+0x534>
 80066f0:	d10b      	bne.n	800670a <_dtoa_r+0x5a2>
 80066f2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80066f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80066fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006706:	f2c0 8161 	blt.w	80069cc <_dtoa_r+0x864>
 800670a:	2400      	movs	r4, #0
 800670c:	4625      	mov	r5, r4
 800670e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006710:	43db      	mvns	r3, r3
 8006712:	9304      	str	r3, [sp, #16]
 8006714:	463e      	mov	r6, r7
 8006716:	f04f 0800 	mov.w	r8, #0
 800671a:	4621      	mov	r1, r4
 800671c:	4648      	mov	r0, r9
 800671e:	f000 fbb9 	bl	8006e94 <_Bfree>
 8006722:	2d00      	cmp	r5, #0
 8006724:	d0de      	beq.n	80066e4 <_dtoa_r+0x57c>
 8006726:	f1b8 0f00 	cmp.w	r8, #0
 800672a:	d005      	beq.n	8006738 <_dtoa_r+0x5d0>
 800672c:	45a8      	cmp	r8, r5
 800672e:	d003      	beq.n	8006738 <_dtoa_r+0x5d0>
 8006730:	4641      	mov	r1, r8
 8006732:	4648      	mov	r0, r9
 8006734:	f000 fbae 	bl	8006e94 <_Bfree>
 8006738:	4629      	mov	r1, r5
 800673a:	4648      	mov	r0, r9
 800673c:	f000 fbaa 	bl	8006e94 <_Bfree>
 8006740:	e7d0      	b.n	80066e4 <_dtoa_r+0x57c>
 8006742:	f8cd 8010 	str.w	r8, [sp, #16]
 8006746:	4633      	mov	r3, r6
 8006748:	461e      	mov	r6, r3
 800674a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800674e:	2a39      	cmp	r2, #57	@ 0x39
 8006750:	d106      	bne.n	8006760 <_dtoa_r+0x5f8>
 8006752:	429f      	cmp	r7, r3
 8006754:	d1f8      	bne.n	8006748 <_dtoa_r+0x5e0>
 8006756:	9a04      	ldr	r2, [sp, #16]
 8006758:	3201      	adds	r2, #1
 800675a:	9204      	str	r2, [sp, #16]
 800675c:	2230      	movs	r2, #48	@ 0x30
 800675e:	703a      	strb	r2, [r7, #0]
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	3201      	adds	r2, #1
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	e7bd      	b.n	80066e4 <_dtoa_r+0x57c>
 8006768:	ee27 7b04 	vmul.f64	d7, d7, d4
 800676c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006774:	f47f aeef 	bne.w	8006556 <_dtoa_r+0x3ee>
 8006778:	e710      	b.n	800659c <_dtoa_r+0x434>
 800677a:	bf00      	nop
 800677c:	08007f80 	.word	0x08007f80
 8006780:	08007f58 	.word	0x08007f58
 8006784:	9908      	ldr	r1, [sp, #32]
 8006786:	2900      	cmp	r1, #0
 8006788:	f000 80e3 	beq.w	8006952 <_dtoa_r+0x7ea>
 800678c:	9907      	ldr	r1, [sp, #28]
 800678e:	2901      	cmp	r1, #1
 8006790:	f300 80c8 	bgt.w	8006924 <_dtoa_r+0x7bc>
 8006794:	2d00      	cmp	r5, #0
 8006796:	f000 80c1 	beq.w	800691c <_dtoa_r+0x7b4>
 800679a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800679e:	9e05      	ldr	r6, [sp, #20]
 80067a0:	461c      	mov	r4, r3
 80067a2:	9304      	str	r3, [sp, #16]
 80067a4:	9b05      	ldr	r3, [sp, #20]
 80067a6:	4413      	add	r3, r2
 80067a8:	9305      	str	r3, [sp, #20]
 80067aa:	9b06      	ldr	r3, [sp, #24]
 80067ac:	2101      	movs	r1, #1
 80067ae:	4413      	add	r3, r2
 80067b0:	4648      	mov	r0, r9
 80067b2:	9306      	str	r3, [sp, #24]
 80067b4:	f000 fc22 	bl	8006ffc <__i2b>
 80067b8:	9b04      	ldr	r3, [sp, #16]
 80067ba:	4605      	mov	r5, r0
 80067bc:	b166      	cbz	r6, 80067d8 <_dtoa_r+0x670>
 80067be:	9a06      	ldr	r2, [sp, #24]
 80067c0:	2a00      	cmp	r2, #0
 80067c2:	dd09      	ble.n	80067d8 <_dtoa_r+0x670>
 80067c4:	42b2      	cmp	r2, r6
 80067c6:	9905      	ldr	r1, [sp, #20]
 80067c8:	bfa8      	it	ge
 80067ca:	4632      	movge	r2, r6
 80067cc:	1a89      	subs	r1, r1, r2
 80067ce:	9105      	str	r1, [sp, #20]
 80067d0:	9906      	ldr	r1, [sp, #24]
 80067d2:	1ab6      	subs	r6, r6, r2
 80067d4:	1a8a      	subs	r2, r1, r2
 80067d6:	9206      	str	r2, [sp, #24]
 80067d8:	b1fb      	cbz	r3, 800681a <_dtoa_r+0x6b2>
 80067da:	9a08      	ldr	r2, [sp, #32]
 80067dc:	2a00      	cmp	r2, #0
 80067de:	f000 80bc 	beq.w	800695a <_dtoa_r+0x7f2>
 80067e2:	b19c      	cbz	r4, 800680c <_dtoa_r+0x6a4>
 80067e4:	4629      	mov	r1, r5
 80067e6:	4622      	mov	r2, r4
 80067e8:	4648      	mov	r0, r9
 80067ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067ec:	f000 fcc6 	bl	800717c <__pow5mult>
 80067f0:	9a01      	ldr	r2, [sp, #4]
 80067f2:	4601      	mov	r1, r0
 80067f4:	4605      	mov	r5, r0
 80067f6:	4648      	mov	r0, r9
 80067f8:	f000 fc16 	bl	8007028 <__multiply>
 80067fc:	9901      	ldr	r1, [sp, #4]
 80067fe:	9004      	str	r0, [sp, #16]
 8006800:	4648      	mov	r0, r9
 8006802:	f000 fb47 	bl	8006e94 <_Bfree>
 8006806:	9a04      	ldr	r2, [sp, #16]
 8006808:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800680a:	9201      	str	r2, [sp, #4]
 800680c:	1b1a      	subs	r2, r3, r4
 800680e:	d004      	beq.n	800681a <_dtoa_r+0x6b2>
 8006810:	9901      	ldr	r1, [sp, #4]
 8006812:	4648      	mov	r0, r9
 8006814:	f000 fcb2 	bl	800717c <__pow5mult>
 8006818:	9001      	str	r0, [sp, #4]
 800681a:	2101      	movs	r1, #1
 800681c:	4648      	mov	r0, r9
 800681e:	f000 fbed 	bl	8006ffc <__i2b>
 8006822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006824:	4604      	mov	r4, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 81d0 	beq.w	8006bcc <_dtoa_r+0xa64>
 800682c:	461a      	mov	r2, r3
 800682e:	4601      	mov	r1, r0
 8006830:	4648      	mov	r0, r9
 8006832:	f000 fca3 	bl	800717c <__pow5mult>
 8006836:	9b07      	ldr	r3, [sp, #28]
 8006838:	2b01      	cmp	r3, #1
 800683a:	4604      	mov	r4, r0
 800683c:	f300 8095 	bgt.w	800696a <_dtoa_r+0x802>
 8006840:	9b02      	ldr	r3, [sp, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f040 808b 	bne.w	800695e <_dtoa_r+0x7f6>
 8006848:	9b03      	ldr	r3, [sp, #12]
 800684a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800684e:	2a00      	cmp	r2, #0
 8006850:	f040 8087 	bne.w	8006962 <_dtoa_r+0x7fa>
 8006854:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006858:	0d12      	lsrs	r2, r2, #20
 800685a:	0512      	lsls	r2, r2, #20
 800685c:	2a00      	cmp	r2, #0
 800685e:	f000 8082 	beq.w	8006966 <_dtoa_r+0x7fe>
 8006862:	9b05      	ldr	r3, [sp, #20]
 8006864:	3301      	adds	r3, #1
 8006866:	9305      	str	r3, [sp, #20]
 8006868:	9b06      	ldr	r3, [sp, #24]
 800686a:	3301      	adds	r3, #1
 800686c:	9306      	str	r3, [sp, #24]
 800686e:	2301      	movs	r3, #1
 8006870:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 81af 	beq.w	8006bd8 <_dtoa_r+0xa70>
 800687a:	6922      	ldr	r2, [r4, #16]
 800687c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006880:	6910      	ldr	r0, [r2, #16]
 8006882:	f000 fb6f 	bl	8006f64 <__hi0bits>
 8006886:	f1c0 0020 	rsb	r0, r0, #32
 800688a:	9b06      	ldr	r3, [sp, #24]
 800688c:	4418      	add	r0, r3
 800688e:	f010 001f 	ands.w	r0, r0, #31
 8006892:	d076      	beq.n	8006982 <_dtoa_r+0x81a>
 8006894:	f1c0 0220 	rsb	r2, r0, #32
 8006898:	2a04      	cmp	r2, #4
 800689a:	dd69      	ble.n	8006970 <_dtoa_r+0x808>
 800689c:	9b05      	ldr	r3, [sp, #20]
 800689e:	f1c0 001c 	rsb	r0, r0, #28
 80068a2:	4403      	add	r3, r0
 80068a4:	9305      	str	r3, [sp, #20]
 80068a6:	9b06      	ldr	r3, [sp, #24]
 80068a8:	4406      	add	r6, r0
 80068aa:	4403      	add	r3, r0
 80068ac:	9306      	str	r3, [sp, #24]
 80068ae:	9b05      	ldr	r3, [sp, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dd05      	ble.n	80068c0 <_dtoa_r+0x758>
 80068b4:	9901      	ldr	r1, [sp, #4]
 80068b6:	461a      	mov	r2, r3
 80068b8:	4648      	mov	r0, r9
 80068ba:	f000 fcb9 	bl	8007230 <__lshift>
 80068be:	9001      	str	r0, [sp, #4]
 80068c0:	9b06      	ldr	r3, [sp, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	dd05      	ble.n	80068d2 <_dtoa_r+0x76a>
 80068c6:	4621      	mov	r1, r4
 80068c8:	461a      	mov	r2, r3
 80068ca:	4648      	mov	r0, r9
 80068cc:	f000 fcb0 	bl	8007230 <__lshift>
 80068d0:	4604      	mov	r4, r0
 80068d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d056      	beq.n	8006986 <_dtoa_r+0x81e>
 80068d8:	9801      	ldr	r0, [sp, #4]
 80068da:	4621      	mov	r1, r4
 80068dc:	f000 fd14 	bl	8007308 <__mcmp>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	da50      	bge.n	8006986 <_dtoa_r+0x81e>
 80068e4:	f108 33ff 	add.w	r3, r8, #4294967295
 80068e8:	9304      	str	r3, [sp, #16]
 80068ea:	9901      	ldr	r1, [sp, #4]
 80068ec:	2300      	movs	r3, #0
 80068ee:	220a      	movs	r2, #10
 80068f0:	4648      	mov	r0, r9
 80068f2:	f000 faf1 	bl	8006ed8 <__multadd>
 80068f6:	9b08      	ldr	r3, [sp, #32]
 80068f8:	9001      	str	r0, [sp, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 816e 	beq.w	8006bdc <_dtoa_r+0xa74>
 8006900:	4629      	mov	r1, r5
 8006902:	2300      	movs	r3, #0
 8006904:	220a      	movs	r2, #10
 8006906:	4648      	mov	r0, r9
 8006908:	f000 fae6 	bl	8006ed8 <__multadd>
 800690c:	f1bb 0f00 	cmp.w	fp, #0
 8006910:	4605      	mov	r5, r0
 8006912:	dc64      	bgt.n	80069de <_dtoa_r+0x876>
 8006914:	9b07      	ldr	r3, [sp, #28]
 8006916:	2b02      	cmp	r3, #2
 8006918:	dc3e      	bgt.n	8006998 <_dtoa_r+0x830>
 800691a:	e060      	b.n	80069de <_dtoa_r+0x876>
 800691c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800691e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006922:	e73c      	b.n	800679e <_dtoa_r+0x636>
 8006924:	f10a 34ff 	add.w	r4, sl, #4294967295
 8006928:	42a3      	cmp	r3, r4
 800692a:	bfbf      	itttt	lt
 800692c:	1ae2      	sublt	r2, r4, r3
 800692e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006930:	189b      	addlt	r3, r3, r2
 8006932:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8006934:	bfae      	itee	ge
 8006936:	1b1c      	subge	r4, r3, r4
 8006938:	4623      	movlt	r3, r4
 800693a:	2400      	movlt	r4, #0
 800693c:	f1ba 0f00 	cmp.w	sl, #0
 8006940:	bfb5      	itete	lt
 8006942:	9a05      	ldrlt	r2, [sp, #20]
 8006944:	9e05      	ldrge	r6, [sp, #20]
 8006946:	eba2 060a 	sublt.w	r6, r2, sl
 800694a:	4652      	movge	r2, sl
 800694c:	bfb8      	it	lt
 800694e:	2200      	movlt	r2, #0
 8006950:	e727      	b.n	80067a2 <_dtoa_r+0x63a>
 8006952:	9e05      	ldr	r6, [sp, #20]
 8006954:	9d08      	ldr	r5, [sp, #32]
 8006956:	461c      	mov	r4, r3
 8006958:	e730      	b.n	80067bc <_dtoa_r+0x654>
 800695a:	461a      	mov	r2, r3
 800695c:	e758      	b.n	8006810 <_dtoa_r+0x6a8>
 800695e:	2300      	movs	r3, #0
 8006960:	e786      	b.n	8006870 <_dtoa_r+0x708>
 8006962:	9b02      	ldr	r3, [sp, #8]
 8006964:	e784      	b.n	8006870 <_dtoa_r+0x708>
 8006966:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006968:	e783      	b.n	8006872 <_dtoa_r+0x70a>
 800696a:	2300      	movs	r3, #0
 800696c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800696e:	e784      	b.n	800687a <_dtoa_r+0x712>
 8006970:	d09d      	beq.n	80068ae <_dtoa_r+0x746>
 8006972:	9b05      	ldr	r3, [sp, #20]
 8006974:	321c      	adds	r2, #28
 8006976:	4413      	add	r3, r2
 8006978:	9305      	str	r3, [sp, #20]
 800697a:	9b06      	ldr	r3, [sp, #24]
 800697c:	4416      	add	r6, r2
 800697e:	4413      	add	r3, r2
 8006980:	e794      	b.n	80068ac <_dtoa_r+0x744>
 8006982:	4602      	mov	r2, r0
 8006984:	e7f5      	b.n	8006972 <_dtoa_r+0x80a>
 8006986:	f1ba 0f00 	cmp.w	sl, #0
 800698a:	f8cd 8010 	str.w	r8, [sp, #16]
 800698e:	46d3      	mov	fp, sl
 8006990:	dc21      	bgt.n	80069d6 <_dtoa_r+0x86e>
 8006992:	9b07      	ldr	r3, [sp, #28]
 8006994:	2b02      	cmp	r3, #2
 8006996:	dd1e      	ble.n	80069d6 <_dtoa_r+0x86e>
 8006998:	f1bb 0f00 	cmp.w	fp, #0
 800699c:	f47f aeb7 	bne.w	800670e <_dtoa_r+0x5a6>
 80069a0:	4621      	mov	r1, r4
 80069a2:	465b      	mov	r3, fp
 80069a4:	2205      	movs	r2, #5
 80069a6:	4648      	mov	r0, r9
 80069a8:	f000 fa96 	bl	8006ed8 <__multadd>
 80069ac:	4601      	mov	r1, r0
 80069ae:	4604      	mov	r4, r0
 80069b0:	9801      	ldr	r0, [sp, #4]
 80069b2:	f000 fca9 	bl	8007308 <__mcmp>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	f77f aea9 	ble.w	800670e <_dtoa_r+0x5a6>
 80069bc:	463e      	mov	r6, r7
 80069be:	2331      	movs	r3, #49	@ 0x31
 80069c0:	f806 3b01 	strb.w	r3, [r6], #1
 80069c4:	9b04      	ldr	r3, [sp, #16]
 80069c6:	3301      	adds	r3, #1
 80069c8:	9304      	str	r3, [sp, #16]
 80069ca:	e6a4      	b.n	8006716 <_dtoa_r+0x5ae>
 80069cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80069d0:	4654      	mov	r4, sl
 80069d2:	4625      	mov	r5, r4
 80069d4:	e7f2      	b.n	80069bc <_dtoa_r+0x854>
 80069d6:	9b08      	ldr	r3, [sp, #32]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8103 	beq.w	8006be4 <_dtoa_r+0xa7c>
 80069de:	2e00      	cmp	r6, #0
 80069e0:	dd05      	ble.n	80069ee <_dtoa_r+0x886>
 80069e2:	4629      	mov	r1, r5
 80069e4:	4632      	mov	r2, r6
 80069e6:	4648      	mov	r0, r9
 80069e8:	f000 fc22 	bl	8007230 <__lshift>
 80069ec:	4605      	mov	r5, r0
 80069ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d058      	beq.n	8006aa6 <_dtoa_r+0x93e>
 80069f4:	6869      	ldr	r1, [r5, #4]
 80069f6:	4648      	mov	r0, r9
 80069f8:	f000 fa0c 	bl	8006e14 <_Balloc>
 80069fc:	4606      	mov	r6, r0
 80069fe:	b928      	cbnz	r0, 8006a0c <_dtoa_r+0x8a4>
 8006a00:	4b82      	ldr	r3, [pc, #520]	@ (8006c0c <_dtoa_r+0xaa4>)
 8006a02:	4602      	mov	r2, r0
 8006a04:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a08:	f7ff bbc7 	b.w	800619a <_dtoa_r+0x32>
 8006a0c:	692a      	ldr	r2, [r5, #16]
 8006a0e:	3202      	adds	r2, #2
 8006a10:	0092      	lsls	r2, r2, #2
 8006a12:	f105 010c 	add.w	r1, r5, #12
 8006a16:	300c      	adds	r0, #12
 8006a18:	f001 f800 	bl	8007a1c <memcpy>
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4648      	mov	r0, r9
 8006a22:	f000 fc05 	bl	8007230 <__lshift>
 8006a26:	1c7b      	adds	r3, r7, #1
 8006a28:	9305      	str	r3, [sp, #20]
 8006a2a:	eb07 030b 	add.w	r3, r7, fp
 8006a2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a30:	9b02      	ldr	r3, [sp, #8]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	46a8      	mov	r8, r5
 8006a38:	9308      	str	r3, [sp, #32]
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	9b05      	ldr	r3, [sp, #20]
 8006a3e:	9801      	ldr	r0, [sp, #4]
 8006a40:	4621      	mov	r1, r4
 8006a42:	f103 3bff 	add.w	fp, r3, #4294967295
 8006a46:	f7ff fb04 	bl	8006052 <quorem>
 8006a4a:	4641      	mov	r1, r8
 8006a4c:	9002      	str	r0, [sp, #8]
 8006a4e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006a52:	9801      	ldr	r0, [sp, #4]
 8006a54:	f000 fc58 	bl	8007308 <__mcmp>
 8006a58:	462a      	mov	r2, r5
 8006a5a:	9006      	str	r0, [sp, #24]
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4648      	mov	r0, r9
 8006a60:	f000 fc6e 	bl	8007340 <__mdiff>
 8006a64:	68c2      	ldr	r2, [r0, #12]
 8006a66:	4606      	mov	r6, r0
 8006a68:	b9fa      	cbnz	r2, 8006aaa <_dtoa_r+0x942>
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	9801      	ldr	r0, [sp, #4]
 8006a6e:	f000 fc4b 	bl	8007308 <__mcmp>
 8006a72:	4602      	mov	r2, r0
 8006a74:	4631      	mov	r1, r6
 8006a76:	4648      	mov	r0, r9
 8006a78:	920a      	str	r2, [sp, #40]	@ 0x28
 8006a7a:	f000 fa0b 	bl	8006e94 <_Bfree>
 8006a7e:	9b07      	ldr	r3, [sp, #28]
 8006a80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a82:	9e05      	ldr	r6, [sp, #20]
 8006a84:	ea43 0102 	orr.w	r1, r3, r2
 8006a88:	9b08      	ldr	r3, [sp, #32]
 8006a8a:	4319      	orrs	r1, r3
 8006a8c:	d10f      	bne.n	8006aae <_dtoa_r+0x946>
 8006a8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006a92:	d028      	beq.n	8006ae6 <_dtoa_r+0x97e>
 8006a94:	9b06      	ldr	r3, [sp, #24]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dd02      	ble.n	8006aa0 <_dtoa_r+0x938>
 8006a9a:	9b02      	ldr	r3, [sp, #8]
 8006a9c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8006aa0:	f88b a000 	strb.w	sl, [fp]
 8006aa4:	e639      	b.n	800671a <_dtoa_r+0x5b2>
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	e7bd      	b.n	8006a26 <_dtoa_r+0x8be>
 8006aaa:	2201      	movs	r2, #1
 8006aac:	e7e2      	b.n	8006a74 <_dtoa_r+0x90c>
 8006aae:	9b06      	ldr	r3, [sp, #24]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	db04      	blt.n	8006abe <_dtoa_r+0x956>
 8006ab4:	9907      	ldr	r1, [sp, #28]
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	9908      	ldr	r1, [sp, #32]
 8006aba:	430b      	orrs	r3, r1
 8006abc:	d120      	bne.n	8006b00 <_dtoa_r+0x998>
 8006abe:	2a00      	cmp	r2, #0
 8006ac0:	ddee      	ble.n	8006aa0 <_dtoa_r+0x938>
 8006ac2:	9901      	ldr	r1, [sp, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	4648      	mov	r0, r9
 8006ac8:	f000 fbb2 	bl	8007230 <__lshift>
 8006acc:	4621      	mov	r1, r4
 8006ace:	9001      	str	r0, [sp, #4]
 8006ad0:	f000 fc1a 	bl	8007308 <__mcmp>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	dc03      	bgt.n	8006ae0 <_dtoa_r+0x978>
 8006ad8:	d1e2      	bne.n	8006aa0 <_dtoa_r+0x938>
 8006ada:	f01a 0f01 	tst.w	sl, #1
 8006ade:	d0df      	beq.n	8006aa0 <_dtoa_r+0x938>
 8006ae0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006ae4:	d1d9      	bne.n	8006a9a <_dtoa_r+0x932>
 8006ae6:	2339      	movs	r3, #57	@ 0x39
 8006ae8:	f88b 3000 	strb.w	r3, [fp]
 8006aec:	4633      	mov	r3, r6
 8006aee:	461e      	mov	r6, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006af6:	2a39      	cmp	r2, #57	@ 0x39
 8006af8:	d053      	beq.n	8006ba2 <_dtoa_r+0xa3a>
 8006afa:	3201      	adds	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	e60c      	b.n	800671a <_dtoa_r+0x5b2>
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	dd07      	ble.n	8006b14 <_dtoa_r+0x9ac>
 8006b04:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006b08:	d0ed      	beq.n	8006ae6 <_dtoa_r+0x97e>
 8006b0a:	f10a 0301 	add.w	r3, sl, #1
 8006b0e:	f88b 3000 	strb.w	r3, [fp]
 8006b12:	e602      	b.n	800671a <_dtoa_r+0x5b2>
 8006b14:	9b05      	ldr	r3, [sp, #20]
 8006b16:	9a05      	ldr	r2, [sp, #20]
 8006b18:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d029      	beq.n	8006b76 <_dtoa_r+0xa0e>
 8006b22:	9901      	ldr	r1, [sp, #4]
 8006b24:	2300      	movs	r3, #0
 8006b26:	220a      	movs	r2, #10
 8006b28:	4648      	mov	r0, r9
 8006b2a:	f000 f9d5 	bl	8006ed8 <__multadd>
 8006b2e:	45a8      	cmp	r8, r5
 8006b30:	9001      	str	r0, [sp, #4]
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	f04f 020a 	mov.w	r2, #10
 8006b3a:	4641      	mov	r1, r8
 8006b3c:	4648      	mov	r0, r9
 8006b3e:	d107      	bne.n	8006b50 <_dtoa_r+0x9e8>
 8006b40:	f000 f9ca 	bl	8006ed8 <__multadd>
 8006b44:	4680      	mov	r8, r0
 8006b46:	4605      	mov	r5, r0
 8006b48:	9b05      	ldr	r3, [sp, #20]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	9305      	str	r3, [sp, #20]
 8006b4e:	e775      	b.n	8006a3c <_dtoa_r+0x8d4>
 8006b50:	f000 f9c2 	bl	8006ed8 <__multadd>
 8006b54:	4629      	mov	r1, r5
 8006b56:	4680      	mov	r8, r0
 8006b58:	2300      	movs	r3, #0
 8006b5a:	220a      	movs	r2, #10
 8006b5c:	4648      	mov	r0, r9
 8006b5e:	f000 f9bb 	bl	8006ed8 <__multadd>
 8006b62:	4605      	mov	r5, r0
 8006b64:	e7f0      	b.n	8006b48 <_dtoa_r+0x9e0>
 8006b66:	f1bb 0f00 	cmp.w	fp, #0
 8006b6a:	bfcc      	ite	gt
 8006b6c:	465e      	movgt	r6, fp
 8006b6e:	2601      	movle	r6, #1
 8006b70:	443e      	add	r6, r7
 8006b72:	f04f 0800 	mov.w	r8, #0
 8006b76:	9901      	ldr	r1, [sp, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	4648      	mov	r0, r9
 8006b7c:	f000 fb58 	bl	8007230 <__lshift>
 8006b80:	4621      	mov	r1, r4
 8006b82:	9001      	str	r0, [sp, #4]
 8006b84:	f000 fbc0 	bl	8007308 <__mcmp>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	dcaf      	bgt.n	8006aec <_dtoa_r+0x984>
 8006b8c:	d102      	bne.n	8006b94 <_dtoa_r+0xa2c>
 8006b8e:	f01a 0f01 	tst.w	sl, #1
 8006b92:	d1ab      	bne.n	8006aec <_dtoa_r+0x984>
 8006b94:	4633      	mov	r3, r6
 8006b96:	461e      	mov	r6, r3
 8006b98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b9c:	2a30      	cmp	r2, #48	@ 0x30
 8006b9e:	d0fa      	beq.n	8006b96 <_dtoa_r+0xa2e>
 8006ba0:	e5bb      	b.n	800671a <_dtoa_r+0x5b2>
 8006ba2:	429f      	cmp	r7, r3
 8006ba4:	d1a3      	bne.n	8006aee <_dtoa_r+0x986>
 8006ba6:	9b04      	ldr	r3, [sp, #16]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	9304      	str	r3, [sp, #16]
 8006bac:	2331      	movs	r3, #49	@ 0x31
 8006bae:	703b      	strb	r3, [r7, #0]
 8006bb0:	e5b3      	b.n	800671a <_dtoa_r+0x5b2>
 8006bb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006bb4:	4f16      	ldr	r7, [pc, #88]	@ (8006c10 <_dtoa_r+0xaa8>)
 8006bb6:	b11b      	cbz	r3, 8006bc0 <_dtoa_r+0xa58>
 8006bb8:	f107 0308 	add.w	r3, r7, #8
 8006bbc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	b011      	add	sp, #68	@ 0x44
 8006bc4:	ecbd 8b02 	vpop	{d8}
 8006bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bcc:	9b07      	ldr	r3, [sp, #28]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	f77f ae36 	ble.w	8006840 <_dtoa_r+0x6d8>
 8006bd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bd8:	2001      	movs	r0, #1
 8006bda:	e656      	b.n	800688a <_dtoa_r+0x722>
 8006bdc:	f1bb 0f00 	cmp.w	fp, #0
 8006be0:	f77f aed7 	ble.w	8006992 <_dtoa_r+0x82a>
 8006be4:	463e      	mov	r6, r7
 8006be6:	9801      	ldr	r0, [sp, #4]
 8006be8:	4621      	mov	r1, r4
 8006bea:	f7ff fa32 	bl	8006052 <quorem>
 8006bee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006bf2:	f806 ab01 	strb.w	sl, [r6], #1
 8006bf6:	1bf2      	subs	r2, r6, r7
 8006bf8:	4593      	cmp	fp, r2
 8006bfa:	ddb4      	ble.n	8006b66 <_dtoa_r+0x9fe>
 8006bfc:	9901      	ldr	r1, [sp, #4]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	220a      	movs	r2, #10
 8006c02:	4648      	mov	r0, r9
 8006c04:	f000 f968 	bl	8006ed8 <__multadd>
 8006c08:	9001      	str	r0, [sp, #4]
 8006c0a:	e7ec      	b.n	8006be6 <_dtoa_r+0xa7e>
 8006c0c:	08007ee0 	.word	0x08007ee0
 8006c10:	08007e64 	.word	0x08007e64

08006c14 <_free_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	4605      	mov	r5, r0
 8006c18:	2900      	cmp	r1, #0
 8006c1a:	d041      	beq.n	8006ca0 <_free_r+0x8c>
 8006c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c20:	1f0c      	subs	r4, r1, #4
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	bfb8      	it	lt
 8006c26:	18e4      	addlt	r4, r4, r3
 8006c28:	f000 f8e8 	bl	8006dfc <__malloc_lock>
 8006c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca4 <_free_r+0x90>)
 8006c2e:	6813      	ldr	r3, [r2, #0]
 8006c30:	b933      	cbnz	r3, 8006c40 <_free_r+0x2c>
 8006c32:	6063      	str	r3, [r4, #4]
 8006c34:	6014      	str	r4, [r2, #0]
 8006c36:	4628      	mov	r0, r5
 8006c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c3c:	f000 b8e4 	b.w	8006e08 <__malloc_unlock>
 8006c40:	42a3      	cmp	r3, r4
 8006c42:	d908      	bls.n	8006c56 <_free_r+0x42>
 8006c44:	6820      	ldr	r0, [r4, #0]
 8006c46:	1821      	adds	r1, r4, r0
 8006c48:	428b      	cmp	r3, r1
 8006c4a:	bf01      	itttt	eq
 8006c4c:	6819      	ldreq	r1, [r3, #0]
 8006c4e:	685b      	ldreq	r3, [r3, #4]
 8006c50:	1809      	addeq	r1, r1, r0
 8006c52:	6021      	streq	r1, [r4, #0]
 8006c54:	e7ed      	b.n	8006c32 <_free_r+0x1e>
 8006c56:	461a      	mov	r2, r3
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	b10b      	cbz	r3, 8006c60 <_free_r+0x4c>
 8006c5c:	42a3      	cmp	r3, r4
 8006c5e:	d9fa      	bls.n	8006c56 <_free_r+0x42>
 8006c60:	6811      	ldr	r1, [r2, #0]
 8006c62:	1850      	adds	r0, r2, r1
 8006c64:	42a0      	cmp	r0, r4
 8006c66:	d10b      	bne.n	8006c80 <_free_r+0x6c>
 8006c68:	6820      	ldr	r0, [r4, #0]
 8006c6a:	4401      	add	r1, r0
 8006c6c:	1850      	adds	r0, r2, r1
 8006c6e:	4283      	cmp	r3, r0
 8006c70:	6011      	str	r1, [r2, #0]
 8006c72:	d1e0      	bne.n	8006c36 <_free_r+0x22>
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	6053      	str	r3, [r2, #4]
 8006c7a:	4408      	add	r0, r1
 8006c7c:	6010      	str	r0, [r2, #0]
 8006c7e:	e7da      	b.n	8006c36 <_free_r+0x22>
 8006c80:	d902      	bls.n	8006c88 <_free_r+0x74>
 8006c82:	230c      	movs	r3, #12
 8006c84:	602b      	str	r3, [r5, #0]
 8006c86:	e7d6      	b.n	8006c36 <_free_r+0x22>
 8006c88:	6820      	ldr	r0, [r4, #0]
 8006c8a:	1821      	adds	r1, r4, r0
 8006c8c:	428b      	cmp	r3, r1
 8006c8e:	bf04      	itt	eq
 8006c90:	6819      	ldreq	r1, [r3, #0]
 8006c92:	685b      	ldreq	r3, [r3, #4]
 8006c94:	6063      	str	r3, [r4, #4]
 8006c96:	bf04      	itt	eq
 8006c98:	1809      	addeq	r1, r1, r0
 8006c9a:	6021      	streq	r1, [r4, #0]
 8006c9c:	6054      	str	r4, [r2, #4]
 8006c9e:	e7ca      	b.n	8006c36 <_free_r+0x22>
 8006ca0:	bd38      	pop	{r3, r4, r5, pc}
 8006ca2:	bf00      	nop
 8006ca4:	24000410 	.word	0x24000410

08006ca8 <malloc>:
 8006ca8:	4b02      	ldr	r3, [pc, #8]	@ (8006cb4 <malloc+0xc>)
 8006caa:	4601      	mov	r1, r0
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	f000 b825 	b.w	8006cfc <_malloc_r>
 8006cb2:	bf00      	nop
 8006cb4:	24000024 	.word	0x24000024

08006cb8 <sbrk_aligned>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4e0f      	ldr	r6, [pc, #60]	@ (8006cf8 <sbrk_aligned+0x40>)
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	6831      	ldr	r1, [r6, #0]
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	b911      	cbnz	r1, 8006cca <sbrk_aligned+0x12>
 8006cc4:	f000 fe9a 	bl	80079fc <_sbrk_r>
 8006cc8:	6030      	str	r0, [r6, #0]
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f000 fe95 	bl	80079fc <_sbrk_r>
 8006cd2:	1c43      	adds	r3, r0, #1
 8006cd4:	d103      	bne.n	8006cde <sbrk_aligned+0x26>
 8006cd6:	f04f 34ff 	mov.w	r4, #4294967295
 8006cda:	4620      	mov	r0, r4
 8006cdc:	bd70      	pop	{r4, r5, r6, pc}
 8006cde:	1cc4      	adds	r4, r0, #3
 8006ce0:	f024 0403 	bic.w	r4, r4, #3
 8006ce4:	42a0      	cmp	r0, r4
 8006ce6:	d0f8      	beq.n	8006cda <sbrk_aligned+0x22>
 8006ce8:	1a21      	subs	r1, r4, r0
 8006cea:	4628      	mov	r0, r5
 8006cec:	f000 fe86 	bl	80079fc <_sbrk_r>
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d1f2      	bne.n	8006cda <sbrk_aligned+0x22>
 8006cf4:	e7ef      	b.n	8006cd6 <sbrk_aligned+0x1e>
 8006cf6:	bf00      	nop
 8006cf8:	2400040c 	.word	0x2400040c

08006cfc <_malloc_r>:
 8006cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d00:	1ccd      	adds	r5, r1, #3
 8006d02:	f025 0503 	bic.w	r5, r5, #3
 8006d06:	3508      	adds	r5, #8
 8006d08:	2d0c      	cmp	r5, #12
 8006d0a:	bf38      	it	cc
 8006d0c:	250c      	movcc	r5, #12
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	4606      	mov	r6, r0
 8006d12:	db01      	blt.n	8006d18 <_malloc_r+0x1c>
 8006d14:	42a9      	cmp	r1, r5
 8006d16:	d904      	bls.n	8006d22 <_malloc_r+0x26>
 8006d18:	230c      	movs	r3, #12
 8006d1a:	6033      	str	r3, [r6, #0]
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006df8 <_malloc_r+0xfc>
 8006d26:	f000 f869 	bl	8006dfc <__malloc_lock>
 8006d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d2e:	461c      	mov	r4, r3
 8006d30:	bb44      	cbnz	r4, 8006d84 <_malloc_r+0x88>
 8006d32:	4629      	mov	r1, r5
 8006d34:	4630      	mov	r0, r6
 8006d36:	f7ff ffbf 	bl	8006cb8 <sbrk_aligned>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	d158      	bne.n	8006df2 <_malloc_r+0xf6>
 8006d40:	f8d8 4000 	ldr.w	r4, [r8]
 8006d44:	4627      	mov	r7, r4
 8006d46:	2f00      	cmp	r7, #0
 8006d48:	d143      	bne.n	8006dd2 <_malloc_r+0xd6>
 8006d4a:	2c00      	cmp	r4, #0
 8006d4c:	d04b      	beq.n	8006de6 <_malloc_r+0xea>
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	4639      	mov	r1, r7
 8006d52:	4630      	mov	r0, r6
 8006d54:	eb04 0903 	add.w	r9, r4, r3
 8006d58:	f000 fe50 	bl	80079fc <_sbrk_r>
 8006d5c:	4581      	cmp	r9, r0
 8006d5e:	d142      	bne.n	8006de6 <_malloc_r+0xea>
 8006d60:	6821      	ldr	r1, [r4, #0]
 8006d62:	1a6d      	subs	r5, r5, r1
 8006d64:	4629      	mov	r1, r5
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7ff ffa6 	bl	8006cb8 <sbrk_aligned>
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d03a      	beq.n	8006de6 <_malloc_r+0xea>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	442b      	add	r3, r5
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	f8d8 3000 	ldr.w	r3, [r8]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	bb62      	cbnz	r2, 8006dd8 <_malloc_r+0xdc>
 8006d7e:	f8c8 7000 	str.w	r7, [r8]
 8006d82:	e00f      	b.n	8006da4 <_malloc_r+0xa8>
 8006d84:	6822      	ldr	r2, [r4, #0]
 8006d86:	1b52      	subs	r2, r2, r5
 8006d88:	d420      	bmi.n	8006dcc <_malloc_r+0xd0>
 8006d8a:	2a0b      	cmp	r2, #11
 8006d8c:	d917      	bls.n	8006dbe <_malloc_r+0xc2>
 8006d8e:	1961      	adds	r1, r4, r5
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	6025      	str	r5, [r4, #0]
 8006d94:	bf18      	it	ne
 8006d96:	6059      	strne	r1, [r3, #4]
 8006d98:	6863      	ldr	r3, [r4, #4]
 8006d9a:	bf08      	it	eq
 8006d9c:	f8c8 1000 	streq.w	r1, [r8]
 8006da0:	5162      	str	r2, [r4, r5]
 8006da2:	604b      	str	r3, [r1, #4]
 8006da4:	4630      	mov	r0, r6
 8006da6:	f000 f82f 	bl	8006e08 <__malloc_unlock>
 8006daa:	f104 000b 	add.w	r0, r4, #11
 8006dae:	1d23      	adds	r3, r4, #4
 8006db0:	f020 0007 	bic.w	r0, r0, #7
 8006db4:	1ac2      	subs	r2, r0, r3
 8006db6:	bf1c      	itt	ne
 8006db8:	1a1b      	subne	r3, r3, r0
 8006dba:	50a3      	strne	r3, [r4, r2]
 8006dbc:	e7af      	b.n	8006d1e <_malloc_r+0x22>
 8006dbe:	6862      	ldr	r2, [r4, #4]
 8006dc0:	42a3      	cmp	r3, r4
 8006dc2:	bf0c      	ite	eq
 8006dc4:	f8c8 2000 	streq.w	r2, [r8]
 8006dc8:	605a      	strne	r2, [r3, #4]
 8006dca:	e7eb      	b.n	8006da4 <_malloc_r+0xa8>
 8006dcc:	4623      	mov	r3, r4
 8006dce:	6864      	ldr	r4, [r4, #4]
 8006dd0:	e7ae      	b.n	8006d30 <_malloc_r+0x34>
 8006dd2:	463c      	mov	r4, r7
 8006dd4:	687f      	ldr	r7, [r7, #4]
 8006dd6:	e7b6      	b.n	8006d46 <_malloc_r+0x4a>
 8006dd8:	461a      	mov	r2, r3
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	42a3      	cmp	r3, r4
 8006dde:	d1fb      	bne.n	8006dd8 <_malloc_r+0xdc>
 8006de0:	2300      	movs	r3, #0
 8006de2:	6053      	str	r3, [r2, #4]
 8006de4:	e7de      	b.n	8006da4 <_malloc_r+0xa8>
 8006de6:	230c      	movs	r3, #12
 8006de8:	6033      	str	r3, [r6, #0]
 8006dea:	4630      	mov	r0, r6
 8006dec:	f000 f80c 	bl	8006e08 <__malloc_unlock>
 8006df0:	e794      	b.n	8006d1c <_malloc_r+0x20>
 8006df2:	6005      	str	r5, [r0, #0]
 8006df4:	e7d6      	b.n	8006da4 <_malloc_r+0xa8>
 8006df6:	bf00      	nop
 8006df8:	24000410 	.word	0x24000410

08006dfc <__malloc_lock>:
 8006dfc:	4801      	ldr	r0, [pc, #4]	@ (8006e04 <__malloc_lock+0x8>)
 8006dfe:	f7ff b926 	b.w	800604e <__retarget_lock_acquire_recursive>
 8006e02:	bf00      	nop
 8006e04:	24000408 	.word	0x24000408

08006e08 <__malloc_unlock>:
 8006e08:	4801      	ldr	r0, [pc, #4]	@ (8006e10 <__malloc_unlock+0x8>)
 8006e0a:	f7ff b921 	b.w	8006050 <__retarget_lock_release_recursive>
 8006e0e:	bf00      	nop
 8006e10:	24000408 	.word	0x24000408

08006e14 <_Balloc>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	69c6      	ldr	r6, [r0, #28]
 8006e18:	4604      	mov	r4, r0
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	b976      	cbnz	r6, 8006e3c <_Balloc+0x28>
 8006e1e:	2010      	movs	r0, #16
 8006e20:	f7ff ff42 	bl	8006ca8 <malloc>
 8006e24:	4602      	mov	r2, r0
 8006e26:	61e0      	str	r0, [r4, #28]
 8006e28:	b920      	cbnz	r0, 8006e34 <_Balloc+0x20>
 8006e2a:	4b18      	ldr	r3, [pc, #96]	@ (8006e8c <_Balloc+0x78>)
 8006e2c:	4818      	ldr	r0, [pc, #96]	@ (8006e90 <_Balloc+0x7c>)
 8006e2e:	216b      	movs	r1, #107	@ 0x6b
 8006e30:	f000 fe02 	bl	8007a38 <__assert_func>
 8006e34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e38:	6006      	str	r6, [r0, #0]
 8006e3a:	60c6      	str	r6, [r0, #12]
 8006e3c:	69e6      	ldr	r6, [r4, #28]
 8006e3e:	68f3      	ldr	r3, [r6, #12]
 8006e40:	b183      	cbz	r3, 8006e64 <_Balloc+0x50>
 8006e42:	69e3      	ldr	r3, [r4, #28]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e4a:	b9b8      	cbnz	r0, 8006e7c <_Balloc+0x68>
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	fa01 f605 	lsl.w	r6, r1, r5
 8006e52:	1d72      	adds	r2, r6, #5
 8006e54:	0092      	lsls	r2, r2, #2
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 fe0c 	bl	8007a74 <_calloc_r>
 8006e5c:	b160      	cbz	r0, 8006e78 <_Balloc+0x64>
 8006e5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e62:	e00e      	b.n	8006e82 <_Balloc+0x6e>
 8006e64:	2221      	movs	r2, #33	@ 0x21
 8006e66:	2104      	movs	r1, #4
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f000 fe03 	bl	8007a74 <_calloc_r>
 8006e6e:	69e3      	ldr	r3, [r4, #28]
 8006e70:	60f0      	str	r0, [r6, #12]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e4      	bne.n	8006e42 <_Balloc+0x2e>
 8006e78:	2000      	movs	r0, #0
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	6802      	ldr	r2, [r0, #0]
 8006e7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e82:	2300      	movs	r3, #0
 8006e84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e88:	e7f7      	b.n	8006e7a <_Balloc+0x66>
 8006e8a:	bf00      	nop
 8006e8c:	08007e71 	.word	0x08007e71
 8006e90:	08007ef1 	.word	0x08007ef1

08006e94 <_Bfree>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	69c6      	ldr	r6, [r0, #28]
 8006e98:	4605      	mov	r5, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	b976      	cbnz	r6, 8006ebc <_Bfree+0x28>
 8006e9e:	2010      	movs	r0, #16
 8006ea0:	f7ff ff02 	bl	8006ca8 <malloc>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	61e8      	str	r0, [r5, #28]
 8006ea8:	b920      	cbnz	r0, 8006eb4 <_Bfree+0x20>
 8006eaa:	4b09      	ldr	r3, [pc, #36]	@ (8006ed0 <_Bfree+0x3c>)
 8006eac:	4809      	ldr	r0, [pc, #36]	@ (8006ed4 <_Bfree+0x40>)
 8006eae:	218f      	movs	r1, #143	@ 0x8f
 8006eb0:	f000 fdc2 	bl	8007a38 <__assert_func>
 8006eb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006eb8:	6006      	str	r6, [r0, #0]
 8006eba:	60c6      	str	r6, [r0, #12]
 8006ebc:	b13c      	cbz	r4, 8006ece <_Bfree+0x3a>
 8006ebe:	69eb      	ldr	r3, [r5, #28]
 8006ec0:	6862      	ldr	r2, [r4, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ec8:	6021      	str	r1, [r4, #0]
 8006eca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	08007e71 	.word	0x08007e71
 8006ed4:	08007ef1 	.word	0x08007ef1

08006ed8 <__multadd>:
 8006ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006edc:	690d      	ldr	r5, [r1, #16]
 8006ede:	4607      	mov	r7, r0
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	461e      	mov	r6, r3
 8006ee4:	f101 0c14 	add.w	ip, r1, #20
 8006ee8:	2000      	movs	r0, #0
 8006eea:	f8dc 3000 	ldr.w	r3, [ip]
 8006eee:	b299      	uxth	r1, r3
 8006ef0:	fb02 6101 	mla	r1, r2, r1, r6
 8006ef4:	0c1e      	lsrs	r6, r3, #16
 8006ef6:	0c0b      	lsrs	r3, r1, #16
 8006ef8:	fb02 3306 	mla	r3, r2, r6, r3
 8006efc:	b289      	uxth	r1, r1
 8006efe:	3001      	adds	r0, #1
 8006f00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f04:	4285      	cmp	r5, r0
 8006f06:	f84c 1b04 	str.w	r1, [ip], #4
 8006f0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f0e:	dcec      	bgt.n	8006eea <__multadd+0x12>
 8006f10:	b30e      	cbz	r6, 8006f56 <__multadd+0x7e>
 8006f12:	68a3      	ldr	r3, [r4, #8]
 8006f14:	42ab      	cmp	r3, r5
 8006f16:	dc19      	bgt.n	8006f4c <__multadd+0x74>
 8006f18:	6861      	ldr	r1, [r4, #4]
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	3101      	adds	r1, #1
 8006f1e:	f7ff ff79 	bl	8006e14 <_Balloc>
 8006f22:	4680      	mov	r8, r0
 8006f24:	b928      	cbnz	r0, 8006f32 <__multadd+0x5a>
 8006f26:	4602      	mov	r2, r0
 8006f28:	4b0c      	ldr	r3, [pc, #48]	@ (8006f5c <__multadd+0x84>)
 8006f2a:	480d      	ldr	r0, [pc, #52]	@ (8006f60 <__multadd+0x88>)
 8006f2c:	21ba      	movs	r1, #186	@ 0xba
 8006f2e:	f000 fd83 	bl	8007a38 <__assert_func>
 8006f32:	6922      	ldr	r2, [r4, #16]
 8006f34:	3202      	adds	r2, #2
 8006f36:	f104 010c 	add.w	r1, r4, #12
 8006f3a:	0092      	lsls	r2, r2, #2
 8006f3c:	300c      	adds	r0, #12
 8006f3e:	f000 fd6d 	bl	8007a1c <memcpy>
 8006f42:	4621      	mov	r1, r4
 8006f44:	4638      	mov	r0, r7
 8006f46:	f7ff ffa5 	bl	8006e94 <_Bfree>
 8006f4a:	4644      	mov	r4, r8
 8006f4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f50:	3501      	adds	r5, #1
 8006f52:	615e      	str	r6, [r3, #20]
 8006f54:	6125      	str	r5, [r4, #16]
 8006f56:	4620      	mov	r0, r4
 8006f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f5c:	08007ee0 	.word	0x08007ee0
 8006f60:	08007ef1 	.word	0x08007ef1

08006f64 <__hi0bits>:
 8006f64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006f68:	4603      	mov	r3, r0
 8006f6a:	bf36      	itet	cc
 8006f6c:	0403      	lslcc	r3, r0, #16
 8006f6e:	2000      	movcs	r0, #0
 8006f70:	2010      	movcc	r0, #16
 8006f72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f76:	bf3c      	itt	cc
 8006f78:	021b      	lslcc	r3, r3, #8
 8006f7a:	3008      	addcc	r0, #8
 8006f7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f80:	bf3c      	itt	cc
 8006f82:	011b      	lslcc	r3, r3, #4
 8006f84:	3004      	addcc	r0, #4
 8006f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f8a:	bf3c      	itt	cc
 8006f8c:	009b      	lslcc	r3, r3, #2
 8006f8e:	3002      	addcc	r0, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	db05      	blt.n	8006fa0 <__hi0bits+0x3c>
 8006f94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006f98:	f100 0001 	add.w	r0, r0, #1
 8006f9c:	bf08      	it	eq
 8006f9e:	2020      	moveq	r0, #32
 8006fa0:	4770      	bx	lr

08006fa2 <__lo0bits>:
 8006fa2:	6803      	ldr	r3, [r0, #0]
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	f013 0007 	ands.w	r0, r3, #7
 8006faa:	d00b      	beq.n	8006fc4 <__lo0bits+0x22>
 8006fac:	07d9      	lsls	r1, r3, #31
 8006fae:	d421      	bmi.n	8006ff4 <__lo0bits+0x52>
 8006fb0:	0798      	lsls	r0, r3, #30
 8006fb2:	bf49      	itett	mi
 8006fb4:	085b      	lsrmi	r3, r3, #1
 8006fb6:	089b      	lsrpl	r3, r3, #2
 8006fb8:	2001      	movmi	r0, #1
 8006fba:	6013      	strmi	r3, [r2, #0]
 8006fbc:	bf5c      	itt	pl
 8006fbe:	6013      	strpl	r3, [r2, #0]
 8006fc0:	2002      	movpl	r0, #2
 8006fc2:	4770      	bx	lr
 8006fc4:	b299      	uxth	r1, r3
 8006fc6:	b909      	cbnz	r1, 8006fcc <__lo0bits+0x2a>
 8006fc8:	0c1b      	lsrs	r3, r3, #16
 8006fca:	2010      	movs	r0, #16
 8006fcc:	b2d9      	uxtb	r1, r3
 8006fce:	b909      	cbnz	r1, 8006fd4 <__lo0bits+0x32>
 8006fd0:	3008      	adds	r0, #8
 8006fd2:	0a1b      	lsrs	r3, r3, #8
 8006fd4:	0719      	lsls	r1, r3, #28
 8006fd6:	bf04      	itt	eq
 8006fd8:	091b      	lsreq	r3, r3, #4
 8006fda:	3004      	addeq	r0, #4
 8006fdc:	0799      	lsls	r1, r3, #30
 8006fde:	bf04      	itt	eq
 8006fe0:	089b      	lsreq	r3, r3, #2
 8006fe2:	3002      	addeq	r0, #2
 8006fe4:	07d9      	lsls	r1, r3, #31
 8006fe6:	d403      	bmi.n	8006ff0 <__lo0bits+0x4e>
 8006fe8:	085b      	lsrs	r3, r3, #1
 8006fea:	f100 0001 	add.w	r0, r0, #1
 8006fee:	d003      	beq.n	8006ff8 <__lo0bits+0x56>
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	4770      	bx	lr
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	4770      	bx	lr
 8006ff8:	2020      	movs	r0, #32
 8006ffa:	4770      	bx	lr

08006ffc <__i2b>:
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	460c      	mov	r4, r1
 8007000:	2101      	movs	r1, #1
 8007002:	f7ff ff07 	bl	8006e14 <_Balloc>
 8007006:	4602      	mov	r2, r0
 8007008:	b928      	cbnz	r0, 8007016 <__i2b+0x1a>
 800700a:	4b05      	ldr	r3, [pc, #20]	@ (8007020 <__i2b+0x24>)
 800700c:	4805      	ldr	r0, [pc, #20]	@ (8007024 <__i2b+0x28>)
 800700e:	f240 1145 	movw	r1, #325	@ 0x145
 8007012:	f000 fd11 	bl	8007a38 <__assert_func>
 8007016:	2301      	movs	r3, #1
 8007018:	6144      	str	r4, [r0, #20]
 800701a:	6103      	str	r3, [r0, #16]
 800701c:	bd10      	pop	{r4, pc}
 800701e:	bf00      	nop
 8007020:	08007ee0 	.word	0x08007ee0
 8007024:	08007ef1 	.word	0x08007ef1

08007028 <__multiply>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	4614      	mov	r4, r2
 800702e:	690a      	ldr	r2, [r1, #16]
 8007030:	6923      	ldr	r3, [r4, #16]
 8007032:	429a      	cmp	r2, r3
 8007034:	bfa8      	it	ge
 8007036:	4623      	movge	r3, r4
 8007038:	460f      	mov	r7, r1
 800703a:	bfa4      	itt	ge
 800703c:	460c      	movge	r4, r1
 800703e:	461f      	movge	r7, r3
 8007040:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007044:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007048:	68a3      	ldr	r3, [r4, #8]
 800704a:	6861      	ldr	r1, [r4, #4]
 800704c:	eb0a 0609 	add.w	r6, sl, r9
 8007050:	42b3      	cmp	r3, r6
 8007052:	b085      	sub	sp, #20
 8007054:	bfb8      	it	lt
 8007056:	3101      	addlt	r1, #1
 8007058:	f7ff fedc 	bl	8006e14 <_Balloc>
 800705c:	b930      	cbnz	r0, 800706c <__multiply+0x44>
 800705e:	4602      	mov	r2, r0
 8007060:	4b44      	ldr	r3, [pc, #272]	@ (8007174 <__multiply+0x14c>)
 8007062:	4845      	ldr	r0, [pc, #276]	@ (8007178 <__multiply+0x150>)
 8007064:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007068:	f000 fce6 	bl	8007a38 <__assert_func>
 800706c:	f100 0514 	add.w	r5, r0, #20
 8007070:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007074:	462b      	mov	r3, r5
 8007076:	2200      	movs	r2, #0
 8007078:	4543      	cmp	r3, r8
 800707a:	d321      	bcc.n	80070c0 <__multiply+0x98>
 800707c:	f107 0114 	add.w	r1, r7, #20
 8007080:	f104 0214 	add.w	r2, r4, #20
 8007084:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007088:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800708c:	9302      	str	r3, [sp, #8]
 800708e:	1b13      	subs	r3, r2, r4
 8007090:	3b15      	subs	r3, #21
 8007092:	f023 0303 	bic.w	r3, r3, #3
 8007096:	3304      	adds	r3, #4
 8007098:	f104 0715 	add.w	r7, r4, #21
 800709c:	42ba      	cmp	r2, r7
 800709e:	bf38      	it	cc
 80070a0:	2304      	movcc	r3, #4
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	9b02      	ldr	r3, [sp, #8]
 80070a6:	9103      	str	r1, [sp, #12]
 80070a8:	428b      	cmp	r3, r1
 80070aa:	d80c      	bhi.n	80070c6 <__multiply+0x9e>
 80070ac:	2e00      	cmp	r6, #0
 80070ae:	dd03      	ble.n	80070b8 <__multiply+0x90>
 80070b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d05b      	beq.n	8007170 <__multiply+0x148>
 80070b8:	6106      	str	r6, [r0, #16]
 80070ba:	b005      	add	sp, #20
 80070bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c0:	f843 2b04 	str.w	r2, [r3], #4
 80070c4:	e7d8      	b.n	8007078 <__multiply+0x50>
 80070c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80070ca:	f1ba 0f00 	cmp.w	sl, #0
 80070ce:	d024      	beq.n	800711a <__multiply+0xf2>
 80070d0:	f104 0e14 	add.w	lr, r4, #20
 80070d4:	46a9      	mov	r9, r5
 80070d6:	f04f 0c00 	mov.w	ip, #0
 80070da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80070de:	f8d9 3000 	ldr.w	r3, [r9]
 80070e2:	fa1f fb87 	uxth.w	fp, r7
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80070ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80070f0:	f8d9 7000 	ldr.w	r7, [r9]
 80070f4:	4463      	add	r3, ip
 80070f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80070fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80070fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007102:	b29b      	uxth	r3, r3
 8007104:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007108:	4572      	cmp	r2, lr
 800710a:	f849 3b04 	str.w	r3, [r9], #4
 800710e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007112:	d8e2      	bhi.n	80070da <__multiply+0xb2>
 8007114:	9b01      	ldr	r3, [sp, #4]
 8007116:	f845 c003 	str.w	ip, [r5, r3]
 800711a:	9b03      	ldr	r3, [sp, #12]
 800711c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007120:	3104      	adds	r1, #4
 8007122:	f1b9 0f00 	cmp.w	r9, #0
 8007126:	d021      	beq.n	800716c <__multiply+0x144>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	f104 0c14 	add.w	ip, r4, #20
 800712e:	46ae      	mov	lr, r5
 8007130:	f04f 0a00 	mov.w	sl, #0
 8007134:	f8bc b000 	ldrh.w	fp, [ip]
 8007138:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800713c:	fb09 770b 	mla	r7, r9, fp, r7
 8007140:	4457      	add	r7, sl
 8007142:	b29b      	uxth	r3, r3
 8007144:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007148:	f84e 3b04 	str.w	r3, [lr], #4
 800714c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007150:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007154:	f8be 3000 	ldrh.w	r3, [lr]
 8007158:	fb09 330a 	mla	r3, r9, sl, r3
 800715c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007160:	4562      	cmp	r2, ip
 8007162:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007166:	d8e5      	bhi.n	8007134 <__multiply+0x10c>
 8007168:	9f01      	ldr	r7, [sp, #4]
 800716a:	51eb      	str	r3, [r5, r7]
 800716c:	3504      	adds	r5, #4
 800716e:	e799      	b.n	80070a4 <__multiply+0x7c>
 8007170:	3e01      	subs	r6, #1
 8007172:	e79b      	b.n	80070ac <__multiply+0x84>
 8007174:	08007ee0 	.word	0x08007ee0
 8007178:	08007ef1 	.word	0x08007ef1

0800717c <__pow5mult>:
 800717c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007180:	4615      	mov	r5, r2
 8007182:	f012 0203 	ands.w	r2, r2, #3
 8007186:	4607      	mov	r7, r0
 8007188:	460e      	mov	r6, r1
 800718a:	d007      	beq.n	800719c <__pow5mult+0x20>
 800718c:	4c25      	ldr	r4, [pc, #148]	@ (8007224 <__pow5mult+0xa8>)
 800718e:	3a01      	subs	r2, #1
 8007190:	2300      	movs	r3, #0
 8007192:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007196:	f7ff fe9f 	bl	8006ed8 <__multadd>
 800719a:	4606      	mov	r6, r0
 800719c:	10ad      	asrs	r5, r5, #2
 800719e:	d03d      	beq.n	800721c <__pow5mult+0xa0>
 80071a0:	69fc      	ldr	r4, [r7, #28]
 80071a2:	b97c      	cbnz	r4, 80071c4 <__pow5mult+0x48>
 80071a4:	2010      	movs	r0, #16
 80071a6:	f7ff fd7f 	bl	8006ca8 <malloc>
 80071aa:	4602      	mov	r2, r0
 80071ac:	61f8      	str	r0, [r7, #28]
 80071ae:	b928      	cbnz	r0, 80071bc <__pow5mult+0x40>
 80071b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007228 <__pow5mult+0xac>)
 80071b2:	481e      	ldr	r0, [pc, #120]	@ (800722c <__pow5mult+0xb0>)
 80071b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80071b8:	f000 fc3e 	bl	8007a38 <__assert_func>
 80071bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071c0:	6004      	str	r4, [r0, #0]
 80071c2:	60c4      	str	r4, [r0, #12]
 80071c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80071c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071cc:	b94c      	cbnz	r4, 80071e2 <__pow5mult+0x66>
 80071ce:	f240 2171 	movw	r1, #625	@ 0x271
 80071d2:	4638      	mov	r0, r7
 80071d4:	f7ff ff12 	bl	8006ffc <__i2b>
 80071d8:	2300      	movs	r3, #0
 80071da:	f8c8 0008 	str.w	r0, [r8, #8]
 80071de:	4604      	mov	r4, r0
 80071e0:	6003      	str	r3, [r0, #0]
 80071e2:	f04f 0900 	mov.w	r9, #0
 80071e6:	07eb      	lsls	r3, r5, #31
 80071e8:	d50a      	bpl.n	8007200 <__pow5mult+0x84>
 80071ea:	4631      	mov	r1, r6
 80071ec:	4622      	mov	r2, r4
 80071ee:	4638      	mov	r0, r7
 80071f0:	f7ff ff1a 	bl	8007028 <__multiply>
 80071f4:	4631      	mov	r1, r6
 80071f6:	4680      	mov	r8, r0
 80071f8:	4638      	mov	r0, r7
 80071fa:	f7ff fe4b 	bl	8006e94 <_Bfree>
 80071fe:	4646      	mov	r6, r8
 8007200:	106d      	asrs	r5, r5, #1
 8007202:	d00b      	beq.n	800721c <__pow5mult+0xa0>
 8007204:	6820      	ldr	r0, [r4, #0]
 8007206:	b938      	cbnz	r0, 8007218 <__pow5mult+0x9c>
 8007208:	4622      	mov	r2, r4
 800720a:	4621      	mov	r1, r4
 800720c:	4638      	mov	r0, r7
 800720e:	f7ff ff0b 	bl	8007028 <__multiply>
 8007212:	6020      	str	r0, [r4, #0]
 8007214:	f8c0 9000 	str.w	r9, [r0]
 8007218:	4604      	mov	r4, r0
 800721a:	e7e4      	b.n	80071e6 <__pow5mult+0x6a>
 800721c:	4630      	mov	r0, r6
 800721e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007222:	bf00      	nop
 8007224:	08007f4c 	.word	0x08007f4c
 8007228:	08007e71 	.word	0x08007e71
 800722c:	08007ef1 	.word	0x08007ef1

08007230 <__lshift>:
 8007230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	460c      	mov	r4, r1
 8007236:	6849      	ldr	r1, [r1, #4]
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800723e:	68a3      	ldr	r3, [r4, #8]
 8007240:	4607      	mov	r7, r0
 8007242:	4691      	mov	r9, r2
 8007244:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007248:	f108 0601 	add.w	r6, r8, #1
 800724c:	42b3      	cmp	r3, r6
 800724e:	db0b      	blt.n	8007268 <__lshift+0x38>
 8007250:	4638      	mov	r0, r7
 8007252:	f7ff fddf 	bl	8006e14 <_Balloc>
 8007256:	4605      	mov	r5, r0
 8007258:	b948      	cbnz	r0, 800726e <__lshift+0x3e>
 800725a:	4602      	mov	r2, r0
 800725c:	4b28      	ldr	r3, [pc, #160]	@ (8007300 <__lshift+0xd0>)
 800725e:	4829      	ldr	r0, [pc, #164]	@ (8007304 <__lshift+0xd4>)
 8007260:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007264:	f000 fbe8 	bl	8007a38 <__assert_func>
 8007268:	3101      	adds	r1, #1
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	e7ee      	b.n	800724c <__lshift+0x1c>
 800726e:	2300      	movs	r3, #0
 8007270:	f100 0114 	add.w	r1, r0, #20
 8007274:	f100 0210 	add.w	r2, r0, #16
 8007278:	4618      	mov	r0, r3
 800727a:	4553      	cmp	r3, sl
 800727c:	db33      	blt.n	80072e6 <__lshift+0xb6>
 800727e:	6920      	ldr	r0, [r4, #16]
 8007280:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007284:	f104 0314 	add.w	r3, r4, #20
 8007288:	f019 091f 	ands.w	r9, r9, #31
 800728c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007290:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007294:	d02b      	beq.n	80072ee <__lshift+0xbe>
 8007296:	f1c9 0e20 	rsb	lr, r9, #32
 800729a:	468a      	mov	sl, r1
 800729c:	2200      	movs	r2, #0
 800729e:	6818      	ldr	r0, [r3, #0]
 80072a0:	fa00 f009 	lsl.w	r0, r0, r9
 80072a4:	4310      	orrs	r0, r2
 80072a6:	f84a 0b04 	str.w	r0, [sl], #4
 80072aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ae:	459c      	cmp	ip, r3
 80072b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80072b4:	d8f3      	bhi.n	800729e <__lshift+0x6e>
 80072b6:	ebac 0304 	sub.w	r3, ip, r4
 80072ba:	3b15      	subs	r3, #21
 80072bc:	f023 0303 	bic.w	r3, r3, #3
 80072c0:	3304      	adds	r3, #4
 80072c2:	f104 0015 	add.w	r0, r4, #21
 80072c6:	4584      	cmp	ip, r0
 80072c8:	bf38      	it	cc
 80072ca:	2304      	movcc	r3, #4
 80072cc:	50ca      	str	r2, [r1, r3]
 80072ce:	b10a      	cbz	r2, 80072d4 <__lshift+0xa4>
 80072d0:	f108 0602 	add.w	r6, r8, #2
 80072d4:	3e01      	subs	r6, #1
 80072d6:	4638      	mov	r0, r7
 80072d8:	612e      	str	r6, [r5, #16]
 80072da:	4621      	mov	r1, r4
 80072dc:	f7ff fdda 	bl	8006e94 <_Bfree>
 80072e0:	4628      	mov	r0, r5
 80072e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80072ea:	3301      	adds	r3, #1
 80072ec:	e7c5      	b.n	800727a <__lshift+0x4a>
 80072ee:	3904      	subs	r1, #4
 80072f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80072f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80072f8:	459c      	cmp	ip, r3
 80072fa:	d8f9      	bhi.n	80072f0 <__lshift+0xc0>
 80072fc:	e7ea      	b.n	80072d4 <__lshift+0xa4>
 80072fe:	bf00      	nop
 8007300:	08007ee0 	.word	0x08007ee0
 8007304:	08007ef1 	.word	0x08007ef1

08007308 <__mcmp>:
 8007308:	690a      	ldr	r2, [r1, #16]
 800730a:	4603      	mov	r3, r0
 800730c:	6900      	ldr	r0, [r0, #16]
 800730e:	1a80      	subs	r0, r0, r2
 8007310:	b530      	push	{r4, r5, lr}
 8007312:	d10e      	bne.n	8007332 <__mcmp+0x2a>
 8007314:	3314      	adds	r3, #20
 8007316:	3114      	adds	r1, #20
 8007318:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800731c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007320:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007324:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007328:	4295      	cmp	r5, r2
 800732a:	d003      	beq.n	8007334 <__mcmp+0x2c>
 800732c:	d205      	bcs.n	800733a <__mcmp+0x32>
 800732e:	f04f 30ff 	mov.w	r0, #4294967295
 8007332:	bd30      	pop	{r4, r5, pc}
 8007334:	42a3      	cmp	r3, r4
 8007336:	d3f3      	bcc.n	8007320 <__mcmp+0x18>
 8007338:	e7fb      	b.n	8007332 <__mcmp+0x2a>
 800733a:	2001      	movs	r0, #1
 800733c:	e7f9      	b.n	8007332 <__mcmp+0x2a>
	...

08007340 <__mdiff>:
 8007340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	4689      	mov	r9, r1
 8007346:	4606      	mov	r6, r0
 8007348:	4611      	mov	r1, r2
 800734a:	4648      	mov	r0, r9
 800734c:	4614      	mov	r4, r2
 800734e:	f7ff ffdb 	bl	8007308 <__mcmp>
 8007352:	1e05      	subs	r5, r0, #0
 8007354:	d112      	bne.n	800737c <__mdiff+0x3c>
 8007356:	4629      	mov	r1, r5
 8007358:	4630      	mov	r0, r6
 800735a:	f7ff fd5b 	bl	8006e14 <_Balloc>
 800735e:	4602      	mov	r2, r0
 8007360:	b928      	cbnz	r0, 800736e <__mdiff+0x2e>
 8007362:	4b3f      	ldr	r3, [pc, #252]	@ (8007460 <__mdiff+0x120>)
 8007364:	f240 2137 	movw	r1, #567	@ 0x237
 8007368:	483e      	ldr	r0, [pc, #248]	@ (8007464 <__mdiff+0x124>)
 800736a:	f000 fb65 	bl	8007a38 <__assert_func>
 800736e:	2301      	movs	r3, #1
 8007370:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007374:	4610      	mov	r0, r2
 8007376:	b003      	add	sp, #12
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	bfbc      	itt	lt
 800737e:	464b      	movlt	r3, r9
 8007380:	46a1      	movlt	r9, r4
 8007382:	4630      	mov	r0, r6
 8007384:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007388:	bfba      	itte	lt
 800738a:	461c      	movlt	r4, r3
 800738c:	2501      	movlt	r5, #1
 800738e:	2500      	movge	r5, #0
 8007390:	f7ff fd40 	bl	8006e14 <_Balloc>
 8007394:	4602      	mov	r2, r0
 8007396:	b918      	cbnz	r0, 80073a0 <__mdiff+0x60>
 8007398:	4b31      	ldr	r3, [pc, #196]	@ (8007460 <__mdiff+0x120>)
 800739a:	f240 2145 	movw	r1, #581	@ 0x245
 800739e:	e7e3      	b.n	8007368 <__mdiff+0x28>
 80073a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80073a4:	6926      	ldr	r6, [r4, #16]
 80073a6:	60c5      	str	r5, [r0, #12]
 80073a8:	f109 0310 	add.w	r3, r9, #16
 80073ac:	f109 0514 	add.w	r5, r9, #20
 80073b0:	f104 0e14 	add.w	lr, r4, #20
 80073b4:	f100 0b14 	add.w	fp, r0, #20
 80073b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80073bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	46d9      	mov	r9, fp
 80073c4:	f04f 0c00 	mov.w	ip, #0
 80073c8:	9b01      	ldr	r3, [sp, #4]
 80073ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80073ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	fa1f f38a 	uxth.w	r3, sl
 80073d8:	4619      	mov	r1, r3
 80073da:	b283      	uxth	r3, r0
 80073dc:	1acb      	subs	r3, r1, r3
 80073de:	0c00      	lsrs	r0, r0, #16
 80073e0:	4463      	add	r3, ip
 80073e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80073e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80073f0:	4576      	cmp	r6, lr
 80073f2:	f849 3b04 	str.w	r3, [r9], #4
 80073f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073fa:	d8e5      	bhi.n	80073c8 <__mdiff+0x88>
 80073fc:	1b33      	subs	r3, r6, r4
 80073fe:	3b15      	subs	r3, #21
 8007400:	f023 0303 	bic.w	r3, r3, #3
 8007404:	3415      	adds	r4, #21
 8007406:	3304      	adds	r3, #4
 8007408:	42a6      	cmp	r6, r4
 800740a:	bf38      	it	cc
 800740c:	2304      	movcc	r3, #4
 800740e:	441d      	add	r5, r3
 8007410:	445b      	add	r3, fp
 8007412:	461e      	mov	r6, r3
 8007414:	462c      	mov	r4, r5
 8007416:	4544      	cmp	r4, r8
 8007418:	d30e      	bcc.n	8007438 <__mdiff+0xf8>
 800741a:	f108 0103 	add.w	r1, r8, #3
 800741e:	1b49      	subs	r1, r1, r5
 8007420:	f021 0103 	bic.w	r1, r1, #3
 8007424:	3d03      	subs	r5, #3
 8007426:	45a8      	cmp	r8, r5
 8007428:	bf38      	it	cc
 800742a:	2100      	movcc	r1, #0
 800742c:	440b      	add	r3, r1
 800742e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007432:	b191      	cbz	r1, 800745a <__mdiff+0x11a>
 8007434:	6117      	str	r7, [r2, #16]
 8007436:	e79d      	b.n	8007374 <__mdiff+0x34>
 8007438:	f854 1b04 	ldr.w	r1, [r4], #4
 800743c:	46e6      	mov	lr, ip
 800743e:	0c08      	lsrs	r0, r1, #16
 8007440:	fa1c fc81 	uxtah	ip, ip, r1
 8007444:	4471      	add	r1, lr
 8007446:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800744a:	b289      	uxth	r1, r1
 800744c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007450:	f846 1b04 	str.w	r1, [r6], #4
 8007454:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007458:	e7dd      	b.n	8007416 <__mdiff+0xd6>
 800745a:	3f01      	subs	r7, #1
 800745c:	e7e7      	b.n	800742e <__mdiff+0xee>
 800745e:	bf00      	nop
 8007460:	08007ee0 	.word	0x08007ee0
 8007464:	08007ef1 	.word	0x08007ef1

08007468 <__d2b>:
 8007468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800746c:	460f      	mov	r7, r1
 800746e:	2101      	movs	r1, #1
 8007470:	ec59 8b10 	vmov	r8, r9, d0
 8007474:	4616      	mov	r6, r2
 8007476:	f7ff fccd 	bl	8006e14 <_Balloc>
 800747a:	4604      	mov	r4, r0
 800747c:	b930      	cbnz	r0, 800748c <__d2b+0x24>
 800747e:	4602      	mov	r2, r0
 8007480:	4b23      	ldr	r3, [pc, #140]	@ (8007510 <__d2b+0xa8>)
 8007482:	4824      	ldr	r0, [pc, #144]	@ (8007514 <__d2b+0xac>)
 8007484:	f240 310f 	movw	r1, #783	@ 0x30f
 8007488:	f000 fad6 	bl	8007a38 <__assert_func>
 800748c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007494:	b10d      	cbz	r5, 800749a <__d2b+0x32>
 8007496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	f1b8 0300 	subs.w	r3, r8, #0
 80074a0:	d023      	beq.n	80074ea <__d2b+0x82>
 80074a2:	4668      	mov	r0, sp
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	f7ff fd7c 	bl	8006fa2 <__lo0bits>
 80074aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80074ae:	b1d0      	cbz	r0, 80074e6 <__d2b+0x7e>
 80074b0:	f1c0 0320 	rsb	r3, r0, #32
 80074b4:	fa02 f303 	lsl.w	r3, r2, r3
 80074b8:	430b      	orrs	r3, r1
 80074ba:	40c2      	lsrs	r2, r0
 80074bc:	6163      	str	r3, [r4, #20]
 80074be:	9201      	str	r2, [sp, #4]
 80074c0:	9b01      	ldr	r3, [sp, #4]
 80074c2:	61a3      	str	r3, [r4, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bf0c      	ite	eq
 80074c8:	2201      	moveq	r2, #1
 80074ca:	2202      	movne	r2, #2
 80074cc:	6122      	str	r2, [r4, #16]
 80074ce:	b1a5      	cbz	r5, 80074fa <__d2b+0x92>
 80074d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80074d4:	4405      	add	r5, r0
 80074d6:	603d      	str	r5, [r7, #0]
 80074d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80074dc:	6030      	str	r0, [r6, #0]
 80074de:	4620      	mov	r0, r4
 80074e0:	b003      	add	sp, #12
 80074e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074e6:	6161      	str	r1, [r4, #20]
 80074e8:	e7ea      	b.n	80074c0 <__d2b+0x58>
 80074ea:	a801      	add	r0, sp, #4
 80074ec:	f7ff fd59 	bl	8006fa2 <__lo0bits>
 80074f0:	9b01      	ldr	r3, [sp, #4]
 80074f2:	6163      	str	r3, [r4, #20]
 80074f4:	3020      	adds	r0, #32
 80074f6:	2201      	movs	r2, #1
 80074f8:	e7e8      	b.n	80074cc <__d2b+0x64>
 80074fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007502:	6038      	str	r0, [r7, #0]
 8007504:	6918      	ldr	r0, [r3, #16]
 8007506:	f7ff fd2d 	bl	8006f64 <__hi0bits>
 800750a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800750e:	e7e5      	b.n	80074dc <__d2b+0x74>
 8007510:	08007ee0 	.word	0x08007ee0
 8007514:	08007ef1 	.word	0x08007ef1

08007518 <__sfputc_r>:
 8007518:	6893      	ldr	r3, [r2, #8]
 800751a:	3b01      	subs	r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	b410      	push	{r4}
 8007520:	6093      	str	r3, [r2, #8]
 8007522:	da08      	bge.n	8007536 <__sfputc_r+0x1e>
 8007524:	6994      	ldr	r4, [r2, #24]
 8007526:	42a3      	cmp	r3, r4
 8007528:	db01      	blt.n	800752e <__sfputc_r+0x16>
 800752a:	290a      	cmp	r1, #10
 800752c:	d103      	bne.n	8007536 <__sfputc_r+0x1e>
 800752e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007532:	f7fe bc7a 	b.w	8005e2a <__swbuf_r>
 8007536:	6813      	ldr	r3, [r2, #0]
 8007538:	1c58      	adds	r0, r3, #1
 800753a:	6010      	str	r0, [r2, #0]
 800753c:	7019      	strb	r1, [r3, #0]
 800753e:	4608      	mov	r0, r1
 8007540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007544:	4770      	bx	lr

08007546 <__sfputs_r>:
 8007546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007548:	4606      	mov	r6, r0
 800754a:	460f      	mov	r7, r1
 800754c:	4614      	mov	r4, r2
 800754e:	18d5      	adds	r5, r2, r3
 8007550:	42ac      	cmp	r4, r5
 8007552:	d101      	bne.n	8007558 <__sfputs_r+0x12>
 8007554:	2000      	movs	r0, #0
 8007556:	e007      	b.n	8007568 <__sfputs_r+0x22>
 8007558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755c:	463a      	mov	r2, r7
 800755e:	4630      	mov	r0, r6
 8007560:	f7ff ffda 	bl	8007518 <__sfputc_r>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d1f3      	bne.n	8007550 <__sfputs_r+0xa>
 8007568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800756c <_vfiprintf_r>:
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	460d      	mov	r5, r1
 8007572:	b09d      	sub	sp, #116	@ 0x74
 8007574:	4614      	mov	r4, r2
 8007576:	4698      	mov	r8, r3
 8007578:	4606      	mov	r6, r0
 800757a:	b118      	cbz	r0, 8007584 <_vfiprintf_r+0x18>
 800757c:	6a03      	ldr	r3, [r0, #32]
 800757e:	b90b      	cbnz	r3, 8007584 <_vfiprintf_r+0x18>
 8007580:	f7fe fb6a 	bl	8005c58 <__sinit>
 8007584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007586:	07d9      	lsls	r1, r3, #31
 8007588:	d405      	bmi.n	8007596 <_vfiprintf_r+0x2a>
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	059a      	lsls	r2, r3, #22
 800758e:	d402      	bmi.n	8007596 <_vfiprintf_r+0x2a>
 8007590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007592:	f7fe fd5c 	bl	800604e <__retarget_lock_acquire_recursive>
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	071b      	lsls	r3, r3, #28
 800759a:	d501      	bpl.n	80075a0 <_vfiprintf_r+0x34>
 800759c:	692b      	ldr	r3, [r5, #16]
 800759e:	b99b      	cbnz	r3, 80075c8 <_vfiprintf_r+0x5c>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4630      	mov	r0, r6
 80075a4:	f7fe fc80 	bl	8005ea8 <__swsetup_r>
 80075a8:	b170      	cbz	r0, 80075c8 <_vfiprintf_r+0x5c>
 80075aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ac:	07dc      	lsls	r4, r3, #31
 80075ae:	d504      	bpl.n	80075ba <_vfiprintf_r+0x4e>
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295
 80075b4:	b01d      	add	sp, #116	@ 0x74
 80075b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ba:	89ab      	ldrh	r3, [r5, #12]
 80075bc:	0598      	lsls	r0, r3, #22
 80075be:	d4f7      	bmi.n	80075b0 <_vfiprintf_r+0x44>
 80075c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075c2:	f7fe fd45 	bl	8006050 <__retarget_lock_release_recursive>
 80075c6:	e7f3      	b.n	80075b0 <_vfiprintf_r+0x44>
 80075c8:	2300      	movs	r3, #0
 80075ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80075cc:	2320      	movs	r3, #32
 80075ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80075d6:	2330      	movs	r3, #48	@ 0x30
 80075d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007788 <_vfiprintf_r+0x21c>
 80075dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075e0:	f04f 0901 	mov.w	r9, #1
 80075e4:	4623      	mov	r3, r4
 80075e6:	469a      	mov	sl, r3
 80075e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ec:	b10a      	cbz	r2, 80075f2 <_vfiprintf_r+0x86>
 80075ee:	2a25      	cmp	r2, #37	@ 0x25
 80075f0:	d1f9      	bne.n	80075e6 <_vfiprintf_r+0x7a>
 80075f2:	ebba 0b04 	subs.w	fp, sl, r4
 80075f6:	d00b      	beq.n	8007610 <_vfiprintf_r+0xa4>
 80075f8:	465b      	mov	r3, fp
 80075fa:	4622      	mov	r2, r4
 80075fc:	4629      	mov	r1, r5
 80075fe:	4630      	mov	r0, r6
 8007600:	f7ff ffa1 	bl	8007546 <__sfputs_r>
 8007604:	3001      	adds	r0, #1
 8007606:	f000 80a7 	beq.w	8007758 <_vfiprintf_r+0x1ec>
 800760a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800760c:	445a      	add	r2, fp
 800760e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007610:	f89a 3000 	ldrb.w	r3, [sl]
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 809f 	beq.w	8007758 <_vfiprintf_r+0x1ec>
 800761a:	2300      	movs	r3, #0
 800761c:	f04f 32ff 	mov.w	r2, #4294967295
 8007620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007624:	f10a 0a01 	add.w	sl, sl, #1
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	9307      	str	r3, [sp, #28]
 800762c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007630:	931a      	str	r3, [sp, #104]	@ 0x68
 8007632:	4654      	mov	r4, sl
 8007634:	2205      	movs	r2, #5
 8007636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763a:	4853      	ldr	r0, [pc, #332]	@ (8007788 <_vfiprintf_r+0x21c>)
 800763c:	f7f8 fe50 	bl	80002e0 <memchr>
 8007640:	9a04      	ldr	r2, [sp, #16]
 8007642:	b9d8      	cbnz	r0, 800767c <_vfiprintf_r+0x110>
 8007644:	06d1      	lsls	r1, r2, #27
 8007646:	bf44      	itt	mi
 8007648:	2320      	movmi	r3, #32
 800764a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800764e:	0713      	lsls	r3, r2, #28
 8007650:	bf44      	itt	mi
 8007652:	232b      	movmi	r3, #43	@ 0x2b
 8007654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007658:	f89a 3000 	ldrb.w	r3, [sl]
 800765c:	2b2a      	cmp	r3, #42	@ 0x2a
 800765e:	d015      	beq.n	800768c <_vfiprintf_r+0x120>
 8007660:	9a07      	ldr	r2, [sp, #28]
 8007662:	4654      	mov	r4, sl
 8007664:	2000      	movs	r0, #0
 8007666:	f04f 0c0a 	mov.w	ip, #10
 800766a:	4621      	mov	r1, r4
 800766c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007670:	3b30      	subs	r3, #48	@ 0x30
 8007672:	2b09      	cmp	r3, #9
 8007674:	d94b      	bls.n	800770e <_vfiprintf_r+0x1a2>
 8007676:	b1b0      	cbz	r0, 80076a6 <_vfiprintf_r+0x13a>
 8007678:	9207      	str	r2, [sp, #28]
 800767a:	e014      	b.n	80076a6 <_vfiprintf_r+0x13a>
 800767c:	eba0 0308 	sub.w	r3, r0, r8
 8007680:	fa09 f303 	lsl.w	r3, r9, r3
 8007684:	4313      	orrs	r3, r2
 8007686:	9304      	str	r3, [sp, #16]
 8007688:	46a2      	mov	sl, r4
 800768a:	e7d2      	b.n	8007632 <_vfiprintf_r+0xc6>
 800768c:	9b03      	ldr	r3, [sp, #12]
 800768e:	1d19      	adds	r1, r3, #4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	9103      	str	r1, [sp, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	bfbb      	ittet	lt
 8007698:	425b      	neglt	r3, r3
 800769a:	f042 0202 	orrlt.w	r2, r2, #2
 800769e:	9307      	strge	r3, [sp, #28]
 80076a0:	9307      	strlt	r3, [sp, #28]
 80076a2:	bfb8      	it	lt
 80076a4:	9204      	strlt	r2, [sp, #16]
 80076a6:	7823      	ldrb	r3, [r4, #0]
 80076a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80076aa:	d10a      	bne.n	80076c2 <_vfiprintf_r+0x156>
 80076ac:	7863      	ldrb	r3, [r4, #1]
 80076ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80076b0:	d132      	bne.n	8007718 <_vfiprintf_r+0x1ac>
 80076b2:	9b03      	ldr	r3, [sp, #12]
 80076b4:	1d1a      	adds	r2, r3, #4
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	9203      	str	r2, [sp, #12]
 80076ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076be:	3402      	adds	r4, #2
 80076c0:	9305      	str	r3, [sp, #20]
 80076c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007798 <_vfiprintf_r+0x22c>
 80076c6:	7821      	ldrb	r1, [r4, #0]
 80076c8:	2203      	movs	r2, #3
 80076ca:	4650      	mov	r0, sl
 80076cc:	f7f8 fe08 	bl	80002e0 <memchr>
 80076d0:	b138      	cbz	r0, 80076e2 <_vfiprintf_r+0x176>
 80076d2:	9b04      	ldr	r3, [sp, #16]
 80076d4:	eba0 000a 	sub.w	r0, r0, sl
 80076d8:	2240      	movs	r2, #64	@ 0x40
 80076da:	4082      	lsls	r2, r0
 80076dc:	4313      	orrs	r3, r2
 80076de:	3401      	adds	r4, #1
 80076e0:	9304      	str	r3, [sp, #16]
 80076e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e6:	4829      	ldr	r0, [pc, #164]	@ (800778c <_vfiprintf_r+0x220>)
 80076e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076ec:	2206      	movs	r2, #6
 80076ee:	f7f8 fdf7 	bl	80002e0 <memchr>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d03f      	beq.n	8007776 <_vfiprintf_r+0x20a>
 80076f6:	4b26      	ldr	r3, [pc, #152]	@ (8007790 <_vfiprintf_r+0x224>)
 80076f8:	bb1b      	cbnz	r3, 8007742 <_vfiprintf_r+0x1d6>
 80076fa:	9b03      	ldr	r3, [sp, #12]
 80076fc:	3307      	adds	r3, #7
 80076fe:	f023 0307 	bic.w	r3, r3, #7
 8007702:	3308      	adds	r3, #8
 8007704:	9303      	str	r3, [sp, #12]
 8007706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007708:	443b      	add	r3, r7
 800770a:	9309      	str	r3, [sp, #36]	@ 0x24
 800770c:	e76a      	b.n	80075e4 <_vfiprintf_r+0x78>
 800770e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007712:	460c      	mov	r4, r1
 8007714:	2001      	movs	r0, #1
 8007716:	e7a8      	b.n	800766a <_vfiprintf_r+0xfe>
 8007718:	2300      	movs	r3, #0
 800771a:	3401      	adds	r4, #1
 800771c:	9305      	str	r3, [sp, #20]
 800771e:	4619      	mov	r1, r3
 8007720:	f04f 0c0a 	mov.w	ip, #10
 8007724:	4620      	mov	r0, r4
 8007726:	f810 2b01 	ldrb.w	r2, [r0], #1
 800772a:	3a30      	subs	r2, #48	@ 0x30
 800772c:	2a09      	cmp	r2, #9
 800772e:	d903      	bls.n	8007738 <_vfiprintf_r+0x1cc>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0c6      	beq.n	80076c2 <_vfiprintf_r+0x156>
 8007734:	9105      	str	r1, [sp, #20]
 8007736:	e7c4      	b.n	80076c2 <_vfiprintf_r+0x156>
 8007738:	fb0c 2101 	mla	r1, ip, r1, r2
 800773c:	4604      	mov	r4, r0
 800773e:	2301      	movs	r3, #1
 8007740:	e7f0      	b.n	8007724 <_vfiprintf_r+0x1b8>
 8007742:	ab03      	add	r3, sp, #12
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	462a      	mov	r2, r5
 8007748:	4b12      	ldr	r3, [pc, #72]	@ (8007794 <_vfiprintf_r+0x228>)
 800774a:	a904      	add	r1, sp, #16
 800774c:	4630      	mov	r0, r6
 800774e:	f7fd fe4f 	bl	80053f0 <_printf_float>
 8007752:	4607      	mov	r7, r0
 8007754:	1c78      	adds	r0, r7, #1
 8007756:	d1d6      	bne.n	8007706 <_vfiprintf_r+0x19a>
 8007758:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800775a:	07d9      	lsls	r1, r3, #31
 800775c:	d405      	bmi.n	800776a <_vfiprintf_r+0x1fe>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	059a      	lsls	r2, r3, #22
 8007762:	d402      	bmi.n	800776a <_vfiprintf_r+0x1fe>
 8007764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007766:	f7fe fc73 	bl	8006050 <__retarget_lock_release_recursive>
 800776a:	89ab      	ldrh	r3, [r5, #12]
 800776c:	065b      	lsls	r3, r3, #25
 800776e:	f53f af1f 	bmi.w	80075b0 <_vfiprintf_r+0x44>
 8007772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007774:	e71e      	b.n	80075b4 <_vfiprintf_r+0x48>
 8007776:	ab03      	add	r3, sp, #12
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	462a      	mov	r2, r5
 800777c:	4b05      	ldr	r3, [pc, #20]	@ (8007794 <_vfiprintf_r+0x228>)
 800777e:	a904      	add	r1, sp, #16
 8007780:	4630      	mov	r0, r6
 8007782:	f7fe f8bd 	bl	8005900 <_printf_i>
 8007786:	e7e4      	b.n	8007752 <_vfiprintf_r+0x1e6>
 8007788:	08008048 	.word	0x08008048
 800778c:	08008052 	.word	0x08008052
 8007790:	080053f1 	.word	0x080053f1
 8007794:	08007547 	.word	0x08007547
 8007798:	0800804e 	.word	0x0800804e

0800779c <__sflush_r>:
 800779c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a4:	0716      	lsls	r6, r2, #28
 80077a6:	4605      	mov	r5, r0
 80077a8:	460c      	mov	r4, r1
 80077aa:	d454      	bmi.n	8007856 <__sflush_r+0xba>
 80077ac:	684b      	ldr	r3, [r1, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	dc02      	bgt.n	80077b8 <__sflush_r+0x1c>
 80077b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dd48      	ble.n	800784a <__sflush_r+0xae>
 80077b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077ba:	2e00      	cmp	r6, #0
 80077bc:	d045      	beq.n	800784a <__sflush_r+0xae>
 80077be:	2300      	movs	r3, #0
 80077c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077c4:	682f      	ldr	r7, [r5, #0]
 80077c6:	6a21      	ldr	r1, [r4, #32]
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	d030      	beq.n	800782e <__sflush_r+0x92>
 80077cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	0759      	lsls	r1, r3, #29
 80077d2:	d505      	bpl.n	80077e0 <__sflush_r+0x44>
 80077d4:	6863      	ldr	r3, [r4, #4]
 80077d6:	1ad2      	subs	r2, r2, r3
 80077d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077da:	b10b      	cbz	r3, 80077e0 <__sflush_r+0x44>
 80077dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	2300      	movs	r3, #0
 80077e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077e4:	6a21      	ldr	r1, [r4, #32]
 80077e6:	4628      	mov	r0, r5
 80077e8:	47b0      	blx	r6
 80077ea:	1c43      	adds	r3, r0, #1
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	d106      	bne.n	80077fe <__sflush_r+0x62>
 80077f0:	6829      	ldr	r1, [r5, #0]
 80077f2:	291d      	cmp	r1, #29
 80077f4:	d82b      	bhi.n	800784e <__sflush_r+0xb2>
 80077f6:	4a2a      	ldr	r2, [pc, #168]	@ (80078a0 <__sflush_r+0x104>)
 80077f8:	410a      	asrs	r2, r1
 80077fa:	07d6      	lsls	r6, r2, #31
 80077fc:	d427      	bmi.n	800784e <__sflush_r+0xb2>
 80077fe:	2200      	movs	r2, #0
 8007800:	6062      	str	r2, [r4, #4]
 8007802:	04d9      	lsls	r1, r3, #19
 8007804:	6922      	ldr	r2, [r4, #16]
 8007806:	6022      	str	r2, [r4, #0]
 8007808:	d504      	bpl.n	8007814 <__sflush_r+0x78>
 800780a:	1c42      	adds	r2, r0, #1
 800780c:	d101      	bne.n	8007812 <__sflush_r+0x76>
 800780e:	682b      	ldr	r3, [r5, #0]
 8007810:	b903      	cbnz	r3, 8007814 <__sflush_r+0x78>
 8007812:	6560      	str	r0, [r4, #84]	@ 0x54
 8007814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007816:	602f      	str	r7, [r5, #0]
 8007818:	b1b9      	cbz	r1, 800784a <__sflush_r+0xae>
 800781a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800781e:	4299      	cmp	r1, r3
 8007820:	d002      	beq.n	8007828 <__sflush_r+0x8c>
 8007822:	4628      	mov	r0, r5
 8007824:	f7ff f9f6 	bl	8006c14 <_free_r>
 8007828:	2300      	movs	r3, #0
 800782a:	6363      	str	r3, [r4, #52]	@ 0x34
 800782c:	e00d      	b.n	800784a <__sflush_r+0xae>
 800782e:	2301      	movs	r3, #1
 8007830:	4628      	mov	r0, r5
 8007832:	47b0      	blx	r6
 8007834:	4602      	mov	r2, r0
 8007836:	1c50      	adds	r0, r2, #1
 8007838:	d1c9      	bne.n	80077ce <__sflush_r+0x32>
 800783a:	682b      	ldr	r3, [r5, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d0c6      	beq.n	80077ce <__sflush_r+0x32>
 8007840:	2b1d      	cmp	r3, #29
 8007842:	d001      	beq.n	8007848 <__sflush_r+0xac>
 8007844:	2b16      	cmp	r3, #22
 8007846:	d11e      	bne.n	8007886 <__sflush_r+0xea>
 8007848:	602f      	str	r7, [r5, #0]
 800784a:	2000      	movs	r0, #0
 800784c:	e022      	b.n	8007894 <__sflush_r+0xf8>
 800784e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007852:	b21b      	sxth	r3, r3
 8007854:	e01b      	b.n	800788e <__sflush_r+0xf2>
 8007856:	690f      	ldr	r7, [r1, #16]
 8007858:	2f00      	cmp	r7, #0
 800785a:	d0f6      	beq.n	800784a <__sflush_r+0xae>
 800785c:	0793      	lsls	r3, r2, #30
 800785e:	680e      	ldr	r6, [r1, #0]
 8007860:	bf08      	it	eq
 8007862:	694b      	ldreq	r3, [r1, #20]
 8007864:	600f      	str	r7, [r1, #0]
 8007866:	bf18      	it	ne
 8007868:	2300      	movne	r3, #0
 800786a:	eba6 0807 	sub.w	r8, r6, r7
 800786e:	608b      	str	r3, [r1, #8]
 8007870:	f1b8 0f00 	cmp.w	r8, #0
 8007874:	dde9      	ble.n	800784a <__sflush_r+0xae>
 8007876:	6a21      	ldr	r1, [r4, #32]
 8007878:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800787a:	4643      	mov	r3, r8
 800787c:	463a      	mov	r2, r7
 800787e:	4628      	mov	r0, r5
 8007880:	47b0      	blx	r6
 8007882:	2800      	cmp	r0, #0
 8007884:	dc08      	bgt.n	8007898 <__sflush_r+0xfc>
 8007886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800788a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800788e:	81a3      	strh	r3, [r4, #12]
 8007890:	f04f 30ff 	mov.w	r0, #4294967295
 8007894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007898:	4407      	add	r7, r0
 800789a:	eba8 0800 	sub.w	r8, r8, r0
 800789e:	e7e7      	b.n	8007870 <__sflush_r+0xd4>
 80078a0:	dfbffffe 	.word	0xdfbffffe

080078a4 <_fflush_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	690b      	ldr	r3, [r1, #16]
 80078a8:	4605      	mov	r5, r0
 80078aa:	460c      	mov	r4, r1
 80078ac:	b913      	cbnz	r3, 80078b4 <_fflush_r+0x10>
 80078ae:	2500      	movs	r5, #0
 80078b0:	4628      	mov	r0, r5
 80078b2:	bd38      	pop	{r3, r4, r5, pc}
 80078b4:	b118      	cbz	r0, 80078be <_fflush_r+0x1a>
 80078b6:	6a03      	ldr	r3, [r0, #32]
 80078b8:	b90b      	cbnz	r3, 80078be <_fflush_r+0x1a>
 80078ba:	f7fe f9cd 	bl	8005c58 <__sinit>
 80078be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0f3      	beq.n	80078ae <_fflush_r+0xa>
 80078c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078c8:	07d0      	lsls	r0, r2, #31
 80078ca:	d404      	bmi.n	80078d6 <_fflush_r+0x32>
 80078cc:	0599      	lsls	r1, r3, #22
 80078ce:	d402      	bmi.n	80078d6 <_fflush_r+0x32>
 80078d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078d2:	f7fe fbbc 	bl	800604e <__retarget_lock_acquire_recursive>
 80078d6:	4628      	mov	r0, r5
 80078d8:	4621      	mov	r1, r4
 80078da:	f7ff ff5f 	bl	800779c <__sflush_r>
 80078de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078e0:	07da      	lsls	r2, r3, #31
 80078e2:	4605      	mov	r5, r0
 80078e4:	d4e4      	bmi.n	80078b0 <_fflush_r+0xc>
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	059b      	lsls	r3, r3, #22
 80078ea:	d4e1      	bmi.n	80078b0 <_fflush_r+0xc>
 80078ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078ee:	f7fe fbaf 	bl	8006050 <__retarget_lock_release_recursive>
 80078f2:	e7dd      	b.n	80078b0 <_fflush_r+0xc>

080078f4 <__swhatbuf_r>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	460c      	mov	r4, r1
 80078f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fc:	2900      	cmp	r1, #0
 80078fe:	b096      	sub	sp, #88	@ 0x58
 8007900:	4615      	mov	r5, r2
 8007902:	461e      	mov	r6, r3
 8007904:	da0d      	bge.n	8007922 <__swhatbuf_r+0x2e>
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800790c:	f04f 0100 	mov.w	r1, #0
 8007910:	bf14      	ite	ne
 8007912:	2340      	movne	r3, #64	@ 0x40
 8007914:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007918:	2000      	movs	r0, #0
 800791a:	6031      	str	r1, [r6, #0]
 800791c:	602b      	str	r3, [r5, #0]
 800791e:	b016      	add	sp, #88	@ 0x58
 8007920:	bd70      	pop	{r4, r5, r6, pc}
 8007922:	466a      	mov	r2, sp
 8007924:	f000 f848 	bl	80079b8 <_fstat_r>
 8007928:	2800      	cmp	r0, #0
 800792a:	dbec      	blt.n	8007906 <__swhatbuf_r+0x12>
 800792c:	9901      	ldr	r1, [sp, #4]
 800792e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007932:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007936:	4259      	negs	r1, r3
 8007938:	4159      	adcs	r1, r3
 800793a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800793e:	e7eb      	b.n	8007918 <__swhatbuf_r+0x24>

08007940 <__smakebuf_r>:
 8007940:	898b      	ldrh	r3, [r1, #12]
 8007942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007944:	079d      	lsls	r5, r3, #30
 8007946:	4606      	mov	r6, r0
 8007948:	460c      	mov	r4, r1
 800794a:	d507      	bpl.n	800795c <__smakebuf_r+0x1c>
 800794c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	6123      	str	r3, [r4, #16]
 8007954:	2301      	movs	r3, #1
 8007956:	6163      	str	r3, [r4, #20]
 8007958:	b003      	add	sp, #12
 800795a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800795c:	ab01      	add	r3, sp, #4
 800795e:	466a      	mov	r2, sp
 8007960:	f7ff ffc8 	bl	80078f4 <__swhatbuf_r>
 8007964:	9f00      	ldr	r7, [sp, #0]
 8007966:	4605      	mov	r5, r0
 8007968:	4639      	mov	r1, r7
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff f9c6 	bl	8006cfc <_malloc_r>
 8007970:	b948      	cbnz	r0, 8007986 <__smakebuf_r+0x46>
 8007972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007976:	059a      	lsls	r2, r3, #22
 8007978:	d4ee      	bmi.n	8007958 <__smakebuf_r+0x18>
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	f043 0302 	orr.w	r3, r3, #2
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	e7e2      	b.n	800794c <__smakebuf_r+0xc>
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	6020      	str	r0, [r4, #0]
 800798a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	9b01      	ldr	r3, [sp, #4]
 8007992:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007996:	b15b      	cbz	r3, 80079b0 <__smakebuf_r+0x70>
 8007998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800799c:	4630      	mov	r0, r6
 800799e:	f000 f81d 	bl	80079dc <_isatty_r>
 80079a2:	b128      	cbz	r0, 80079b0 <__smakebuf_r+0x70>
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f023 0303 	bic.w	r3, r3, #3
 80079aa:	f043 0301 	orr.w	r3, r3, #1
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	431d      	orrs	r5, r3
 80079b4:	81a5      	strh	r5, [r4, #12]
 80079b6:	e7cf      	b.n	8007958 <__smakebuf_r+0x18>

080079b8 <_fstat_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4d07      	ldr	r5, [pc, #28]	@ (80079d8 <_fstat_r+0x20>)
 80079bc:	2300      	movs	r3, #0
 80079be:	4604      	mov	r4, r0
 80079c0:	4608      	mov	r0, r1
 80079c2:	4611      	mov	r1, r2
 80079c4:	602b      	str	r3, [r5, #0]
 80079c6:	f7f9 fdb8 	bl	800153a <_fstat>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	d102      	bne.n	80079d4 <_fstat_r+0x1c>
 80079ce:	682b      	ldr	r3, [r5, #0]
 80079d0:	b103      	cbz	r3, 80079d4 <_fstat_r+0x1c>
 80079d2:	6023      	str	r3, [r4, #0]
 80079d4:	bd38      	pop	{r3, r4, r5, pc}
 80079d6:	bf00      	nop
 80079d8:	24000404 	.word	0x24000404

080079dc <_isatty_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4d06      	ldr	r5, [pc, #24]	@ (80079f8 <_isatty_r+0x1c>)
 80079e0:	2300      	movs	r3, #0
 80079e2:	4604      	mov	r4, r0
 80079e4:	4608      	mov	r0, r1
 80079e6:	602b      	str	r3, [r5, #0]
 80079e8:	f7f9 fdb7 	bl	800155a <_isatty>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d102      	bne.n	80079f6 <_isatty_r+0x1a>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	b103      	cbz	r3, 80079f6 <_isatty_r+0x1a>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	24000404 	.word	0x24000404

080079fc <_sbrk_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4d06      	ldr	r5, [pc, #24]	@ (8007a18 <_sbrk_r+0x1c>)
 8007a00:	2300      	movs	r3, #0
 8007a02:	4604      	mov	r4, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	602b      	str	r3, [r5, #0]
 8007a08:	f7f9 fdc0 	bl	800158c <_sbrk>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_sbrk_r+0x1a>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_sbrk_r+0x1a>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	24000404 	.word	0x24000404

08007a1c <memcpy>:
 8007a1c:	440a      	add	r2, r1
 8007a1e:	4291      	cmp	r1, r2
 8007a20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a24:	d100      	bne.n	8007a28 <memcpy+0xc>
 8007a26:	4770      	bx	lr
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a32:	4291      	cmp	r1, r2
 8007a34:	d1f9      	bne.n	8007a2a <memcpy+0xe>
 8007a36:	bd10      	pop	{r4, pc}

08007a38 <__assert_func>:
 8007a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a3a:	4614      	mov	r4, r2
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	4b09      	ldr	r3, [pc, #36]	@ (8007a64 <__assert_func+0x2c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4605      	mov	r5, r0
 8007a44:	68d8      	ldr	r0, [r3, #12]
 8007a46:	b954      	cbnz	r4, 8007a5e <__assert_func+0x26>
 8007a48:	4b07      	ldr	r3, [pc, #28]	@ (8007a68 <__assert_func+0x30>)
 8007a4a:	461c      	mov	r4, r3
 8007a4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a50:	9100      	str	r1, [sp, #0]
 8007a52:	462b      	mov	r3, r5
 8007a54:	4905      	ldr	r1, [pc, #20]	@ (8007a6c <__assert_func+0x34>)
 8007a56:	f000 f841 	bl	8007adc <fiprintf>
 8007a5a:	f000 f851 	bl	8007b00 <abort>
 8007a5e:	4b04      	ldr	r3, [pc, #16]	@ (8007a70 <__assert_func+0x38>)
 8007a60:	e7f4      	b.n	8007a4c <__assert_func+0x14>
 8007a62:	bf00      	nop
 8007a64:	24000024 	.word	0x24000024
 8007a68:	0800809e 	.word	0x0800809e
 8007a6c:	08008070 	.word	0x08008070
 8007a70:	08008063 	.word	0x08008063

08007a74 <_calloc_r>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	fba1 5402 	umull	r5, r4, r1, r2
 8007a7a:	b93c      	cbnz	r4, 8007a8c <_calloc_r+0x18>
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	f7ff f93d 	bl	8006cfc <_malloc_r>
 8007a82:	4606      	mov	r6, r0
 8007a84:	b928      	cbnz	r0, 8007a92 <_calloc_r+0x1e>
 8007a86:	2600      	movs	r6, #0
 8007a88:	4630      	mov	r0, r6
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	220c      	movs	r2, #12
 8007a8e:	6002      	str	r2, [r0, #0]
 8007a90:	e7f9      	b.n	8007a86 <_calloc_r+0x12>
 8007a92:	462a      	mov	r2, r5
 8007a94:	4621      	mov	r1, r4
 8007a96:	f7fe fa5d 	bl	8005f54 <memset>
 8007a9a:	e7f5      	b.n	8007a88 <_calloc_r+0x14>

08007a9c <__ascii_mbtowc>:
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	b901      	cbnz	r1, 8007aa2 <__ascii_mbtowc+0x6>
 8007aa0:	a901      	add	r1, sp, #4
 8007aa2:	b142      	cbz	r2, 8007ab6 <__ascii_mbtowc+0x1a>
 8007aa4:	b14b      	cbz	r3, 8007aba <__ascii_mbtowc+0x1e>
 8007aa6:	7813      	ldrb	r3, [r2, #0]
 8007aa8:	600b      	str	r3, [r1, #0]
 8007aaa:	7812      	ldrb	r2, [r2, #0]
 8007aac:	1e10      	subs	r0, r2, #0
 8007aae:	bf18      	it	ne
 8007ab0:	2001      	movne	r0, #1
 8007ab2:	b002      	add	sp, #8
 8007ab4:	4770      	bx	lr
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	e7fb      	b.n	8007ab2 <__ascii_mbtowc+0x16>
 8007aba:	f06f 0001 	mvn.w	r0, #1
 8007abe:	e7f8      	b.n	8007ab2 <__ascii_mbtowc+0x16>

08007ac0 <__ascii_wctomb>:
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	4608      	mov	r0, r1
 8007ac4:	b141      	cbz	r1, 8007ad8 <__ascii_wctomb+0x18>
 8007ac6:	2aff      	cmp	r2, #255	@ 0xff
 8007ac8:	d904      	bls.n	8007ad4 <__ascii_wctomb+0x14>
 8007aca:	228a      	movs	r2, #138	@ 0x8a
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad2:	4770      	bx	lr
 8007ad4:	700a      	strb	r2, [r1, #0]
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	4770      	bx	lr
	...

08007adc <fiprintf>:
 8007adc:	b40e      	push	{r1, r2, r3}
 8007ade:	b503      	push	{r0, r1, lr}
 8007ae0:	4601      	mov	r1, r0
 8007ae2:	ab03      	add	r3, sp, #12
 8007ae4:	4805      	ldr	r0, [pc, #20]	@ (8007afc <fiprintf+0x20>)
 8007ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aea:	6800      	ldr	r0, [r0, #0]
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	f7ff fd3d 	bl	800756c <_vfiprintf_r>
 8007af2:	b002      	add	sp, #8
 8007af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007af8:	b003      	add	sp, #12
 8007afa:	4770      	bx	lr
 8007afc:	24000024 	.word	0x24000024

08007b00 <abort>:
 8007b00:	b508      	push	{r3, lr}
 8007b02:	2006      	movs	r0, #6
 8007b04:	f000 f82c 	bl	8007b60 <raise>
 8007b08:	2001      	movs	r0, #1
 8007b0a:	f7f9 fce2 	bl	80014d2 <_exit>

08007b0e <_raise_r>:
 8007b0e:	291f      	cmp	r1, #31
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4605      	mov	r5, r0
 8007b14:	460c      	mov	r4, r1
 8007b16:	d904      	bls.n	8007b22 <_raise_r+0x14>
 8007b18:	2316      	movs	r3, #22
 8007b1a:	6003      	str	r3, [r0, #0]
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b20:	bd38      	pop	{r3, r4, r5, pc}
 8007b22:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b24:	b112      	cbz	r2, 8007b2c <_raise_r+0x1e>
 8007b26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b2a:	b94b      	cbnz	r3, 8007b40 <_raise_r+0x32>
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f000 f831 	bl	8007b94 <_getpid_r>
 8007b32:	4622      	mov	r2, r4
 8007b34:	4601      	mov	r1, r0
 8007b36:	4628      	mov	r0, r5
 8007b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b3c:	f000 b818 	b.w	8007b70 <_kill_r>
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d00a      	beq.n	8007b5a <_raise_r+0x4c>
 8007b44:	1c59      	adds	r1, r3, #1
 8007b46:	d103      	bne.n	8007b50 <_raise_r+0x42>
 8007b48:	2316      	movs	r3, #22
 8007b4a:	6003      	str	r3, [r0, #0]
 8007b4c:	2001      	movs	r0, #1
 8007b4e:	e7e7      	b.n	8007b20 <_raise_r+0x12>
 8007b50:	2100      	movs	r1, #0
 8007b52:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b56:	4620      	mov	r0, r4
 8007b58:	4798      	blx	r3
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	e7e0      	b.n	8007b20 <_raise_r+0x12>
	...

08007b60 <raise>:
 8007b60:	4b02      	ldr	r3, [pc, #8]	@ (8007b6c <raise+0xc>)
 8007b62:	4601      	mov	r1, r0
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	f7ff bfd2 	b.w	8007b0e <_raise_r>
 8007b6a:	bf00      	nop
 8007b6c:	24000024 	.word	0x24000024

08007b70 <_kill_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d07      	ldr	r5, [pc, #28]	@ (8007b90 <_kill_r+0x20>)
 8007b74:	2300      	movs	r3, #0
 8007b76:	4604      	mov	r4, r0
 8007b78:	4608      	mov	r0, r1
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	602b      	str	r3, [r5, #0]
 8007b7e:	f7f9 fc98 	bl	80014b2 <_kill>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	d102      	bne.n	8007b8c <_kill_r+0x1c>
 8007b86:	682b      	ldr	r3, [r5, #0]
 8007b88:	b103      	cbz	r3, 8007b8c <_kill_r+0x1c>
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	bd38      	pop	{r3, r4, r5, pc}
 8007b8e:	bf00      	nop
 8007b90:	24000404 	.word	0x24000404

08007b94 <_getpid_r>:
 8007b94:	f7f9 bc85 	b.w	80014a2 <_getpid>

08007b98 <_init>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	bf00      	nop
 8007b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9e:	bc08      	pop	{r3}
 8007ba0:	469e      	mov	lr, r3
 8007ba2:	4770      	bx	lr

08007ba4 <_fini>:
 8007ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba6:	bf00      	nop
 8007ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007baa:	bc08      	pop	{r3}
 8007bac:	469e      	mov	lr, r3
 8007bae:	4770      	bx	lr
