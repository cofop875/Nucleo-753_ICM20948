
Nucleo-753_ICM20948.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08007b48  08007b48  00008b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008070  08008070  00009070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008078  08008078  00009078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800807c  0800807c  0000907c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  08008080  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000234  240001e0  08008260  0000a1e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000414  08008260  0000a414  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c63b  00000000  00000000  0000a20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f6f  00000000  00000000  00016849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a40  00000000  00000000  000187b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007a1  00000000  00000000  000191f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000370c5  00000000  00000000  00019999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d4f2  00000000  00000000  00050a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00158cf0  00000000  00000000  0005df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b6c40  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003754  00000000  00000000  001b6c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  001ba3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007b30 	.word	0x08007b30

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08007b30 	.word	0x08007b30

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <ICM20948_CS_Select>:

/**
 * @brief 選取 ICM-20948 的 SPI 片選 (CS) 引腳 (設為低電位)。
 * @note  使用 main.h 中定義的 ICM20948_CS_GPIO_Port 和 ICM20948_CS_Pin。
 */
void ICM20948_CS_Select(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800039c:	4808      	ldr	r0, [pc, #32]	@ (80003c0 <ICM20948_CS_Select+0x30>)
 800039e:	f001 fdab 	bl	8001ef8 <HAL_GPIO_WritePin>
    // HAL_Delay(1) 太長，但對於基本功能通常可行。若有高速通訊問題可考慮更精確的延遲或移除。
    // 若 SPI 時脈很慢，此延遲可能不需要或可以縮短。
    // 為了確保穩定性，保留一個非常短的延遲或直接移除，取決於 SPI 時脈和硬體特性。
    // 如果 SPI 時脈在 MHz 等級，CPU 指令本身可能就足夠。
    // 這裡保留 HAL_Delay(1) 作為一個保守的選擇，但可以根據實際測試進行優化。
    for (volatile int i = 0; i < 10; i++); // 非常短的延遲替代 HAL_Delay(1)
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	e002      	b.n	80003ae <ICM20948_CS_Select+0x1e>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2b09      	cmp	r3, #9
 80003b2:	ddf9      	ble.n	80003a8 <ICM20948_CS_Select+0x18>
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58020c00 	.word	0x58020c00

080003c4 <ICM20948_CS_Deselect>:

/**
 * @brief 取消選取 ICM-20948 的 SPI 片選 (CS) 引腳 (設為高電位)。
 * @note  使用 main.h 中定義的 ICM20948_CS_GPIO_Port 和 ICM20948_CS_Pin。
 */
void ICM20948_CS_Deselect(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003d0:	4808      	ldr	r0, [pc, #32]	@ (80003f4 <ICM20948_CS_Deselect+0x30>)
 80003d2:	f001 fd91 	bl	8001ef8 <HAL_GPIO_WritePin>
    // Datasheet 建議 SCLK 下降沿到 CS 高電位至少 20ns (tCSH)
    // 同上，HAL_Delay(1) 可能過長。
    for (volatile int i = 0; i < 10; i++); // 非常短的延遲
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	e002      	b.n	80003e2 <ICM20948_CS_Deselect+0x1e>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3301      	adds	r3, #1
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b09      	cmp	r3, #9
 80003e6:	ddf9      	ble.n	80003dc <ICM20948_CS_Deselect+0x18>
}
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	58020c00 	.word	0x58020c00

080003f8 <ICM20948_WriteByte>:
 * @brief 透過 SPI 寫入單一位元組數據至 ICM-20948 指定暫存器。
 * @param reg_addr: 目標暫存器位址 (7位元，最高位元為0代表寫入)。
 * @param data:     要寫入的數據。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_WriteByte(uint8_t reg_addr, uint8_t data) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	460a      	mov	r2, r1
 8000402:	71fb      	strb	r3, [r7, #7]
 8000404:	4613      	mov	r3, r2
 8000406:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buffer[2];
    HAL_StatusTypeDef status;

    tx_buffer[0] = reg_addr & 0x7F; // 寫入操作，MSB 為 0
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800040e:	b2db      	uxtb	r3, r3
 8000410:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = data;
 8000412:	79bb      	ldrb	r3, [r7, #6]
 8000414:	737b      	strb	r3, [r7, #13]

    ICM20948_CS_Select();
 8000416:	f7ff ffbb 	bl	8000390 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, tx_buffer, 2, SPI_TIMEOUT);
 800041a:	f107 010c 	add.w	r1, r7, #12
 800041e:	2364      	movs	r3, #100	@ 0x64
 8000420:	2202      	movs	r2, #2
 8000422:	4806      	ldr	r0, [pc, #24]	@ (800043c <ICM20948_WriteByte+0x44>)
 8000424:	f004 f9d8 	bl	80047d8 <HAL_SPI_Transmit>
 8000428:	4603      	mov	r3, r0
 800042a:	73fb      	strb	r3, [r7, #15]
    ICM20948_CS_Deselect();
 800042c:	f7ff ffca 	bl	80003c4 <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理，例如記錄錯誤或重試
    }
    return status;
 8000430:	7bfb      	ldrb	r3, [r7, #15]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	24000238 	.word	0x24000238

08000440 <ICM20948_ReadByte>:
 * @brief 透過 SPI 從 ICM-20948 指定暫存器讀取單一位元組數據。
 * @param reg_addr: 目標暫存器位址 (7位元，最高位元為1代表讀取)。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadByte(uint8_t reg_addr, uint8_t *pData) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	6039      	str	r1, [r7, #0]
 800044a:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte;
    HAL_StatusTypeDef status;

    tx_byte = reg_addr | 0x80; // 讀取操作，MSB 為 1
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000452:	b2db      	uxtb	r3, r3
 8000454:	73bb      	strb	r3, [r7, #14]

    ICM20948_CS_Select();
 8000456:	f7ff ff9b 	bl	8000390 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, &tx_byte, 1, SPI_TIMEOUT); // 發送要讀取的暫存器位址
 800045a:	f107 010e 	add.w	r1, r7, #14
 800045e:	2364      	movs	r3, #100	@ 0x64
 8000460:	2201      	movs	r2, #1
 8000462:	480b      	ldr	r0, [pc, #44]	@ (8000490 <ICM20948_ReadByte+0x50>)
 8000464:	f004 f9b8 	bl	80047d8 <HAL_SPI_Transmit>
 8000468:	4603      	mov	r3, r0
 800046a:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d107      	bne.n	8000482 <ICM20948_ReadByte+0x42>
        status = HAL_SPI_Receive(&hspi1, pData, 1, SPI_TIMEOUT); // 接收數據
 8000472:	2364      	movs	r3, #100	@ 0x64
 8000474:	2201      	movs	r2, #1
 8000476:	6839      	ldr	r1, [r7, #0]
 8000478:	4805      	ldr	r0, [pc, #20]	@ (8000490 <ICM20948_ReadByte+0x50>)
 800047a:	f004 fb9b 	bl	8004bb4 <HAL_SPI_Receive>
 800047e:	4603      	mov	r3, r0
 8000480:	73fb      	strb	r3, [r7, #15]
    }
    ICM20948_CS_Deselect();
 8000482:	f7ff ff9f 	bl	80003c4 <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理
    }
    return status;
 8000486:	7bfb      	ldrb	r3, [r7, #15]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	24000238 	.word	0x24000238

08000494 <ICM20948_ReadBytes>:
 * @param reg_addr: 起始目標暫存器位址 (7位元，最高位元為1代表讀取)。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @param count:    要讀取的位元組數量。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadBytes(uint8_t reg_addr, uint8_t *pData, uint16_t count) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	6039      	str	r1, [r7, #0]
 800049e:	71fb      	strb	r3, [r7, #7]
 80004a0:	4613      	mov	r3, r2
 80004a2:	80bb      	strh	r3, [r7, #4]
    uint8_t tx_byte;
    HAL_StatusTypeDef status;

    tx_byte = reg_addr | 0x80; // 讀取操作，MSB 為 1
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	73bb      	strb	r3, [r7, #14]

    ICM20948_CS_Select();
 80004ae:	f7ff ff6f 	bl	8000390 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, &tx_byte, 1, SPI_TIMEOUT); // 發送起始暫存器位址
 80004b2:	f107 010e 	add.w	r1, r7, #14
 80004b6:	2364      	movs	r3, #100	@ 0x64
 80004b8:	2201      	movs	r2, #1
 80004ba:	480b      	ldr	r0, [pc, #44]	@ (80004e8 <ICM20948_ReadBytes+0x54>)
 80004bc:	f004 f98c 	bl	80047d8 <HAL_SPI_Transmit>
 80004c0:	4603      	mov	r3, r0
 80004c2:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d107      	bne.n	80004da <ICM20948_ReadBytes+0x46>
        status = HAL_SPI_Receive(&hspi1, pData, count, SPI_TIMEOUT); // 連續接收多個位元組
 80004ca:	88ba      	ldrh	r2, [r7, #4]
 80004cc:	2364      	movs	r3, #100	@ 0x64
 80004ce:	6839      	ldr	r1, [r7, #0]
 80004d0:	4805      	ldr	r0, [pc, #20]	@ (80004e8 <ICM20948_ReadBytes+0x54>)
 80004d2:	f004 fb6f 	bl	8004bb4 <HAL_SPI_Receive>
 80004d6:	4603      	mov	r3, r0
 80004d8:	73fb      	strb	r3, [r7, #15]
    }
    ICM20948_CS_Deselect();
 80004da:	f7ff ff73 	bl	80003c4 <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理
    }
    return status;
 80004de:	7bfb      	ldrb	r3, [r7, #15]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	24000238 	.word	0x24000238

080004ec <ICM20948_SelectUserBank>:
 * @param bank: 要選擇的庫編號 (0, 1, 2, 或 3)。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 * @note  REG_BANK_SEL 暫存器在所有庫中皆可存取。
 * 位元 [5:4] 用於選擇庫: 00 for UB0, 01 for UB1, 10 for UB2, 11 for UB3.
 */
HAL_StatusTypeDef ICM20948_SelectUserBank(uint8_t bank) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
    if (bank > 3) {
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d901      	bls.n	8000500 <ICM20948_SelectUserBank+0x14>
        return HAL_ERROR; // 無效的庫編號
 80004fc:	2301      	movs	r3, #1
 80004fe:	e007      	b.n	8000510 <ICM20948_SelectUserBank+0x24>
    // REG_BANK_SEL (0x7F) 的位元 [5:4] (USER_BANK) 控制庫選擇
    // bank 0 -> 0x00
    // bank 1 -> 0x10
    // bank 2 -> 0x20
    // bank 3 -> 0x30
    return ICM20948_WriteByte(ICM20948_REG_BANK_SEL, (bank << 4));
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	b2db      	uxtb	r3, r3
 8000506:	4619      	mov	r1, r3
 8000508:	207f      	movs	r0, #127	@ 0x7f
 800050a:	f7ff ff75 	bl	80003f8 <ICM20948_WriteByte>
 800050e:	4603      	mov	r3, r0
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <AK09916_WriteByteViaICM>:
 * @brief 透過 ICM-20948 的 I2C 主機介面，寫入單一位元組數據至 AK09916 磁力計指定暫存器。
 * @param reg_addr: AK09916 的目標暫存器位址。
 * @param data:     要寫入的數據。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_WriteByteViaICM(uint8_t reg_addr, uint8_t data) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	460a      	mov	r2, r1
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	4613      	mov	r3, r2
 8000526:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t current_bank_sel_val;
    uint8_t target_bank = 3; // I2C 主機控制相關暫存器在庫 3
 8000528:	2303      	movs	r3, #3
 800052a:	73fb      	strb	r3, [r7, #15]
    // status = ICM20948_ReadByte(ICM20948_REG_BANK_SEL, &current_bank_sel_val);
    // if (status != HAL_OK) return status;
    // current_bank_sel_val = (current_bank_sel_val >> 4) & 0x03; // 提取庫號

    // 1. 切換到使用者庫 3
    status = ICM20948_SelectUserBank(target_bank);
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ffdc 	bl	80004ec <ICM20948_SelectUserBank>
 8000534:	4603      	mov	r3, r0
 8000536:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) return status;
 8000538:	7bbb      	ldrb	r3, [r7, #14]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <AK09916_WriteByteViaICM+0x2a>
 800053e:	7bbb      	ldrb	r3, [r7, #14]
 8000540:	e040      	b.n	80005c4 <AK09916_WriteByteViaICM+0xac>

    // 2. 設定從裝置位址 (AK09916_I2C_ADDR，不含 R/W 位元，表示寫入)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR); //  R/W bit is 0 for write
 8000542:	210c      	movs	r1, #12
 8000544:	2003      	movs	r0, #3
 8000546:	f7ff ff57 	bl	80003f8 <ICM20948_WriteByte>
 800054a:	4603      	mov	r3, r0
 800054c:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 800054e:	7bbb      	ldrb	r3, [r7, #14]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <AK09916_WriteByteViaICM+0x46>
        ICM20948_SelectUserBank(0); // 嘗試恢復到庫0
 8000554:	2000      	movs	r0, #0
 8000556:	f7ff ffc9 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 800055a:	7bbb      	ldrb	r3, [r7, #14]
 800055c:	e032      	b.n	80005c4 <AK09916_WriteByteViaICM+0xac>
    }

    // 3. 設定要寫入的 AK09916 內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	4619      	mov	r1, r3
 8000562:	2004      	movs	r0, #4
 8000564:	f7ff ff48 	bl	80003f8 <ICM20948_WriteByte>
 8000568:	4603      	mov	r3, r0
 800056a:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d004      	beq.n	800057c <AK09916_WriteByteViaICM+0x64>
        ICM20948_SelectUserBank(0);
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ffba 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 8000578:	7bbb      	ldrb	r3, [r7, #14]
 800057a:	e023      	b.n	80005c4 <AK09916_WriteByteViaICM+0xac>
    }

    // 4. 設定要寫入的數據
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_DO, data);
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	4619      	mov	r1, r3
 8000580:	2006      	movs	r0, #6
 8000582:	f7ff ff39 	bl	80003f8 <ICM20948_WriteByte>
 8000586:	4603      	mov	r3, r0
 8000588:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 800058a:	7bbb      	ldrb	r3, [r7, #14]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d004      	beq.n	800059a <AK09916_WriteByteViaICM+0x82>
        ICM20948_SelectUserBank(0);
 8000590:	2000      	movs	r0, #0
 8000592:	f7ff ffab 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	e014      	b.n	80005c4 <AK09916_WriteByteViaICM+0xac>
    }

    // 5. 致能 I2C 從裝置 0，並設定為寫入一個位元組，觸發傳輸
    //   I2C_SLV0_EN (bit 7) = 1 (致能)
    //   I2C_SLV0_LENG (bits 3:0) = 1 (傳輸 1 個位元組)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | 0x01);
 800059a:	2181      	movs	r1, #129	@ 0x81
 800059c:	2005      	movs	r0, #5
 800059e:	f7ff ff2b 	bl	80003f8 <ICM20948_WriteByte>
 80005a2:	4603      	mov	r3, r0
 80005a4:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d004      	beq.n	80005b6 <AK09916_WriteByteViaICM+0x9e>
        ICM20948_SelectUserBank(0);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ff9d 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 80005b2:	7bbb      	ldrb	r3, [r7, #14]
 80005b4:	e006      	b.n	80005c4 <AK09916_WriteByteViaICM+0xac>
    //    理想情況下，應該檢查 I2C_MST_STATUS 暫存器中的 I2C_SLV0_NACK 或 I2C_IF_DONE 位元。
    //    為簡化，這裡使用固定延遲。在實際應用中，需要更可靠的同步機制。
    //    ICM20948 datasheet 7.6節: "The I2C Master interface issues a STOP condition specific to the transaction length."
    //    "The I2C Master interface will stretch the main processor’s clock when an I2C transaction is in progress." (if I2C_MST_P_NSR=1 in I2C_MST_CTRL)
    //    這裡假設 I2C_MST_P_NSR=0 (預設)，所以需要軟體延遲或狀態檢查。
    HAL_Delay(5); // 稍微增加延遲以確保傳輸完成 (這個延遲可能需要調整，取決於 I2C 速度和目標設備)
 80005b6:	2005      	movs	r0, #5
 80005b8:	f001 f962 	bl	8001880 <HAL_Delay>
    //    status = ICM20948_ReadByte(0x17, &i2c_mst_status_val); // I2C_MST_STATUS (UB0)
    //    if (status != HAL_OK) return status;
    //    if (i2c_mst_status_val & 0x01) { /* I2C_SLV0_NACK */ return HAL_ERROR; }

    // 操作完成後，建議切換回常用的庫，例如庫 0
    return ICM20948_SelectUserBank(0);
 80005bc:	2000      	movs	r0, #0
 80005be:	f7ff ff95 	bl	80004ec <ICM20948_SelectUserBank>
 80005c2:	4603      	mov	r3, r0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <AK09916_ReadByteViaICM>:
 * @brief 透過 ICM-20948 的 I2C 主機介面，從 AK09916 磁力計指定暫存器讀取單一位元組數據。
 * @param reg_addr: AK09916 的目標暫存器位址。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_ReadByteViaICM(uint8_t reg_addr, uint8_t *pData) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t temp_data;
    uint8_t target_bank = 3; // I2C 主機控制相關暫存器在庫 3
 80005d8:	2303      	movs	r3, #3
 80005da:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read_bank = 0; // 外部感測器數據在庫 0
 80005dc:	2300      	movs	r3, #0
 80005de:	73bb      	strb	r3, [r7, #14]

    // 1. 切換到使用者庫 3，設定 I2C 從裝置相關暫存器
    status = ICM20948_SelectUserBank(target_bank);
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff82 	bl	80004ec <ICM20948_SelectUserBank>
 80005e8:	4603      	mov	r3, r0
 80005ea:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 80005ec:	7b7b      	ldrb	r3, [r7, #13]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <AK09916_ReadByteViaICM+0x2a>
 80005f2:	7b7b      	ldrb	r3, [r7, #13]
 80005f4:	e04a      	b.n	800068c <AK09916_ReadByteViaICM+0xc0>

    // 2. 設定從裝置位址 (AK09916_I2C_ADDR | 0x80，設定 R/W 位元為讀取)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR | 0x80);
 80005f6:	218c      	movs	r1, #140	@ 0x8c
 80005f8:	2003      	movs	r0, #3
 80005fa:	f7ff fefd 	bl	80003f8 <ICM20948_WriteByte>
 80005fe:	4603      	mov	r3, r0
 8000600:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000602:	7b7b      	ldrb	r3, [r7, #13]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d005      	beq.n	8000614 <AK09916_ReadByteViaICM+0x48>
        ICM20948_SelectUserBank(data_read_bank); // 嘗試恢復
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff6e 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 8000610:	7b7b      	ldrb	r3, [r7, #13]
 8000612:	e03b      	b.n	800068c <AK09916_ReadByteViaICM+0xc0>
    }

    // 3. 設定要讀取的 AK09916 內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4619      	mov	r1, r3
 8000618:	2004      	movs	r0, #4
 800061a:	f7ff feed 	bl	80003f8 <ICM20948_WriteByte>
 800061e:	4603      	mov	r3, r0
 8000620:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000622:	7b7b      	ldrb	r3, [r7, #13]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d005      	beq.n	8000634 <AK09916_ReadByteViaICM+0x68>
        ICM20948_SelectUserBank(data_read_bank);
 8000628:	7bbb      	ldrb	r3, [r7, #14]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff5e 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	e02b      	b.n	800068c <AK09916_ReadByteViaICM+0xc0>
    // 4. 致能 I2C 從裝置 0，設定為讀取一個位元組，並觸發讀取
    //   I2C_SLV0_EN (bit 7) = 1 (致能)
    //   I2C_SLV0_LENG (bits 3:0) = 1 (傳輸 1 個位元組)
    //   I2C_SLV0_REG_DIS (bit 5) = 0 (寫入 reg_addr)
    //   I2C_SLV0_BYTE_SW (bit 6) = 0 (預設)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | 0x01);
 8000634:	2181      	movs	r1, #129	@ 0x81
 8000636:	2005      	movs	r0, #5
 8000638:	f7ff fede 	bl	80003f8 <ICM20948_WriteByte>
 800063c:	4603      	mov	r3, r0
 800063e:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000640:	7b7b      	ldrb	r3, [r7, #13]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d005      	beq.n	8000652 <AK09916_ReadByteViaICM+0x86>
        ICM20948_SelectUserBank(data_read_bank);
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff4f 	bl	80004ec <ICM20948_SelectUserBank>
        return status;
 800064e:	7b7b      	ldrb	r3, [r7, #13]
 8000650:	e01c      	b.n	800068c <AK09916_ReadByteViaICM+0xc0>
    }

    // 5. 等待 I2C 傳輸完成並數據就緒
    HAL_Delay(5); // 這個延遲可能需要調整，最好是檢查狀態位元
 8000652:	2005      	movs	r0, #5
 8000654:	f001 f914 	bl	8001880 <HAL_Delay>

    // 6. 切換回使用者庫 0 以讀取外部感測器數據
    status = ICM20948_SelectUserBank(data_read_bank);
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff46 	bl	80004ec <ICM20948_SelectUserBank>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <AK09916_ReadByteViaICM+0xa2>
 800066a:	7b7b      	ldrb	r3, [r7, #13]
 800066c:	e00e      	b.n	800068c <AK09916_ReadByteViaICM+0xc0>

    // 7. 從 EXT_SLV_SENS_DATA_00 讀取數據
    //    ICM-20948 會自動將從 SLV0 讀到的數據放入 EXT_SLV_SENS_DATA_00 開始的暫存器中
    status = ICM20948_ReadByte(ICM20948_EXT_SLV_SENS_DATA_00, &temp_data);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4619      	mov	r1, r3
 8000674:	203b      	movs	r0, #59	@ 0x3b
 8000676:	f7ff fee3 	bl	8000440 <ICM20948_ReadByte>
 800067a:	4603      	mov	r3, r0
 800067c:	737b      	strb	r3, [r7, #13]
    if (status == HAL_OK) {
 800067e:	7b7b      	ldrb	r3, [r7, #13]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d102      	bne.n	800068a <AK09916_ReadByteViaICM+0xbe>
        *pData = temp_data;
 8000684:	7b3a      	ldrb	r2, [r7, #12]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	701a      	strb	r2, [r3, #0]
    }
    return status;
 800068a:	7b7b      	ldrb	r3, [r7, #13]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <ICM20948_Init>:

/**
 * @brief 初始化 ICM-20948 感測器 (包括加速計、陀螺儀和磁力計)。
 * @return HAL_StatusTypeDef: 初始化成功則返回 HAL_OK，否則返回 HAL_ERROR。
 */
HAL_StatusTypeDef ICM20948_Init(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	70fb      	strb	r3, [r7, #3]
    uint8_t who_am_i_val = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	70bb      	strb	r3, [r7, #2]
    uint8_t ak09916_wia2_val = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	707b      	strb	r3, [r7, #1]

    // --- 0. 確保 SPI CS 引腳初始為高電位 ---
    ICM20948_CS_Deselect(); // 使用更新後的 CS 控制函式
 80006a6:	f7ff fe8d 	bl	80003c4 <ICM20948_CS_Deselect>
    HAL_Delay(10); // 等待感測器上電穩定
 80006aa:	200a      	movs	r0, #10
 80006ac:	f001 f8e8 	bl	8001880 <HAL_Delay>

    // --- 1. 選擇使用者庫 0 ---
    status = ICM20948_SelectUserBank(0);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff ff1b 	bl	80004ec <ICM20948_SelectUserBank>
 80006b6:	4603      	mov	r3, r0
 80006b8:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR; // 如果切換庫失敗，則初始化失敗
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <ICM20948_Init+0x30>
 80006c0:	2301      	movs	r3, #1
 80006c2:	e10b      	b.n	80008dc <ICM20948_Init+0x248>

    // --- 2. 檢查 WHO_AM_I 暫存器 ---
    status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 80006c4:	1cbb      	adds	r3, r7, #2
 80006c6:	4619      	mov	r1, r3
 80006c8:	2000      	movs	r0, #0
 80006ca:	f7ff feb9 	bl	8000440 <ICM20948_ReadByte>
 80006ce:	4603      	mov	r3, r0
 80006d0:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK || who_am_i_val != 0xEA) { // 0xEA 是 ICM-20948 的預期值
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d102      	bne.n	80006de <ICM20948_Init+0x4a>
 80006d8:	78bb      	ldrb	r3, [r7, #2]
 80006da:	2bea      	cmp	r3, #234	@ 0xea
 80006dc:	d037      	beq.n	800074e <ICM20948_Init+0xba>
        // 可以嘗試多次讀取 WHO_AM_I，因為有時第一次通訊可能不穩定
        HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f001 f8ce 	bl	8001880 <HAL_Delay>
        // 嘗試多次讀取@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        for (int i = 0; i < 10; i++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	e01f      	b.n	800072a <ICM20948_Init+0x96>
            status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 80006ea:	1cbb      	adds	r3, r7, #2
 80006ec:	4619      	mov	r1, r3
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff fea6 	bl	8000440 <ICM20948_ReadByte>
 80006f4:	4603      	mov	r3, r0
 80006f6:	70fb      	strb	r3, [r7, #3]
            if (status == HAL_OK) {
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d108      	bne.n	8000710 <ICM20948_Init+0x7c>
                printf("WHO_AM_I: 0x%02X (Attempt %d)\r\n", who_am_i_val, i + 1);
 80006fe:	78bb      	ldrb	r3, [r7, #2]
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3301      	adds	r3, #1
 8000706:	461a      	mov	r2, r3
 8000708:	4876      	ldr	r0, [pc, #472]	@ (80008e4 <ICM20948_Init+0x250>)
 800070a:	f005 faa7 	bl	8005c5c <iprintf>
 800070e:	e006      	b.n	800071e <ICM20948_Init+0x8a>
            } else {
                printf("Read WHO_AM_I FAILED, Status: %d (Attempt %d)\r\n", status, i + 1);
 8000710:	78f9      	ldrb	r1, [r7, #3]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3301      	adds	r3, #1
 8000716:	461a      	mov	r2, r3
 8000718:	4873      	ldr	r0, [pc, #460]	@ (80008e8 <ICM20948_Init+0x254>)
 800071a:	f005 fa9f 	bl	8005c5c <iprintf>
            }
            HAL_Delay(50);
 800071e:	2032      	movs	r0, #50	@ 0x32
 8000720:	f001 f8ae 	bl	8001880 <HAL_Delay>
        for (int i = 0; i < 10; i++) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3301      	adds	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b09      	cmp	r3, #9
 800072e:	dddc      	ble.n	80006ea <ICM20948_Init+0x56>
        }
        // 嘗試多次讀取@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 8000730:	1cbb      	adds	r3, r7, #2
 8000732:	4619      	mov	r1, r3
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff fe83 	bl	8000440 <ICM20948_ReadByte>
 800073a:	4603      	mov	r3, r0
 800073c:	70fb      	strb	r3, [r7, #3]
        if (status != HAL_OK || who_am_i_val != 0xEA) {
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <ICM20948_Init+0xb6>
 8000744:	78bb      	ldrb	r3, [r7, #2]
 8000746:	2bea      	cmp	r3, #234	@ 0xea
 8000748:	d001      	beq.n	800074e <ICM20948_Init+0xba>
             return HAL_ERROR; // 裝置識別失敗
 800074a:	2301      	movs	r3, #1
 800074c:	e0c6      	b.n	80008dc <ICM20948_Init+0x248>
        }
    }

    // --- 3. 重設並喚醒裝置 ---
    // 寫入 0x80 到 PWR_MGMT_1 (DEVICE_RESET = 1)
    status = ICM20948_WriteByte(ICM20948_PWR_MGMT_1, 0x80);
 800074e:	2180      	movs	r1, #128	@ 0x80
 8000750:	2006      	movs	r0, #6
 8000752:	f7ff fe51 	bl	80003f8 <ICM20948_WriteByte>
 8000756:	4603      	mov	r3, r0
 8000758:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <ICM20948_Init+0xd0>
 8000760:	2301      	movs	r3, #1
 8000762:	e0bb      	b.n	80008dc <ICM20948_Init+0x248>
    HAL_Delay(100); // 等待重設完成 (Datasheet 建議 100ms)
 8000764:	2064      	movs	r0, #100	@ 0x64
 8000766:	f001 f88b 	bl	8001880 <HAL_Delay>

    // 從睡眠模式喚醒，並選擇時脈源
    // 寫入 0x01 到 PWR_MGMT_1 (CLKSEL = 1，選擇最佳可用時脈源，通常是內部20MHz振盪器, 自動選擇)
    // SLEEP = 0 (正常模式), TEMP_DIS = 0 (溫度感測器致能)
    status = ICM20948_WriteByte(ICM20948_PWR_MGMT_1, 0x01);
 800076a:	2101      	movs	r1, #1
 800076c:	2006      	movs	r0, #6
 800076e:	f7ff fe43 	bl	80003f8 <ICM20948_WriteByte>
 8000772:	4603      	mov	r3, r0
 8000774:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <ICM20948_Init+0xec>
 800077c:	2301      	movs	r3, #1
 800077e:	e0ad      	b.n	80008dc <ICM20948_Init+0x248>
    HAL_Delay(50); // 等待時脈穩定
 8000780:	2032      	movs	r0, #50	@ 0x32
 8000782:	f001 f87d 	bl	8001880 <HAL_Delay>

    // --- 4. 配置加速計和陀螺儀 ---
    // 切換到使用者庫 2
    status = ICM20948_SelectUserBank(2);
 8000786:	2002      	movs	r0, #2
 8000788:	f7ff feb0 	bl	80004ec <ICM20948_SelectUserBank>
 800078c:	4603      	mov	r3, r0
 800078e:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <ICM20948_Init+0x106>
 8000796:	2301      	movs	r3, #1
 8000798:	e0a0      	b.n	80008dc <ICM20948_Init+0x248>
    // ACCEL_DLPFCFG: 加速計數位低通濾波器配置 (bits 5:3)
    // 這裡設定為 ±2g, DLPF 致能 (ACCEL_FCHOICE=0), DLPFCFG = 1 (約 246Hz 頻寬, 3dB BW; ODR 1.125kHz)
    // ACCEL_CONFIG = (DLPFCFG << 3) | (ACCEL_FS_SEL << 1) | ACCEL_FCHOICE
    //              = (001 << 3)   | (00 << 1)        | 0
    //              = 0x08
    status = ICM20948_WriteByte(ICM20948_ACCEL_CONFIG, (0x01 << 3) | (0x00 << 1) | 0x00);
 800079a:	2108      	movs	r1, #8
 800079c:	2014      	movs	r0, #20
 800079e:	f7ff fe2b 	bl	80003f8 <ICM20948_WriteByte>
 80007a2:	4603      	mov	r3, r0
 80007a4:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d004      	beq.n	80007b6 <ICM20948_Init+0x122>
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff fe9d 	bl	80004ec <ICM20948_SelectUserBank>
 80007b2:	2301      	movs	r3, #1
 80007b4:	e092      	b.n	80008dc <ICM20948_Init+0x248>
    current_accel_sensitivity = ACCEL_SENSITIVITY_2G; // 更新當前靈敏度
 80007b6:	4b4d      	ldr	r3, [pc, #308]	@ (80008ec <ICM20948_Init+0x258>)
 80007b8:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80007bc:	601a      	str	r2, [r3, #0]
    // GYRO_DLPFCFG: 陀螺儀數位低通濾波器配置 (bits 5:3)
    // 這裡設定為 ±250dps, DLPF 致能 (GYRO_FCHOICE=0), DLPFCFG = 1 (約 196.6Hz 頻寬, 3dB BW; ODR 1.125kHz)
    // GYRO_CONFIG_1 = (DLPFCFG << 3) | (GYRO_FS_SEL << 1) | GYRO_FCHOICE
    //               = (001 << 3)   | (00 << 1)       | 0
    //               = 0x08
    status = ICM20948_WriteByte(ICM20948_GYRO_CONFIG_1, (0x01 << 3) | (0x00 << 1) | 0x00);
 80007be:	2108      	movs	r1, #8
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff fe19 	bl	80003f8 <ICM20948_WriteByte>
 80007c6:	4603      	mov	r3, r0
 80007c8:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <ICM20948_Init+0x146>
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff fe8b 	bl	80004ec <ICM20948_SelectUserBank>
 80007d6:	2301      	movs	r3, #1
 80007d8:	e080      	b.n	80008dc <ICM20948_Init+0x248>
    current_gyro_sensitivity = GYRO_SENSITIVITY_250DPS; // 更新當前靈敏度
 80007da:	4b45      	ldr	r3, [pc, #276]	@ (80008f0 <ICM20948_Init+0x25c>)
 80007dc:	4a45      	ldr	r2, [pc, #276]	@ (80008f4 <ICM20948_Init+0x260>)
 80007de:	601a      	str	r2, [r3, #0]
    // if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
    // status = ICM20948_WriteByte(ICM20948_ACCEL_SMPLRT_DIV_1, 0x00); // 加速計 ODR 高位元組
    // if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }

    // 切換回使用者庫 0
    status = ICM20948_SelectUserBank(0);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff fe83 	bl	80004ec <ICM20948_SelectUserBank>
 80007e6:	4603      	mov	r3, r0
 80007e8:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <ICM20948_Init+0x160>
 80007f0:	2301      	movs	r3, #1
 80007f2:	e073      	b.n	80008dc <ICM20948_Init+0x248>

    // --- 5. 配置 I2C 主機介面以與 AK09916 通訊 ---
    // 致能 I2C 主機模式 (USER_CTRL 的 I2C_MST_EN 位元 (bit 5))
    uint8_t user_ctrl_val;
    status = ICM20948_ReadByte(ICM20948_USER_CTRL, &user_ctrl_val);
 80007f4:	463b      	mov	r3, r7
 80007f6:	4619      	mov	r1, r3
 80007f8:	2003      	movs	r0, #3
 80007fa:	f7ff fe21 	bl	8000440 <ICM20948_ReadByte>
 80007fe:	4603      	mov	r3, r0
 8000800:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <ICM20948_Init+0x178>
 8000808:	2301      	movs	r3, #1
 800080a:	e067      	b.n	80008dc <ICM20948_Init+0x248>
    user_ctrl_val |= (1 << 5); // 設定 I2C_MST_EN = 1
 800080c:	783b      	ldrb	r3, [r7, #0]
 800080e:	f043 0320 	orr.w	r3, r3, #32
 8000812:	b2db      	uxtb	r3, r3
 8000814:	703b      	strb	r3, [r7, #0]
    // user_ctrl_val &= ~(1 << 6); // 確保 I2C_IF_DIS = 0, 使能SPI和I2C同時工作 (如果需要SPI訪問ICM本身)
    status = ICM20948_WriteByte(ICM20948_USER_CTRL, user_ctrl_val);
 8000816:	783b      	ldrb	r3, [r7, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	2003      	movs	r0, #3
 800081c:	f7ff fdec 	bl	80003f8 <ICM20948_WriteByte>
 8000820:	4603      	mov	r3, r0
 8000822:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <ICM20948_Init+0x19a>
 800082a:	2301      	movs	r3, #1
 800082c:	e056      	b.n	80008dc <ICM20948_Init+0x248>
    HAL_Delay(50); // 等待 I2C 主機介面穩定
 800082e:	2032      	movs	r0, #50	@ 0x32
 8000830:	f001 f826 	bl	8001880 <HAL_Delay>

    // 切換到使用者庫 3
    status = ICM20948_SelectUserBank(3);
 8000834:	2003      	movs	r0, #3
 8000836:	f7ff fe59 	bl	80004ec <ICM20948_SelectUserBank>
 800083a:	4603      	mov	r3, r0
 800083c:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
 800083e:	78fb      	ldrb	r3, [r7, #3]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d004      	beq.n	800084e <ICM20948_Init+0x1ba>
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff fe51 	bl	80004ec <ICM20948_SelectUserBank>
 800084a:	2301      	movs	r3, #1
 800084c:	e046      	b.n	80008dc <ICM20948_Init+0x248>

    // 設定 I2C 主機時脈頻率 (I2C_MST_CTRL 的 I2C_MST_CLK bits 3:0)
    // 例如，設定為 400kHz (datasheet 建議值 0x07 for 345.6 kHz to 400 kHz)
    // 0x0D for ~100kHz if needed for stability with AK09916
    status = ICM20948_WriteByte(ICM20948_I2C_MST_CTRL, 0x07);
 800084e:	2107      	movs	r1, #7
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff fdd1 	bl	80003f8 <ICM20948_WriteByte>
 8000856:	4603      	mov	r3, r0
 8000858:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d004      	beq.n	800086a <ICM20948_Init+0x1d6>
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe43 	bl	80004ec <ICM20948_SelectUserBank>
 8000866:	2301      	movs	r3, #1
 8000868:	e038      	b.n	80008dc <ICM20948_Init+0x248>
    HAL_Delay(50);
 800086a:	2032      	movs	r0, #50	@ 0x32
 800086c:	f001 f808 	bl	8001880 <HAL_Delay>

    // 切換回使用者庫 0
    status = ICM20948_SelectUserBank(0);
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff fe3b 	bl	80004ec <ICM20948_SelectUserBank>
 8000876:	4603      	mov	r3, r0
 8000878:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <ICM20948_Init+0x1f0>
 8000880:	2301      	movs	r3, #1
 8000882:	e02b      	b.n	80008dc <ICM20948_Init+0x248>

    // --- 6. 初始化 AK09916 磁力計 ---
    // 檢查 AK09916 WIA2 (公司識別碼)
    status = AK09916_ReadByteViaICM(AK09916_WIA2, &ak09916_wia2_val);
 8000884:	1c7b      	adds	r3, r7, #1
 8000886:	4619      	mov	r1, r3
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe9f 	bl	80005cc <AK09916_ReadByteViaICM>
 800088e:	4603      	mov	r3, r0
 8000890:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK || ak09916_wia2_val != 0x09) { // 0x09 是 AK09916 的預期公司 ID (AKM)
 8000892:	78fb      	ldrb	r3, [r7, #3]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <ICM20948_Init+0x20a>
 8000898:	787b      	ldrb	r3, [r7, #1]
 800089a:	2b09      	cmp	r3, #9
 800089c:	d001      	beq.n	80008a2 <ICM20948_Init+0x20e>
        // 有時 WIA1 (0x00) 讀出來是 0x48 (Device ID)
        // uint8_t wia1_val;
        // AK09916_ReadByteViaICM(0x00, &wia1_val);
        // if (wia1_val != 0x48) return HAL_ERROR; // 備用檢查
        return HAL_ERROR; // AK09916 識別失敗
 800089e:	2301      	movs	r3, #1
 80008a0:	e01c      	b.n	80008dc <ICM20948_Init+0x248>
    }

    // 軟復位 AK09916 (CNTL3 的 SRST 位元 (bit 0) 設為 1)
    status = AK09916_WriteByteViaICM(AK09916_CNTL3, 0x01);
 80008a2:	2101      	movs	r1, #1
 80008a4:	2032      	movs	r0, #50	@ 0x32
 80008a6:	f7ff fe37 	bl	8000518 <AK09916_WriteByteViaICM>
 80008aa:	4603      	mov	r3, r0
 80008ac:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 80008ae:	78fb      	ldrb	r3, [r7, #3]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <ICM20948_Init+0x224>
 80008b4:	2301      	movs	r3, #1
 80008b6:	e011      	b.n	80008dc <ICM20948_Init+0x248>
    HAL_Delay(100); // 等待復位完成 (AK09916 datasheet: At least 1ms after SRST bit is set to “1”.)
 80008b8:	2064      	movs	r0, #100	@ 0x64
 80008ba:	f000 ffe1 	bl	8001880 <HAL_Delay>
    // 00010: Continuous measurement mode 1 (10Hz)
    // 00100: Continuous measurement mode 2 (20Hz)
    // 00110: Continuous measurement mode 3 (50Hz)
    // 01000: Continuous measurement mode 4 (100Hz)
    // 這裡設定為連續量測模式 4 (100Hz) -> 0x08
    status = AK09916_WriteByteViaICM(AK09916_CNTL2, 0x08);
 80008be:	2108      	movs	r1, #8
 80008c0:	2031      	movs	r0, #49	@ 0x31
 80008c2:	f7ff fe29 	bl	8000518 <AK09916_WriteByteViaICM>
 80008c6:	4603      	mov	r3, r0
 80008c8:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <ICM20948_Init+0x240>
 80008d0:	2301      	movs	r3, #1
 80008d2:	e003      	b.n	80008dc <ICM20948_Init+0x248>
    HAL_Delay(50); // 等待模式設定生效
 80008d4:	2032      	movs	r0, #50	@ 0x32
 80008d6:	f000 ffd3 	bl	8001880 <HAL_Delay>
    // status = ICM20948_WriteByte(ICM20948_INT_PIN_CFG, 0x30); // INT1 active high, push-pull, latch INT_ENABLE, clear on read status
    // if (status != HAL_OK) return HAL_ERROR;
    // status = ICM20948_WriteByte(ICM20948_INT_ENABLE_1, 0x01); // Enable Raw Data Ready interrupt (RAW_RDY_EN bit 0)
    // if (status != HAL_OK) return HAL_ERROR;

    return HAL_OK; // 初始化成功
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	08007b48 	.word	0x08007b48
 80008e8:	08007b68 	.word	0x08007b68
 80008ec:	24000000 	.word	0x24000000
 80008f0:	24000004 	.word	0x24000004
 80008f4:	43030000 	.word	0x43030000

080008f8 <ICM20948_ReadAccelGyroRaw>:
 * @brief 從 ICM-20948 讀取加速計和陀螺儀的原始數據。
 * @param pAccel: 指向儲存加速計原始數據的陣列 (int16_t[3])。
 * @param pGyro:  指向儲存陀螺儀原始數據的陣列 (int16_t[3])。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadAccelGyroRaw(int16_t* pAccel, int16_t* pGyro) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
    uint8_t raw_data[12]; // 6 bytes for accel (X,Y,Z), 6 bytes for gyro (X,Y,Z)
    HAL_StatusTypeDef status;

    // 1. 確保在使用者庫 0 (感測器數據通常在庫 0)
    status = ICM20948_SelectUserBank(0); // 雖然大部分情況下已在庫0，但確保一下無妨
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fdf2 	bl	80004ec <ICM20948_SelectUserBank>
 8000908:	4603      	mov	r3, r0
 800090a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 800090c:	7dfb      	ldrb	r3, [r7, #23]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <ICM20948_ReadAccelGyroRaw+0x1e>
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	e048      	b.n	80009a8 <ICM20948_ReadAccelGyroRaw+0xb0>

    // 2. 從 ACCEL_XOUT_H (0x2D) 開始連續讀取 12 個位元組的數據
    //    ACCEL_XOUT_H to GYRO_ZOUT_L
    status = ICM20948_ReadBytes(ICM20948_ACCEL_XOUT_H, raw_data, 12);
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	220c      	movs	r2, #12
 800091c:	4619      	mov	r1, r3
 800091e:	202d      	movs	r0, #45	@ 0x2d
 8000920:	f7ff fdb8 	bl	8000494 <ICM20948_ReadBytes>
 8000924:	4603      	mov	r3, r0
 8000926:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <ICM20948_ReadAccelGyroRaw+0x3a>
 800092e:	7dfb      	ldrb	r3, [r7, #23]
 8000930:	e03a      	b.n	80009a8 <ICM20948_ReadAccelGyroRaw+0xb0>

    // 3. 解析數據 (高位元組在前，大端模式 Big-Endian)
    // 加速計數據
    pAccel[0] = (int16_t)((raw_data[0] << 8) | raw_data[1]);  // Accel X
 8000932:	7a3b      	ldrb	r3, [r7, #8]
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b21a      	sxth	r2, r3
 8000938:	7a7b      	ldrb	r3, [r7, #9]
 800093a:	b21b      	sxth	r3, r3
 800093c:	4313      	orrs	r3, r2
 800093e:	b21a      	sxth	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	801a      	strh	r2, [r3, #0]
    pAccel[1] = (int16_t)((raw_data[2] << 8) | raw_data[3]);  // Accel Y
 8000944:	7abb      	ldrb	r3, [r7, #10]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b219      	sxth	r1, r3
 800094a:	7afb      	ldrb	r3, [r7, #11]
 800094c:	b21a      	sxth	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3302      	adds	r3, #2
 8000952:	430a      	orrs	r2, r1
 8000954:	b212      	sxth	r2, r2
 8000956:	801a      	strh	r2, [r3, #0]
    pAccel[2] = (int16_t)((raw_data[4] << 8) | raw_data[5]);  // Accel Z
 8000958:	7b3b      	ldrb	r3, [r7, #12]
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b219      	sxth	r1, r3
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	b21a      	sxth	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3304      	adds	r3, #4
 8000966:	430a      	orrs	r2, r1
 8000968:	b212      	sxth	r2, r2
 800096a:	801a      	strh	r2, [r3, #0]
    // 陀螺儀數據
    pGyro[0] = (int16_t)((raw_data[6] << 8) | raw_data[7]);   // Gyro X
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b21a      	sxth	r2, r3
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	b21b      	sxth	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b21a      	sxth	r2, r3
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	801a      	strh	r2, [r3, #0]
    pGyro[1] = (int16_t)((raw_data[8] << 8) | raw_data[9]);   // Gyro Y
 800097e:	7c3b      	ldrb	r3, [r7, #16]
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	b219      	sxth	r1, r3
 8000984:	7c7b      	ldrb	r3, [r7, #17]
 8000986:	b21a      	sxth	r2, r3
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	3302      	adds	r3, #2
 800098c:	430a      	orrs	r2, r1
 800098e:	b212      	sxth	r2, r2
 8000990:	801a      	strh	r2, [r3, #0]
    pGyro[2] = (int16_t)((raw_data[10] << 8) | raw_data[11]); // Gyro Z
 8000992:	7cbb      	ldrb	r3, [r7, #18]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b219      	sxth	r1, r3
 8000998:	7cfb      	ldrb	r3, [r7, #19]
 800099a:	b21a      	sxth	r2, r3
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	3304      	adds	r3, #4
 80009a0:	430a      	orrs	r2, r1
 80009a2:	b212      	sxth	r2, r2
 80009a4:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <AK09916_ReadBytesViaICM>:
 * @param reg_addr: AK09916 的起始暫存器位址。
 * @param pBuffer:  指向儲存讀取數據的緩衝區。
 * @param count:    要讀取的位元組數量 (AK09916 通常一次讀取 8 bytes: HXL to ST2)。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_ReadBytesViaICM(uint8_t reg_addr, uint8_t *pBuffer, uint8_t count) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	4613      	mov	r3, r2
 80009be:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t target_bank = 3;
 80009c0:	2303      	movs	r3, #3
 80009c2:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read_bank = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73bb      	strb	r3, [r7, #14]

    if (count == 0 || count > 8) { // EXT_SLV_SENS_DATA 暫存器最多支援讀取連續的外部數據長度有限制 (SLV0 可讀取 SLV0_LENG 個 bytes)
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <AK09916_ReadBytesViaICM+0x24>
 80009ce:	79bb      	ldrb	r3, [r7, #6]
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	d901      	bls.n	80009d8 <AK09916_ReadBytesViaICM+0x28>
                                  // ICM20948 EXT_SLV_SENS_DATA_xx 最多有 24 個 bytes (00-23) 給所有 4 個 slave
                                  // SLV0_LENG 最大值是 15 (0xF)
        return HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e056      	b.n	8000a86 <AK09916_ReadBytesViaICM+0xd6>
    }

    // 1. 切換到使用者庫 3
    status = ICM20948_SelectUserBank(target_bank);
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fd86 	bl	80004ec <ICM20948_SelectUserBank>
 80009e0:	4603      	mov	r3, r0
 80009e2:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 80009e4:	7b7b      	ldrb	r3, [r7, #13]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <AK09916_ReadBytesViaICM+0x3e>
 80009ea:	7b7b      	ldrb	r3, [r7, #13]
 80009ec:	e04b      	b.n	8000a86 <AK09916_ReadBytesViaICM+0xd6>

    // 2. 設定從裝置位址為讀取模式
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR | 0x80); // Add R/W bit for read
 80009ee:	218c      	movs	r1, #140	@ 0x8c
 80009f0:	2003      	movs	r0, #3
 80009f2:	f7ff fd01 	bl	80003f8 <ICM20948_WriteByte>
 80009f6:	4603      	mov	r3, r0
 80009f8:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 80009fa:	7b7b      	ldrb	r3, [r7, #13]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d005      	beq.n	8000a0c <AK09916_ReadBytesViaICM+0x5c>
 8000a00:	7bbb      	ldrb	r3, [r7, #14]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fd72 	bl	80004ec <ICM20948_SelectUserBank>
 8000a08:	7b7b      	ldrb	r3, [r7, #13]
 8000a0a:	e03c      	b.n	8000a86 <AK09916_ReadBytesViaICM+0xd6>

    // 3. 設定要讀取的 AK09916 起始內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2004      	movs	r0, #4
 8000a12:	f7ff fcf1 	bl	80003f8 <ICM20948_WriteByte>
 8000a16:	4603      	mov	r3, r0
 8000a18:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 8000a1a:	7b7b      	ldrb	r3, [r7, #13]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d005      	beq.n	8000a2c <AK09916_ReadBytesViaICM+0x7c>
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fd62 	bl	80004ec <ICM20948_SelectUserBank>
 8000a28:	7b7b      	ldrb	r3, [r7, #13]
 8000a2a:	e02c      	b.n	8000a86 <AK09916_ReadBytesViaICM+0xd6>

    // 4. 致能 I2C SLV0，設定讀取位元組數量，並觸發事務
    //    I2C_SLV0_EN (bit 7) = 1
    //    I2C_SLV0_LENG (bits 3:0) = count
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | count);
 8000a2c:	79bb      	ldrb	r3, [r7, #6]
 8000a2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4619      	mov	r1, r3
 8000a36:	2005      	movs	r0, #5
 8000a38:	f7ff fcde 	bl	80003f8 <ICM20948_WriteByte>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 8000a40:	7b7b      	ldrb	r3, [r7, #13]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d005      	beq.n	8000a52 <AK09916_ReadBytesViaICM+0xa2>
 8000a46:	7bbb      	ldrb	r3, [r7, #14]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fd4f 	bl	80004ec <ICM20948_SelectUserBank>
 8000a4e:	7b7b      	ldrb	r3, [r7, #13]
 8000a50:	e019      	b.n	8000a86 <AK09916_ReadBytesViaICM+0xd6>

    // 等待 I2C 傳輸完成，這個延遲需要足夠長以完成 'count' 個位元組的讀取
    // 每個位元組大約需要 8/I2C_Clock_Freq + ACK/NACK 時間。
    // 若 I2C 400kHz, 1 byte 約 25us. 8 bytes ~ 200us.
    HAL_Delay(count + 2); // 粗略延遲，最好檢查 I2C_MST_STATUS 或使用中斷
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	3302      	adds	r3, #2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 ff12 	bl	8001880 <HAL_Delay>
                          // (count * 25us / 1000) + 1 ms 作為基本延遲

    // 5. 切換回使用者庫 0 以讀取外部感測器數據
    status = ICM20948_SelectUserBank(data_read_bank);
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fd44 	bl	80004ec <ICM20948_SelectUserBank>
 8000a64:	4603      	mov	r3, r0
 8000a66:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000a68:	7b7b      	ldrb	r3, [r7, #13]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <AK09916_ReadBytesViaICM+0xc2>
 8000a6e:	7b7b      	ldrb	r3, [r7, #13]
 8000a70:	e009      	b.n	8000a86 <AK09916_ReadBytesViaICM+0xd6>

    // 6. 從 EXT_SLV_SENS_DATA_00 開始讀取數據
    status = ICM20948_ReadBytes(ICM20948_EXT_SLV_SENS_DATA_00, pBuffer, count);
 8000a72:	79bb      	ldrb	r3, [r7, #6]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	6839      	ldr	r1, [r7, #0]
 8000a7a:	203b      	movs	r0, #59	@ 0x3b
 8000a7c:	f7ff fd0a 	bl	8000494 <ICM20948_ReadBytes>
 8000a80:	4603      	mov	r3, r0
 8000a82:	737b      	strb	r3, [r7, #13]
    return status;
 8000a84:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <ICM20948_ReadMagRaw>:
/**
 * @brief 從 ICM-20948 (透過其 I2C 主機從 AK09916) 讀取磁力計的原始數據。
 * @param pMag:   指向儲存磁力計原始數據的陣列 (int16_t[3])。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadMagRaw(int16_t* pMag) {
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
                           // RSV (0x17) 是保留位元組
    HAL_StatusTypeDef status;
    uint8_t st1_val;

    // 1. 檢查 AK09916 是否有新數據 (DRDY 位元在 ST1 (0x10) 暫存器)
    status = AK09916_ReadByteViaICM(AK09916_ST1, &st1_val);
 8000a96:	f107 030b 	add.w	r3, r7, #11
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2010      	movs	r0, #16
 8000a9e:	f7ff fd95 	bl	80005cc <AK09916_ReadByteViaICM>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000aa6:	7dfb      	ldrb	r3, [r7, #23]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <ICM20948_ReadMagRaw+0x22>
 8000aac:	7dfb      	ldrb	r3, [r7, #23]
 8000aae:	e032      	b.n	8000b16 <ICM20948_ReadMagRaw+0x88>

    if (!(st1_val & 0x01)) { // 檢查 DRDY (Data Ready) 位元 (bit 0)
 8000ab0:	7afb      	ldrb	r3, [r7, #11]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <ICM20948_ReadMagRaw+0x30>
        return HAL_BUSY; // 數據尚未就緒 (Not an error, just not ready)
 8000aba:	2302      	movs	r3, #2
 8000abc:	e02b      	b.n	8000b16 <ICM20948_ReadMagRaw+0x88>
    }

    // 2. 從 AK09916_HXL (0x11) 開始讀取 8 個位元組 (HXL to ST2)
    //    讀取 ST2 (0x18) 是為了讓 AK09916 準備下一次量測 (清除 DRDY 狀態並觸發下一次)
    status = AK09916_ReadBytesViaICM(AK09916_HXL, mag_buffer, 8);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	2011      	movs	r0, #17
 8000ac8:	f7ff ff72 	bl	80009b0 <AK09916_ReadBytesViaICM>
 8000acc:	4603      	mov	r3, r0
 8000ace:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <ICM20948_ReadMagRaw+0x4c>
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
 8000ad8:	e01d      	b.n	8000b16 <ICM20948_ReadMagRaw+0x88>

    // 3. 解析數據 (低位元組在前，小端模式 Little-Endian for AK09916)
    pMag[0] = (int16_t)(((uint16_t)mag_buffer[1] << 8) | mag_buffer[0]); // Mag X (HXH, HXL)
 8000ada:	7b7b      	ldrb	r3, [r7, #13]
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	b21a      	sxth	r2, r3
 8000ae0:	7b3b      	ldrb	r3, [r7, #12]
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	801a      	strh	r2, [r3, #0]
    pMag[1] = (int16_t)(((uint16_t)mag_buffer[3] << 8) | mag_buffer[2]); // Mag Y (HYH, HYL)
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	021b      	lsls	r3, r3, #8
 8000af0:	b219      	sxth	r1, r3
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	b21a      	sxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3302      	adds	r3, #2
 8000afa:	430a      	orrs	r2, r1
 8000afc:	b212      	sxth	r2, r2
 8000afe:	801a      	strh	r2, [r3, #0]
    pMag[2] = (int16_t)(((uint16_t)mag_buffer[5] << 8) | mag_buffer[4]); // Mag Z (HZH, HZL)
 8000b00:	7c7b      	ldrb	r3, [r7, #17]
 8000b02:	021b      	lsls	r3, r3, #8
 8000b04:	b219      	sxth	r1, r3
 8000b06:	7c3b      	ldrb	r3, [r7, #16]
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	b212      	sxth	r2, r2
 8000b12:	801a      	strh	r2, [r3, #0]
    // if (mag_buffer[7] & 0x08) { /* Overflow occurred */ }

    // 重要: 讀取 ST2 暫存器後，AK09916 會清除 DRDY (Data Ready) 狀態，
    // 並在下一個量測週期後再次設定 DRDY。

    return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <ICM20948_ConvertAccelRawToG>:
/**
 * @brief 將加速計原始數據轉換為 g (重力加速度)。
 * @param pAccelRaw: 指向加速計原始數據陣列 (int16_t[3])。
 * @param pAccelG:   指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertAccelRawToG(const int16_t* pAccelRaw, float* pAccelG) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
    pAccelG[0] = (float)pAccelRaw[0] / current_accel_sensitivity;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b30:	ee07 3a90 	vmov	s15, r3
 8000b34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b38:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <ICM20948_ConvertAccelRawToG+0x78>)
 8000b3a:	ed93 7a00 	vldr	s14, [r3]
 8000b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[1] = (float)pAccelRaw[1] / current_accel_sensitivity;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b50:	ee07 3a90 	vmov	s15, r3
 8000b54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <ICM20948_ConvertAccelRawToG+0x78>)
 8000b5a:	ed93 7a00 	vldr	s14, [r3]
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	3304      	adds	r3, #4
 8000b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b66:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[2] = (float)pAccelRaw[2] / current_accel_sensitivity;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b72:	ee07 3a90 	vmov	s15, r3
 8000b76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b7a:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <ICM20948_ConvertAccelRawToG+0x78>)
 8000b7c:	ed93 7a00 	vldr	s14, [r3]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	3308      	adds	r3, #8
 8000b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b88:	edc3 7a00 	vstr	s15, [r3]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	24000000 	.word	0x24000000

08000b9c <ICM20948_ConvertGyroRawToDPS>:
/**
 * @brief 將陀螺儀原始數據轉換為 dps (度/秒)。
 * @param pGyroRaw: 指向陀螺儀原始數據陣列 (int16_t[3])。
 * @param pGyroDPS: 指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertGyroRawToDPS(const int16_t* pGyroRaw, float* pGyroDPS) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
    pGyroDPS[0] = (float)pGyroRaw[0] / current_gyro_sensitivity;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bb4:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <ICM20948_ConvertGyroRawToDPS+0x78>)
 8000bb6:	ed93 7a00 	vldr	s14, [r3]
 8000bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[1] = (float)pGyroRaw[1] / current_gyro_sensitivity;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bcc:	ee07 3a90 	vmov	s15, r3
 8000bd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <ICM20948_ConvertGyroRawToDPS+0x78>)
 8000bd6:	ed93 7a00 	vldr	s14, [r3]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000be2:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[2] = (float)pGyroRaw[2] / current_gyro_sensitivity;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3304      	adds	r3, #4
 8000bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bee:	ee07 3a90 	vmov	s15, r3
 8000bf2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <ICM20948_ConvertGyroRawToDPS+0x78>)
 8000bf8:	ed93 7a00 	vldr	s14, [r3]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c04:	edc3 7a00 	vstr	s15, [r3]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	24000004 	.word	0x24000004

08000c18 <ICM20948_ConvertMagRawToUT>:
/**
 * @brief 將磁力計原始數據轉換為 µT (微特斯拉)。
 * @param pMagRaw: 指向磁力計原始數據陣列 (int16_t[3])。
 * @param pMagUT:  指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertMagRawToUT(const int16_t* pMagRaw, float* pMagUT) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
    // AK09916 的靈敏度是固定的 0.15 µT/LSB
    pMagUT[0] = (float)pMagRaw[0] * MAG_SENSITIVITY_UT_LSB;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c28:	ee07 3a90 	vmov	s15, r3
 8000c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c30:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000c8c <ICM20948_ConvertMagRawToUT+0x74>
 8000c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	edc3 7a00 	vstr	s15, [r3]
    pMagUT[1] = (float)pMagRaw[1] * MAG_SENSITIVITY_UT_LSB;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3302      	adds	r3, #2
 8000c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	3304      	adds	r3, #4
 8000c52:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000c8c <ICM20948_ConvertMagRawToUT+0x74>
 8000c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c5a:	edc3 7a00 	vstr	s15, [r3]
    pMagUT[2] = (float)pMagRaw[2] * MAG_SENSITIVITY_UT_LSB;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3304      	adds	r3, #4
 8000c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c66:	ee07 3a90 	vmov	s15, r3
 8000c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	3308      	adds	r3, #8
 8000c72:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000c8c <ICM20948_ConvertMagRawToUT+0x74>
 8000c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c7a:	edc3 7a00 	vstr	s15, [r3]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	3e19999a 	.word	0x3e19999a

08000c90 <ICM20948_Main>:
void ICM20948_Main(){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	@ 0x30
 8000c94:	af0a      	add	r7, sp, #40	@ 0x28
	// 讀取加速計和陀螺儀原始數據
		     if (ICM20948_ReadAccelGyroRaw(accel_raw, gyro_raw) == HAL_OK) {
 8000c96:	493c      	ldr	r1, [pc, #240]	@ (8000d88 <ICM20948_Main+0xf8>)
 8000c98:	483c      	ldr	r0, [pc, #240]	@ (8000d8c <ICM20948_Main+0xfc>)
 8000c9a:	f7ff fe2d 	bl	80008f8 <ICM20948_ReadAccelGyroRaw>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d135      	bne.n	8000d10 <ICM20948_Main+0x80>
		       // 將原始數據轉換為物理單位
		       ICM20948_ConvertAccelRawToG(accel_raw, accel_g);
 8000ca4:	493a      	ldr	r1, [pc, #232]	@ (8000d90 <ICM20948_Main+0x100>)
 8000ca6:	4839      	ldr	r0, [pc, #228]	@ (8000d8c <ICM20948_Main+0xfc>)
 8000ca8:	f7ff ff3a 	bl	8000b20 <ICM20948_ConvertAccelRawToG>
		       ICM20948_ConvertGyroRawToDPS(gyro_raw, gyro_dps);
 8000cac:	4939      	ldr	r1, [pc, #228]	@ (8000d94 <ICM20948_Main+0x104>)
 8000cae:	4836      	ldr	r0, [pc, #216]	@ (8000d88 <ICM20948_Main+0xf8>)
 8000cb0:	f7ff ff74 	bl	8000b9c <ICM20948_ConvertGyroRawToDPS>

		       // 透過 UART 輸出 (或使用除錯器查看變數)
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
		              accel_g[0], accel_g[1], accel_g[2],
 8000cb4:	4b36      	ldr	r3, [pc, #216]	@ (8000d90 <ICM20948_Main+0x100>)
 8000cb6:	edd3 7a00 	vldr	s15, [r3]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000cba:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
		              accel_g[0], accel_g[1], accel_g[2],
 8000cbe:	4b34      	ldr	r3, [pc, #208]	@ (8000d90 <ICM20948_Main+0x100>)
 8000cc0:	edd3 7a01 	vldr	s15, [r3, #4]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000cc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
		              accel_g[0], accel_g[1], accel_g[2],
 8000cc8:	4b31      	ldr	r3, [pc, #196]	@ (8000d90 <ICM20948_Main+0x100>)
 8000cca:	edd3 6a02 	vldr	s13, [r3, #8]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000cce:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
		               gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8000cd2:	4b30      	ldr	r3, [pc, #192]	@ (8000d94 <ICM20948_Main+0x104>)
 8000cd4:	edd3 5a00 	vldr	s11, [r3]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000cd8:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
		               gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8000cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <ICM20948_Main+0x104>)
 8000cde:	edd3 4a01 	vldr	s9, [r3, #4]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000ce2:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
		               gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d94 <ICM20948_Main+0x104>)
 8000ce8:	edd3 3a02 	vldr	s7, [r3, #8]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000cec:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000cf0:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000cf4:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000cf8:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000cfc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000d00:	ed8d 7b00 	vstr	d7, [sp]
 8000d04:	ec53 2b12 	vmov	r2, r3, d2
 8000d08:	4823      	ldr	r0, [pc, #140]	@ (8000d98 <ICM20948_Main+0x108>)
 8000d0a:	f004 ffa7 	bl	8005c5c <iprintf>
 8000d0e:	e002      	b.n	8000d16 <ICM20948_Main+0x86>
	//	       printf("%s"); // 或 HAL_UART_Transmit(&huartx, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);

		     } else {
		    	 //讀取 Accel/Gyro 數據失敗
		       printf("Failed to read Accel/Gyro data!\r\n");
 8000d10:	4822      	ldr	r0, [pc, #136]	@ (8000d9c <ICM20948_Main+0x10c>)
 8000d12:	f005 f80b 	bl	8005d2c <puts>
		     }

		     // 讀取磁力計原始數據
		     HAL_StatusTypeDef mag_status = ICM20948_ReadMagRaw(mag_raw);
 8000d16:	4822      	ldr	r0, [pc, #136]	@ (8000da0 <ICM20948_Main+0x110>)
 8000d18:	f7ff feb9 	bl	8000a8e <ICM20948_ReadMagRaw>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	71fb      	strb	r3, [r7, #7]
		     if (mag_status == HAL_OK) {
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d11c      	bne.n	8000d60 <ICM20948_Main+0xd0>
		       // 將原始數據轉換為物理單位
		       ICM20948_ConvertMagRawToUT(mag_raw, mag_uT);
 8000d26:	491f      	ldr	r1, [pc, #124]	@ (8000da4 <ICM20948_Main+0x114>)
 8000d28:	481d      	ldr	r0, [pc, #116]	@ (8000da0 <ICM20948_Main+0x110>)
 8000d2a:	f7ff ff75 	bl	8000c18 <ICM20948_ConvertMagRawToUT>

		       printf("Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <ICM20948_Main+0x114>)
 8000d30:	edd3 7a00 	vldr	s15, [r3]
		       printf("Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000d34:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <ICM20948_Main+0x114>)
 8000d3a:	edd3 7a01 	vldr	s15, [r3, #4]
		       printf("Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000d3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 8000d42:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <ICM20948_Main+0x114>)
 8000d44:	edd3 6a02 	vldr	s13, [r3, #8]
		       printf("Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8000d48:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000d4c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000d50:	ed8d 7b00 	vstr	d7, [sp]
 8000d54:	ec53 2b15 	vmov	r2, r3, d5
 8000d58:	4813      	ldr	r0, [pc, #76]	@ (8000da8 <ICM20948_Main+0x118>)
 8000d5a:	f004 ff7f 	bl	8005c5c <iprintf>
 8000d5e:	e009      	b.n	8000d74 <ICM20948_Main+0xe4>
	//	       printf("%s");

		     } else if (mag_status == HAL_BUSY) {
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d103      	bne.n	8000d6e <ICM20948_Main+0xde>
		       //printf("磁力計數據尚未就緒 (DRDY=0)\r\n");
		    	 printf("(HAL_BUSY DRDY=0)\r\n");
 8000d66:	4811      	ldr	r0, [pc, #68]	@ (8000dac <ICM20948_Main+0x11c>)
 8000d68:	f004 ffe0 	bl	8005d2c <puts>
 8000d6c:	e002      	b.n	8000d74 <ICM20948_Main+0xe4>
		       // 這是正常情況，因為磁力計更新速率可能較慢或與主迴圈不同步
		     }
		     else {
		    	 //讀取 Mag 數據失敗!
		       printf("Failed to read Mag !\r\n");
 8000d6e:	4810      	ldr	r0, [pc, #64]	@ (8000db0 <ICM20948_Main+0x120>)
 8000d70:	f004 ffdc 	bl	8005d2c <puts>
		     }

		     printf("----------------------------------------\r\n");
 8000d74:	480f      	ldr	r0, [pc, #60]	@ (8000db4 <ICM20948_Main+0x124>)
 8000d76:	f004 ffd9 	bl	8005d2c <puts>
		     HAL_Delay(100); // 每秒讀取一次數據
 8000d7a:	2064      	movs	r0, #100	@ 0x64
 8000d7c:	f000 fd80 	bl	8001880 <HAL_Delay>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	24000204 	.word	0x24000204
 8000d8c:	240001fc 	.word	0x240001fc
 8000d90:	24000214 	.word	0x24000214
 8000d94:	24000220 	.word	0x24000220
 8000d98:	08007b98 	.word	0x08007b98
 8000d9c:	08007be0 	.word	0x08007be0
 8000da0:	2400020c 	.word	0x2400020c
 8000da4:	2400022c 	.word	0x2400022c
 8000da8:	08007c04 	.word	0x08007c04
 8000dac:	08007c28 	.word	0x08007c28
 8000db0:	08007c3c 	.word	0x08007c3c
 8000db4:	08007c54 	.word	0x08007c54

08000db8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000dc0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000dc4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d013      	beq.n	8000df8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000dd0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000dd4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000dd8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00b      	beq.n	8000df8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000de0:	e000      	b.n	8000de4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000de2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000de4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f9      	beq.n	8000de2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000dee:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e0e:	f000 f9e5 	bl	80011dc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f000 fca3 	bl	800175c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f83d 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 f90f 	bl	800103c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e1e:	f000 f8b5 	bl	8000f8c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int WWE = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
  printf("ICM-20948 Test Program Init\r\n");
 8000e26:	4816      	ldr	r0, [pc, #88]	@ (8000e80 <main+0x78>)
 8000e28:	f004 ff80 	bl	8005d2c <puts>

    // Initialize ICM-20948
    if (ICM20948_Init() == HAL_OK) {
 8000e2c:	f7ff fc32 	bl	8000694 <ICM20948_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d103      	bne.n	8000e3e <main+0x36>
      printf("ICM-20948 Initialization OK\r\n");
 8000e36:	4813      	ldr	r0, [pc, #76]	@ (8000e84 <main+0x7c>)
 8000e38:	f004 ff78 	bl	8005d2c <puts>
 8000e3c:	e004      	b.n	8000e48 <main+0x40>
    } else {
      printf("ICM-20948 Initialization FAILED\r\n");
 8000e3e:	4812      	ldr	r0, [pc, #72]	@ (8000e88 <main+0x80>)
 8000e40:	f004 ff74 	bl	8005d2c <puts>
      Error_Handler();
 8000e44:	f000 f9f6 	bl	8001234 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ICM20948_Main();
 8000e48:	f7ff ff22 	bl	8000c90 <ICM20948_Main>





	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2102      	movs	r1, #2
 8000e50:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <main+0x84>)
 8000e52:	f001 f851 	bl	8001ef8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000e56:	2064      	movs	r0, #100	@ 0x64
 8000e58:	f000 fd12 	bl	8001880 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2102      	movs	r1, #2
 8000e60:	480a      	ldr	r0, [pc, #40]	@ (8000e8c <main+0x84>)
 8000e62:	f001 f849 	bl	8001ef8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000e66:	2064      	movs	r0, #100	@ 0x64
 8000e68:	f000 fd0a 	bl	8001880 <HAL_Delay>
	  printf("archer %d \n",WWE);
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	4808      	ldr	r0, [pc, #32]	@ (8000e90 <main+0x88>)
 8000e70:	f004 fef4 	bl	8005c5c <iprintf>
	  	  WWE++;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3301      	adds	r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
  {
 8000e7a:	bf00      	nop
 8000e7c:	e7e4      	b.n	8000e48 <main+0x40>
 8000e7e:	bf00      	nop
 8000e80:	08007c80 	.word	0x08007c80
 8000e84:	08007ca0 	.word	0x08007ca0
 8000e88:	08007cc0 	.word	0x08007cc0
 8000e8c:	58021000 	.word	0x58021000
 8000e90:	08007ce4 	.word	0x08007ce4

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b09c      	sub	sp, #112	@ 0x70
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9e:	224c      	movs	r2, #76	@ 0x4c
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f005 f822 	bl	8005eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2220      	movs	r2, #32
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f005 f81c 	bl	8005eec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f001 f839 	bl	8001f2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b31      	ldr	r3, [pc, #196]	@ (8000f84 <SystemClock_Config+0xf0>)
 8000ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec2:	4a30      	ldr	r2, [pc, #192]	@ (8000f84 <SystemClock_Config+0xf0>)
 8000ec4:	f023 0301 	bic.w	r3, r3, #1
 8000ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000eca:	4b2e      	ldr	r3, [pc, #184]	@ (8000f84 <SystemClock_Config+0xf0>)
 8000ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f88 <SystemClock_Config+0xf4>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000edc:	4a2a      	ldr	r2, [pc, #168]	@ (8000f88 <SystemClock_Config+0xf4>)
 8000ede:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b28      	ldr	r3, [pc, #160]	@ (8000f88 <SystemClock_Config+0xf4>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ef0:	bf00      	nop
 8000ef2:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <SystemClock_Config+0xf4>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000efa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000efe:	d1f8      	bne.n	8000ef2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f00:	2302      	movs	r3, #2
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f08:	2340      	movs	r3, #64	@ 0x40
 8000f0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f10:	2300      	movs	r3, #0
 8000f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f14:	2304      	movs	r3, #4
 8000f16:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f18:	230a      	movs	r3, #10
 8000f1a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f28:	230c      	movs	r3, #12
 8000f2a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f001 f831 	bl	8001fa0 <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f44:	f000 f976 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	233f      	movs	r3, #63	@ 0x3f
 8000f4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fc71 	bl	8002854 <HAL_RCC_ClockConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000f78:	f000 f95c 	bl	8001234 <Error_Handler>
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3770      	adds	r7, #112	@ 0x70
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	58000400 	.word	0x58000400
 8000f88:	58024800 	.word	0x58024800

08000f8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f90:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000f92:	4a29      	ldr	r2, [pc, #164]	@ (8001038 <MX_SPI1_Init+0xac>)
 8000f94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f96:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000f98:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9e:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa4:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fa6:	2207      	movs	r2, #7
 8000fa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000faa:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fb0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000fb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fbc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fe4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fea:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ff0:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8001004:	2200      	movs	r2, #0
 8001006:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <MX_SPI1_Init+0xa8>)
 800100a:	2200      	movs	r2, #0
 800100c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8001010:	2200      	movs	r2, #0
 8001012:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8001016:	2200      	movs	r2, #0
 8001018:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_SPI1_Init+0xa8>)
 800101c:	2200      	movs	r2, #0
 800101e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_SPI1_Init+0xa8>)
 8001022:	f003 fab5 	bl	8004590 <HAL_SPI_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800102c:	f000 f902 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	24000238 	.word	0x24000238
 8001038:	40013000 	.word	0x40013000

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	@ 0x30
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001052:	4b50      	ldr	r3, [pc, #320]	@ (8001194 <MX_GPIO_Init+0x158>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001058:	4a4e      	ldr	r2, [pc, #312]	@ (8001194 <MX_GPIO_Init+0x158>)
 800105a:	f043 0320 	orr.w	r3, r3, #32
 800105e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001062:	4b4c      	ldr	r3, [pc, #304]	@ (8001194 <MX_GPIO_Init+0x158>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001070:	4b48      	ldr	r3, [pc, #288]	@ (8001194 <MX_GPIO_Init+0x158>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	4a47      	ldr	r2, [pc, #284]	@ (8001194 <MX_GPIO_Init+0x158>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001080:	4b44      	ldr	r3, [pc, #272]	@ (8001194 <MX_GPIO_Init+0x158>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b41      	ldr	r3, [pc, #260]	@ (8001194 <MX_GPIO_Init+0x158>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001094:	4a3f      	ldr	r2, [pc, #252]	@ (8001194 <MX_GPIO_Init+0x158>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109e:	4b3d      	ldr	r3, [pc, #244]	@ (8001194 <MX_GPIO_Init+0x158>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ac:	4b39      	ldr	r3, [pc, #228]	@ (8001194 <MX_GPIO_Init+0x158>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b2:	4a38      	ldr	r2, [pc, #224]	@ (8001194 <MX_GPIO_Init+0x158>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010bc:	4b35      	ldr	r3, [pc, #212]	@ (8001194 <MX_GPIO_Init+0x158>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ca:	4b32      	ldr	r3, [pc, #200]	@ (8001194 <MX_GPIO_Init+0x158>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	4a30      	ldr	r2, [pc, #192]	@ (8001194 <MX_GPIO_Init+0x158>)
 80010d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010da:	4b2e      	ldr	r3, [pc, #184]	@ (8001194 <MX_GPIO_Init+0x158>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <MX_GPIO_Init+0x158>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ee:	4a29      	ldr	r2, [pc, #164]	@ (8001194 <MX_GPIO_Init+0x158>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f8:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <MX_GPIO_Init+0x158>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001106:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <MX_GPIO_Init+0x158>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110c:	4a21      	ldr	r2, [pc, #132]	@ (8001194 <MX_GPIO_Init+0x158>)
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001116:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <MX_GPIO_Init+0x158>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111c:	f003 0310 	and.w	r3, r3, #16
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800112a:	481b      	ldr	r0, [pc, #108]	@ (8001198 <MX_GPIO_Init+0x15c>)
 800112c:	f000 fee4 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	2102      	movs	r1, #2
 8001134:	4819      	ldr	r0, [pc, #100]	@ (800119c <MX_GPIO_Init+0x160>)
 8001136:	f000 fedf 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ICM20948_DRDY_Pin */
  GPIO_InitStruct.Pin = ICM20948_DRDY_Pin;
 800113a:	2304      	movs	r3, #4
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ICM20948_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	4814      	ldr	r0, [pc, #80]	@ (80011a0 <MX_GPIO_Init+0x164>)
 800114e:	f000 fd23 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ICM20948_CS_Pin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 8001152:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001160:	2301      	movs	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	480b      	ldr	r0, [pc, #44]	@ (8001198 <MX_GPIO_Init+0x15c>)
 800116c:	f000 fd14 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001170:	2302      	movs	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_GPIO_Init+0x160>)
 8001188:	f000 fd06 	bl	8001b98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800118c:	bf00      	nop
 800118e:	3730      	adds	r7, #48	@ 0x30
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58024400 	.word	0x58024400
 8001198:	58020c00 	.word	0x58020c00
 800119c:	58021000 	.word	0x58021000
 80011a0:	58021400 	.word	0x58021400

080011a4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	e009      	b.n	80011ca <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	60ba      	str	r2, [r7, #8]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fdfa 	bl	8000db8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	dbf1      	blt.n	80011b6 <_write+0x12>
  }
  return len;
 80011d2:	687b      	ldr	r3, [r7, #4]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80011e2:	463b      	mov	r3, r7
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80011ee:	f000 fc5b 	bl	8001aa8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011f2:	2301      	movs	r3, #1
 80011f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011fe:	231f      	movs	r3, #31
 8001200:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001202:	2387      	movs	r3, #135	@ 0x87
 8001204:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001206:	2300      	movs	r3, #0
 8001208:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800120a:	2300      	movs	r3, #0
 800120c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800120e:	2301      	movs	r3, #1
 8001210:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001212:	2301      	movs	r3, #1
 8001214:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800121e:	463b      	mov	r3, r7
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fc79 	bl	8001b18 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001226:	2004      	movs	r0, #4
 8001228:	f000 fc56 	bl	8001ad8 <HAL_MPU_Enable>

}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <Error_Handler+0x8>

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_MspInit+0x30>)
 8001248:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800124c:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <HAL_MspInit+0x30>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_MspInit+0x30>)
 8001258:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	58024400 	.word	0x58024400

08001274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0bc      	sub	sp, #240	@ 0xf0
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	22c0      	movs	r2, #192	@ 0xc0
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f004 fe29 	bl	8005eec <memset>
  if(hspi->Instance==SPI1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a4b      	ldr	r2, [pc, #300]	@ (80013cc <HAL_SPI_MspInit+0x158>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	f040 808e 	bne.w	80013c2 <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b6:	f107 0318 	add.w	r3, r7, #24
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 fdfa 	bl	8002eb4 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80012c6:	f7ff ffb5 	bl	8001234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ca:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <HAL_SPI_MspInit+0x15c>)
 80012cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012d0:	4a3f      	ldr	r2, [pc, #252]	@ (80013d0 <HAL_SPI_MspInit+0x15c>)
 80012d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012da:	4b3d      	ldr	r3, [pc, #244]	@ (80013d0 <HAL_SPI_MspInit+0x15c>)
 80012dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b39      	ldr	r3, [pc, #228]	@ (80013d0 <HAL_SPI_MspInit+0x15c>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	4a38      	ldr	r2, [pc, #224]	@ (80013d0 <HAL_SPI_MspInit+0x15c>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f8:	4b35      	ldr	r3, [pc, #212]	@ (80013d0 <HAL_SPI_MspInit+0x15c>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001306:	4b32      	ldr	r3, [pc, #200]	@ (80013d0 <HAL_SPI_MspInit+0x15c>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	4a30      	ldr	r2, [pc, #192]	@ (80013d0 <HAL_SPI_MspInit+0x15c>)
 800130e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001316:	4b2e      	ldr	r3, [pc, #184]	@ (80013d0 <HAL_SPI_MspInit+0x15c>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	4b2a      	ldr	r3, [pc, #168]	@ (80013d0 <HAL_SPI_MspInit+0x15c>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	4a29      	ldr	r2, [pc, #164]	@ (80013d0 <HAL_SPI_MspInit+0x15c>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001334:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <HAL_SPI_MspInit+0x15c>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin;
 8001342:	2320      	movs	r3, #32
 8001344:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135a:	2305      	movs	r3, #5
 800135c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ICM20948_SCK_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001364:	4619      	mov	r1, r3
 8001366:	481b      	ldr	r0, [pc, #108]	@ (80013d4 <HAL_SPI_MspInit+0x160>)
 8001368:	f000 fc16 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ICM20948_MISO_Pin;
 800136c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001370:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001386:	2305      	movs	r3, #5
 8001388:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ICM20948_MISO_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001390:	4619      	mov	r1, r3
 8001392:	4811      	ldr	r0, [pc, #68]	@ (80013d8 <HAL_SPI_MspInit+0x164>)
 8001394:	f000 fc00 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ICM20948_MOSI_Pin;
 8001398:	2320      	movs	r3, #32
 800139a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013b0:	2305      	movs	r3, #5
 80013b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ICM20948_MOSI_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	@ (80013dc <HAL_SPI_MspInit+0x168>)
 80013be:	f000 fbeb 	bl	8001b98 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013c2:	bf00      	nop
 80013c4:	37f0      	adds	r7, #240	@ 0xf0
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40013000 	.word	0x40013000
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58020000 	.word	0x58020000
 80013d8:	58021800 	.word	0x58021800
 80013dc:	58020400 	.word	0x58020400

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <NMI_Handler+0x4>

080013e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <MemManage_Handler+0x4>

080013f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <UsageFault_Handler+0x4>

08001408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001436:	f000 fa03 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}

0800143e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  return 1;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_kill>:

int _kill(int pid, int sig)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001458:	f004 fd9a 	bl	8005f90 <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	2216      	movs	r2, #22
 8001460:	601a      	str	r2, [r3, #0]
  return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <_exit>:

void _exit (int status)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001476:	f04f 31ff 	mov.w	r1, #4294967295
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffe7 	bl	800144e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <_exit+0x12>

08001484 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e00a      	b.n	80014ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001496:	f3af 8000 	nop.w
 800149a:	4601      	mov	r1, r0
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	b2ca      	uxtb	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf0      	blt.n	8001496 <_read+0x12>
  }

  return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_close>:
  }
  return len;
}

int _close(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e6:	605a      	str	r2, [r3, #4]
  return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_isatty>:

int _isatty(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	@ (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f004 fd1a 	bl	8005f90 <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	@ (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	24080000 	.word	0x24080000
 8001588:	00000400 	.word	0x00000400
 800158c:	240002c0 	.word	0x240002c0
 8001590:	24000418 	.word	0x24000418

08001594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001598:	4b43      	ldr	r3, [pc, #268]	@ (80016a8 <SystemInit+0x114>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159e:	4a42      	ldr	r2, [pc, #264]	@ (80016a8 <SystemInit+0x114>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015a8:	4b40      	ldr	r3, [pc, #256]	@ (80016ac <SystemInit+0x118>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	2b06      	cmp	r3, #6
 80015b2:	d807      	bhi.n	80015c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015b4:	4b3d      	ldr	r3, [pc, #244]	@ (80016ac <SystemInit+0x118>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f023 030f 	bic.w	r3, r3, #15
 80015bc:	4a3b      	ldr	r2, [pc, #236]	@ (80016ac <SystemInit+0x118>)
 80015be:	f043 0307 	orr.w	r3, r3, #7
 80015c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015c4:	4b3a      	ldr	r3, [pc, #232]	@ (80016b0 <SystemInit+0x11c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a39      	ldr	r2, [pc, #228]	@ (80016b0 <SystemInit+0x11c>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015d0:	4b37      	ldr	r3, [pc, #220]	@ (80016b0 <SystemInit+0x11c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015d6:	4b36      	ldr	r3, [pc, #216]	@ (80016b0 <SystemInit+0x11c>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4935      	ldr	r1, [pc, #212]	@ (80016b0 <SystemInit+0x11c>)
 80015dc:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <SystemInit+0x120>)
 80015de:	4013      	ands	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015e2:	4b32      	ldr	r3, [pc, #200]	@ (80016ac <SystemInit+0x118>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015ee:	4b2f      	ldr	r3, [pc, #188]	@ (80016ac <SystemInit+0x118>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 030f 	bic.w	r3, r3, #15
 80015f6:	4a2d      	ldr	r2, [pc, #180]	@ (80016ac <SystemInit+0x118>)
 80015f8:	f043 0307 	orr.w	r3, r3, #7
 80015fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015fe:	4b2c      	ldr	r3, [pc, #176]	@ (80016b0 <SystemInit+0x11c>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001604:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <SystemInit+0x11c>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800160a:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <SystemInit+0x11c>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001610:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <SystemInit+0x11c>)
 8001612:	4a29      	ldr	r2, [pc, #164]	@ (80016b8 <SystemInit+0x124>)
 8001614:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001616:	4b26      	ldr	r3, [pc, #152]	@ (80016b0 <SystemInit+0x11c>)
 8001618:	4a28      	ldr	r2, [pc, #160]	@ (80016bc <SystemInit+0x128>)
 800161a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800161c:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <SystemInit+0x11c>)
 800161e:	4a28      	ldr	r2, [pc, #160]	@ (80016c0 <SystemInit+0x12c>)
 8001620:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001622:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <SystemInit+0x11c>)
 8001624:	2200      	movs	r2, #0
 8001626:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001628:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <SystemInit+0x11c>)
 800162a:	4a25      	ldr	r2, [pc, #148]	@ (80016c0 <SystemInit+0x12c>)
 800162c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <SystemInit+0x11c>)
 8001630:	2200      	movs	r2, #0
 8001632:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001634:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <SystemInit+0x11c>)
 8001636:	4a22      	ldr	r2, [pc, #136]	@ (80016c0 <SystemInit+0x12c>)
 8001638:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800163a:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <SystemInit+0x11c>)
 800163c:	2200      	movs	r2, #0
 800163e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001640:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <SystemInit+0x11c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1a      	ldr	r2, [pc, #104]	@ (80016b0 <SystemInit+0x11c>)
 8001646:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800164a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800164c:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <SystemInit+0x11c>)
 800164e:	2200      	movs	r2, #0
 8001650:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001652:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <SystemInit+0x130>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <SystemInit+0x134>)
 8001658:	4013      	ands	r3, r2
 800165a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800165e:	d202      	bcs.n	8001666 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001660:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <SystemInit+0x138>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001666:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <SystemInit+0x11c>)
 8001668:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800166c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d113      	bne.n	800169c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001674:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <SystemInit+0x11c>)
 8001676:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800167a:	4a0d      	ldr	r2, [pc, #52]	@ (80016b0 <SystemInit+0x11c>)
 800167c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001680:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <SystemInit+0x13c>)
 8001686:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800168a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <SystemInit+0x11c>)
 800168e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001692:	4a07      	ldr	r2, [pc, #28]	@ (80016b0 <SystemInit+0x11c>)
 8001694:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001698:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00
 80016ac:	52002000 	.word	0x52002000
 80016b0:	58024400 	.word	0x58024400
 80016b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80016b8:	02020200 	.word	0x02020200
 80016bc:	01ff0000 	.word	0x01ff0000
 80016c0:	01010280 	.word	0x01010280
 80016c4:	5c001000 	.word	0x5c001000
 80016c8:	ffff0000 	.word	0xffff0000
 80016cc:	51008108 	.word	0x51008108
 80016d0:	52004000 	.word	0x52004000

080016d4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <ExitRun0Mode+0x2c>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <ExitRun0Mode+0x2c>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80016e4:	bf00      	nop
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <ExitRun0Mode+0x2c>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f9      	beq.n	80016e6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	58024800 	.word	0x58024800

08001704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001704:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001740 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001708:	f7ff ffe4 	bl	80016d4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800170c:	f7ff ff42 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001728:	4c0a      	ldr	r4, [pc, #40]	@ (8001754 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001736:	f004 fc31 	bl	8005f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173a:	f7ff fb65 	bl	8000e08 <main>
  bx  lr
 800173e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001744:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001748:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 800174c:	08008080 	.word	0x08008080
  ldr r2, =_sbss
 8001750:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001754:	24000414 	.word	0x24000414

08001758 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC3_IRQHandler>
	...

0800175c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001762:	2003      	movs	r0, #3
 8001764:	f000 f96e 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001768:	f001 fa2a 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 800176c:	4602      	mov	r2, r0
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <HAL_Init+0x68>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	4913      	ldr	r1, [pc, #76]	@ (80017c8 <HAL_Init+0x6c>)
 800177a:	5ccb      	ldrb	r3, [r1, r3]
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	fa22 f303 	lsr.w	r3, r2, r3
 8001784:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <HAL_Init+0x68>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	4a0e      	ldr	r2, [pc, #56]	@ (80017c8 <HAL_Init+0x6c>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	4a0b      	ldr	r2, [pc, #44]	@ (80017cc <HAL_Init+0x70>)
 800179e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017a0:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <HAL_Init+0x74>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017a6:	200f      	movs	r0, #15
 80017a8:	f000 f814 	bl	80017d4 <HAL_InitTick>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e002      	b.n	80017bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017b6:	f7ff fd43 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	58024400 	.word	0x58024400
 80017c8:	08007cf0 	.word	0x08007cf0
 80017cc:	2400000c 	.word	0x2400000c
 80017d0:	24000008 	.word	0x24000008

080017d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017dc:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <HAL_InitTick+0x60>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e021      	b.n	800182c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <HAL_InitTick+0x64>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <HAL_InitTick+0x60>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f945 	bl	8001a8e <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f000 f91d 	bl	8001a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	@ (800183c <HAL_InitTick+0x68>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24000014 	.word	0x24000014
 8001838:	24000008 	.word	0x24000008
 800183c:	24000010 	.word	0x24000010

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	24000014 	.word	0x24000014
 8001864:	240002c4 	.word	0x240002c4

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	240002c4 	.word	0x240002c4

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	24000014 	.word	0x24000014

080018c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <HAL_GetREVID+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	0c1b      	lsrs	r3, r3, #16
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	5c001000 	.word	0x5c001000

080018e0 <__NVIC_SetPriorityGrouping>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <__NVIC_SetPriorityGrouping+0x40>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	4313      	orrs	r3, r2
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <__NVIC_SetPriorityGrouping+0x40>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	05fa0000 	.word	0x05fa0000

08001928 <__NVIC_GetPriorityGrouping>:
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_SetPriority>:
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	@ (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	@ (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <SysTick_Config>:
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a10:	d301      	bcc.n	8001a16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <SysTick_Config+0x40>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1e:	210f      	movs	r1, #15
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f7ff ff8e 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <SysTick_Config+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <SysTick_Config+0x40>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff47 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a68:	f7ff ff5e 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7ff ff90 	bl	8001998 <NVIC_EncodePriority>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff5f 	bl	8001944 <__NVIC_SetPriority>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffb2 	bl	8001a00 <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001aac:	f3bf 8f5f 	dmb	sy
}
 8001ab0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <HAL_MPU_Disable+0x28>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab6:	4a06      	ldr	r2, [pc, #24]	@ (8001ad0 <HAL_MPU_Disable+0x28>)
 8001ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001abc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_MPU_Disable+0x2c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	605a      	str	r2, [r3, #4]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	e000ed90 	.word	0xe000ed90

08001ad8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b10 <HAL_MPU_Enable+0x38>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_MPU_Enable+0x3c>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	4a09      	ldr	r2, [pc, #36]	@ (8001b14 <HAL_MPU_Enable+0x3c>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001af6:	f3bf 8f4f 	dsb	sy
}
 8001afa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001afc:	f3bf 8f6f 	isb	sy
}
 8001b00:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed90 	.word	0xe000ed90
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	785a      	ldrb	r2, [r3, #1]
 8001b24:	4b1b      	ldr	r3, [pc, #108]	@ (8001b94 <HAL_MPU_ConfigRegion+0x7c>)
 8001b26:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b28:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <HAL_MPU_ConfigRegion+0x7c>)
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	4a19      	ldr	r2, [pc, #100]	@ (8001b94 <HAL_MPU_ConfigRegion+0x7c>)
 8001b2e:	f023 0301 	bic.w	r3, r3, #1
 8001b32:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b34:	4a17      	ldr	r2, [pc, #92]	@ (8001b94 <HAL_MPU_ConfigRegion+0x7c>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7b1b      	ldrb	r3, [r3, #12]
 8001b40:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7adb      	ldrb	r3, [r3, #11]
 8001b46:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7a9b      	ldrb	r3, [r3, #10]
 8001b4e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7b5b      	ldrb	r3, [r3, #13]
 8001b56:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7b9b      	ldrb	r3, [r3, #14]
 8001b5e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7bdb      	ldrb	r3, [r3, #15]
 8001b66:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7a5b      	ldrb	r3, [r3, #9]
 8001b6e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7a1b      	ldrb	r3, [r3, #8]
 8001b76:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b78:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	7812      	ldrb	r2, [r2, #0]
 8001b7e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b80:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b82:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b84:	6113      	str	r3, [r2, #16]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed90 	.word	0xe000ed90

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	@ 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ba6:	4b89      	ldr	r3, [pc, #548]	@ (8001dcc <HAL_GPIO_Init+0x234>)
 8001ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001baa:	e194      	b.n	8001ed6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8186 	beq.w	8001ed0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d005      	beq.n	8001bdc <HAL_GPIO_Init+0x44>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c12:	2201      	movs	r2, #1
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 0201 	and.w	r2, r3, #1
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d017      	beq.n	8001c7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d123      	bne.n	8001cce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3208      	adds	r2, #8
 8001c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	69b9      	ldr	r1, [r7, #24]
 8001cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0203 	and.w	r2, r3, #3
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80e0 	beq.w	8001ed0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d10:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd0 <HAL_GPIO_Init+0x238>)
 8001d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d16:	4a2e      	ldr	r2, [pc, #184]	@ (8001dd0 <HAL_GPIO_Init+0x238>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d20:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd0 <HAL_GPIO_Init+0x238>)
 8001d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2e:	4a29      	ldr	r2, [pc, #164]	@ (8001dd4 <HAL_GPIO_Init+0x23c>)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a20      	ldr	r2, [pc, #128]	@ (8001dd8 <HAL_GPIO_Init+0x240>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d052      	beq.n	8001e00 <HAL_GPIO_Init+0x268>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ddc <HAL_GPIO_Init+0x244>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d031      	beq.n	8001dc6 <HAL_GPIO_Init+0x22e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a1e      	ldr	r2, [pc, #120]	@ (8001de0 <HAL_GPIO_Init+0x248>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d02b      	beq.n	8001dc2 <HAL_GPIO_Init+0x22a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001de4 <HAL_GPIO_Init+0x24c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d025      	beq.n	8001dbe <HAL_GPIO_Init+0x226>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a1c      	ldr	r2, [pc, #112]	@ (8001de8 <HAL_GPIO_Init+0x250>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01f      	beq.n	8001dba <HAL_GPIO_Init+0x222>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dec <HAL_GPIO_Init+0x254>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x21e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1a      	ldr	r2, [pc, #104]	@ (8001df0 <HAL_GPIO_Init+0x258>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x21a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	@ (8001df4 <HAL_GPIO_Init+0x25c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x216>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a18      	ldr	r2, [pc, #96]	@ (8001df8 <HAL_GPIO_Init+0x260>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x212>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a17      	ldr	r2, [pc, #92]	@ (8001dfc <HAL_GPIO_Init+0x264>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x20e>
 8001da2:	2309      	movs	r3, #9
 8001da4:	e02d      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001da6:	230a      	movs	r3, #10
 8001da8:	e02b      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001daa:	2308      	movs	r3, #8
 8001dac:	e029      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001dae:	2307      	movs	r3, #7
 8001db0:	e027      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001db2:	2306      	movs	r3, #6
 8001db4:	e025      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001db6:	2305      	movs	r3, #5
 8001db8:	e023      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001dba:	2304      	movs	r3, #4
 8001dbc:	e021      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e01f      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e01d      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e01b      	b.n	8001e02 <HAL_GPIO_Init+0x26a>
 8001dca:	bf00      	nop
 8001dcc:	58000080 	.word	0x58000080
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	58000400 	.word	0x58000400
 8001dd8:	58020000 	.word	0x58020000
 8001ddc:	58020400 	.word	0x58020400
 8001de0:	58020800 	.word	0x58020800
 8001de4:	58020c00 	.word	0x58020c00
 8001de8:	58021000 	.word	0x58021000
 8001dec:	58021400 	.word	0x58021400
 8001df0:	58021800 	.word	0x58021800
 8001df4:	58021c00 	.word	0x58021c00
 8001df8:	58022000 	.word	0x58022000
 8001dfc:	58022400 	.word	0x58022400
 8001e00:	2300      	movs	r3, #0
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	f002 0203 	and.w	r2, r2, #3
 8001e08:	0092      	lsls	r2, r2, #2
 8001e0a:	4093      	lsls	r3, r2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e12:	4938      	ldr	r1, [pc, #224]	@ (8001ef4 <HAL_GPIO_Init+0x35c>)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f47f ae63 	bne.w	8001bac <HAL_GPIO_Init+0x14>
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	3724      	adds	r7, #36	@ 0x24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	58000400 	.word	0x58000400

08001ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f14:	e003      	b.n	8001f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	619a      	str	r2, [r3, #24]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001f34:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_PWREx_ConfigSupply+0x70>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d00a      	beq.n	8001f56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f40:	4b16      	ldr	r3, [pc, #88]	@ (8001f9c <HAL_PWREx_ConfigSupply+0x70>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e01f      	b.n	8001f92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e01d      	b.n	8001f92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f56:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_PWREx_ConfigSupply+0x70>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f023 0207 	bic.w	r2, r3, #7
 8001f5e:	490f      	ldr	r1, [pc, #60]	@ (8001f9c <HAL_PWREx_ConfigSupply+0x70>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f66:	f7ff fc7f 	bl	8001868 <HAL_GetTick>
 8001f6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f6c:	e009      	b.n	8001f82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f6e:	f7ff fc7b 	bl	8001868 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f7c:	d901      	bls.n	8001f82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e007      	b.n	8001f92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_PWREx_ConfigSupply+0x70>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f8e:	d1ee      	bne.n	8001f6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	58024800 	.word	0x58024800

08001fa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	@ 0x30
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f000 bc48 	b.w	8002844 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 8088 	beq.w	80020d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc2:	4b99      	ldr	r3, [pc, #612]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fcc:	4b96      	ldr	r3, [pc, #600]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8001fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd4:	2b10      	cmp	r3, #16
 8001fd6:	d007      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x48>
 8001fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fda:	2b18      	cmp	r3, #24
 8001fdc:	d111      	bne.n	8002002 <HAL_RCC_OscConfig+0x62>
 8001fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d10c      	bne.n	8002002 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	4b8f      	ldr	r3, [pc, #572]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d06d      	beq.n	80020d0 <HAL_RCC_OscConfig+0x130>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d169      	bne.n	80020d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f000 bc21 	b.w	8002844 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800200a:	d106      	bne.n	800201a <HAL_RCC_OscConfig+0x7a>
 800200c:	4b86      	ldr	r3, [pc, #536]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a85      	ldr	r2, [pc, #532]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	e02e      	b.n	8002078 <HAL_RCC_OscConfig+0xd8>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0x9c>
 8002022:	4b81      	ldr	r3, [pc, #516]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a80      	ldr	r2, [pc, #512]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4b7e      	ldr	r3, [pc, #504]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a7d      	ldr	r2, [pc, #500]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002034:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e01d      	b.n	8002078 <HAL_RCC_OscConfig+0xd8>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0xc0>
 8002046:	4b78      	ldr	r3, [pc, #480]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a77      	ldr	r2, [pc, #476]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 800204c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b75      	ldr	r3, [pc, #468]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a74      	ldr	r2, [pc, #464]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e00b      	b.n	8002078 <HAL_RCC_OscConfig+0xd8>
 8002060:	4b71      	ldr	r3, [pc, #452]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a70      	ldr	r2, [pc, #448]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b6e      	ldr	r3, [pc, #440]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6d      	ldr	r2, [pc, #436]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d013      	beq.n	80020a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7ff fbf2 	bl	8001868 <HAL_GetTick>
 8002084:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002088:	f7ff fbee 	bl	8001868 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	@ 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e3d4      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800209a:	4b63      	ldr	r3, [pc, #396]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0xe8>
 80020a6:	e014      	b.n	80020d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7ff fbde 	bl	8001868 <HAL_GetTick>
 80020ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b0:	f7ff fbda 	bl	8001868 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	@ 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e3c0      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020c2:	4b59      	ldr	r3, [pc, #356]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x110>
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80ca 	beq.w	8002274 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e0:	4b51      	ldr	r3, [pc, #324]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 80020ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_RCC_OscConfig+0x166>
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	2b18      	cmp	r3, #24
 80020fa:	d156      	bne.n	80021aa <HAL_RCC_OscConfig+0x20a>
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d151      	bne.n	80021aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002106:	4b48      	ldr	r3, [pc, #288]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_RCC_OscConfig+0x17e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e392      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800211e:	4b42      	ldr	r3, [pc, #264]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 0219 	bic.w	r2, r3, #25
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	493f      	ldr	r1, [pc, #252]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7ff fb9a 	bl	8001868 <HAL_GetTick>
 8002134:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002138:	f7ff fb96 	bl	8001868 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e37c      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800214a:	4b37      	ldr	r3, [pc, #220]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002156:	f7ff fbb7 	bl	80018c8 <HAL_GetREVID>
 800215a:	4603      	mov	r3, r0
 800215c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002160:	4293      	cmp	r3, r2
 8002162:	d817      	bhi.n	8002194 <HAL_RCC_OscConfig+0x1f4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b40      	cmp	r3, #64	@ 0x40
 800216a:	d108      	bne.n	800217e <HAL_RCC_OscConfig+0x1de>
 800216c:	4b2e      	ldr	r3, [pc, #184]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002174:	4a2c      	ldr	r2, [pc, #176]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800217a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217c:	e07a      	b.n	8002274 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b2a      	ldr	r3, [pc, #168]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	031b      	lsls	r3, r3, #12
 800218c:	4926      	ldr	r1, [pc, #152]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002192:	e06f      	b.n	8002274 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002194:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	4921      	ldr	r1, [pc, #132]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a8:	e064      	b.n	8002274 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d047      	beq.n	8002242 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0219 	bic.w	r2, r3, #25
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	491a      	ldr	r1, [pc, #104]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7ff fb50 	bl	8001868 <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021cc:	f7ff fb4c 	bl	8001868 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e332      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021de:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ea:	f7ff fb6d 	bl	80018c8 <HAL_GetREVID>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d819      	bhi.n	800222c <HAL_RCC_OscConfig+0x28c>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	2b40      	cmp	r3, #64	@ 0x40
 80021fe:	d108      	bne.n	8002212 <HAL_RCC_OscConfig+0x272>
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002208:	4a07      	ldr	r2, [pc, #28]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 800220a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800220e:	6053      	str	r3, [r2, #4]
 8002210:	e030      	b.n	8002274 <HAL_RCC_OscConfig+0x2d4>
 8002212:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	031b      	lsls	r3, r3, #12
 8002220:	4901      	ldr	r1, [pc, #4]	@ (8002228 <HAL_RCC_OscConfig+0x288>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
 8002226:	e025      	b.n	8002274 <HAL_RCC_OscConfig+0x2d4>
 8002228:	58024400 	.word	0x58024400
 800222c:	4b9a      	ldr	r3, [pc, #616]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	061b      	lsls	r3, r3, #24
 800223a:	4997      	ldr	r1, [pc, #604]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
 8002240:	e018      	b.n	8002274 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002242:	4b95      	ldr	r3, [pc, #596]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a94      	ldr	r2, [pc, #592]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7ff fb0b 	bl	8001868 <HAL_GetTick>
 8002252:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002256:	f7ff fb07 	bl	8001868 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e2ed      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002268:	4b8b      	ldr	r3, [pc, #556]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a9 	beq.w	80023d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002282:	4b85      	ldr	r3, [pc, #532]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800228a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800228c:	4b82      	ldr	r3, [pc, #520]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 800228e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002290:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d007      	beq.n	80022a8 <HAL_RCC_OscConfig+0x308>
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b18      	cmp	r3, #24
 800229c:	d13a      	bne.n	8002314 <HAL_RCC_OscConfig+0x374>
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d135      	bne.n	8002314 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_OscConfig+0x320>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b80      	cmp	r3, #128	@ 0x80
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e2c1      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022c0:	f7ff fb02 	bl	80018c8 <HAL_GetREVID>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d817      	bhi.n	80022fe <HAL_RCC_OscConfig+0x35e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d108      	bne.n	80022e8 <HAL_RCC_OscConfig+0x348>
 80022d6:	4b70      	ldr	r3, [pc, #448]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80022de:	4a6e      	ldr	r2, [pc, #440]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 80022e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80022e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022e6:	e075      	b.n	80023d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	069b      	lsls	r3, r3, #26
 80022f6:	4968      	ldr	r1, [pc, #416]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022fc:	e06a      	b.n	80023d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022fe:	4b66      	ldr	r3, [pc, #408]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	061b      	lsls	r3, r3, #24
 800230c:	4962      	ldr	r1, [pc, #392]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 800230e:	4313      	orrs	r3, r2
 8002310:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002312:	e05f      	b.n	80023d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d042      	beq.n	80023a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800231c:	4b5e      	ldr	r3, [pc, #376]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a5d      	ldr	r2, [pc, #372]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7ff fa9e 	bl	8001868 <HAL_GetTick>
 800232c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002330:	f7ff fa9a 	bl	8001868 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e280      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002342:	4b55      	ldr	r3, [pc, #340]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800234e:	f7ff fabb 	bl	80018c8 <HAL_GetREVID>
 8002352:	4603      	mov	r3, r0
 8002354:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002358:	4293      	cmp	r3, r2
 800235a:	d817      	bhi.n	800238c <HAL_RCC_OscConfig+0x3ec>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	2b20      	cmp	r3, #32
 8002362:	d108      	bne.n	8002376 <HAL_RCC_OscConfig+0x3d6>
 8002364:	4b4c      	ldr	r3, [pc, #304]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800236c:	4a4a      	ldr	r2, [pc, #296]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 800236e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002372:	6053      	str	r3, [r2, #4]
 8002374:	e02e      	b.n	80023d4 <HAL_RCC_OscConfig+0x434>
 8002376:	4b48      	ldr	r3, [pc, #288]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	069b      	lsls	r3, r3, #26
 8002384:	4944      	ldr	r1, [pc, #272]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
 800238a:	e023      	b.n	80023d4 <HAL_RCC_OscConfig+0x434>
 800238c:	4b42      	ldr	r3, [pc, #264]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	061b      	lsls	r3, r3, #24
 800239a:	493f      	ldr	r1, [pc, #252]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 800239c:	4313      	orrs	r3, r2
 800239e:	60cb      	str	r3, [r1, #12]
 80023a0:	e018      	b.n	80023d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80023a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 80023a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7ff fa5b 	bl	8001868 <HAL_GetTick>
 80023b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80023b6:	f7ff fa57 	bl	8001868 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e23d      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023c8:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d036      	beq.n	800244e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d019      	beq.n	800241c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 80023ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7ff fa38 	bl	8001868 <HAL_GetTick>
 80023f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7ff fa34 	bl	8001868 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e21a      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800240e:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x45c>
 800241a:	e018      	b.n	800244e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241c:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 800241e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002420:	4a1d      	ldr	r2, [pc, #116]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7ff fa1e 	bl	8001868 <HAL_GetTick>
 800242c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7ff fa1a 	bl	8001868 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e200      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002442:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d039      	beq.n	80024ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01c      	beq.n	800249c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002462:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a0c      	ldr	r2, [pc, #48]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 8002468:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800246c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800246e:	f7ff f9fb 	bl	8001868 <HAL_GetTick>
 8002472:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002476:	f7ff f9f7 	bl	8001868 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e1dd      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <HAL_RCC_OscConfig+0x4f8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x4d6>
 8002494:	e01b      	b.n	80024ce <HAL_RCC_OscConfig+0x52e>
 8002496:	bf00      	nop
 8002498:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800249c:	4b9b      	ldr	r3, [pc, #620]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a9a      	ldr	r2, [pc, #616]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80024a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024a8:	f7ff f9de 	bl	8001868 <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024b0:	f7ff f9da 	bl	8001868 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e1c0      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024c2:	4b92      	ldr	r3, [pc, #584]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8081 	beq.w	80025de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002710 <HAL_RCC_OscConfig+0x770>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a8b      	ldr	r2, [pc, #556]	@ (8002710 <HAL_RCC_OscConfig+0x770>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e8:	f7ff f9be 	bl	8001868 <HAL_GetTick>
 80024ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7ff f9ba 	bl	8001868 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	@ 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1a0      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002502:	4b83      	ldr	r3, [pc, #524]	@ (8002710 <HAL_RCC_OscConfig+0x770>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d106      	bne.n	8002524 <HAL_RCC_OscConfig+0x584>
 8002516:	4b7d      	ldr	r3, [pc, #500]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251a:	4a7c      	ldr	r2, [pc, #496]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6713      	str	r3, [r2, #112]	@ 0x70
 8002522:	e02d      	b.n	8002580 <HAL_RCC_OscConfig+0x5e0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10c      	bne.n	8002546 <HAL_RCC_OscConfig+0x5a6>
 800252c:	4b77      	ldr	r3, [pc, #476]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002530:	4a76      	ldr	r2, [pc, #472]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	@ 0x70
 8002538:	4b74      	ldr	r3, [pc, #464]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253c:	4a73      	ldr	r2, [pc, #460]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 800253e:	f023 0304 	bic.w	r3, r3, #4
 8002542:	6713      	str	r3, [r2, #112]	@ 0x70
 8002544:	e01c      	b.n	8002580 <HAL_RCC_OscConfig+0x5e0>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b05      	cmp	r3, #5
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x5c8>
 800254e:	4b6f      	ldr	r3, [pc, #444]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002552:	4a6e      	ldr	r2, [pc, #440]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	6713      	str	r3, [r2, #112]	@ 0x70
 800255a:	4b6c      	ldr	r3, [pc, #432]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255e:	4a6b      	ldr	r2, [pc, #428]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6713      	str	r3, [r2, #112]	@ 0x70
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0x5e0>
 8002568:	4b68      	ldr	r3, [pc, #416]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256c:	4a67      	ldr	r2, [pc, #412]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	6713      	str	r3, [r2, #112]	@ 0x70
 8002574:	4b65      	ldr	r3, [pc, #404]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002578:	4a64      	ldr	r2, [pc, #400]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 800257a:	f023 0304 	bic.w	r3, r3, #4
 800257e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7ff f96e 	bl	8001868 <HAL_GetTick>
 800258c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7ff f96a 	bl	8001868 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e14e      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025a6:	4b59      	ldr	r3, [pc, #356]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ee      	beq.n	8002590 <HAL_RCC_OscConfig+0x5f0>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff f958 	bl	8001868 <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7ff f954 	bl	8001868 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e138      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025d2:	4b4e      	ldr	r3, [pc, #312]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1ee      	bne.n	80025bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 812d 	beq.w	8002842 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80025e8:	4b48      	ldr	r3, [pc, #288]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025f0:	2b18      	cmp	r3, #24
 80025f2:	f000 80bd 	beq.w	8002770 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	f040 809e 	bne.w	800273c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b42      	ldr	r3, [pc, #264]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a41      	ldr	r2, [pc, #260]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800260a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff f92c 	bl	8001868 <HAL_GetTick>
 8002610:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7ff f928 	bl	8001868 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e10e      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002626:	4b39      	ldr	r3, [pc, #228]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002632:	4b36      	ldr	r3, [pc, #216]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002634:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002636:	4b37      	ldr	r3, [pc, #220]	@ (8002714 <HAL_RCC_OscConfig+0x774>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002642:	0112      	lsls	r2, r2, #4
 8002644:	430a      	orrs	r2, r1
 8002646:	4931      	ldr	r1, [pc, #196]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002648:	4313      	orrs	r3, r2
 800264a:	628b      	str	r3, [r1, #40]	@ 0x28
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002650:	3b01      	subs	r3, #1
 8002652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265a:	3b01      	subs	r3, #1
 800265c:	025b      	lsls	r3, r3, #9
 800265e:	b29b      	uxth	r3, r3
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002666:	3b01      	subs	r3, #1
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002674:	3b01      	subs	r3, #1
 8002676:	061b      	lsls	r3, r3, #24
 8002678:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800267c:	4923      	ldr	r1, [pc, #140]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 800267e:	4313      	orrs	r3, r2
 8002680:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002682:	4b22      	ldr	r3, [pc, #136]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002686:	4a21      	ldr	r2, [pc, #132]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800268e:	4b1f      	ldr	r3, [pc, #124]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 8002690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002692:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_RCC_OscConfig+0x778>)
 8002694:	4013      	ands	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800269a:	00d2      	lsls	r2, r2, #3
 800269c:	491b      	ldr	r1, [pc, #108]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	f023 020c 	bic.w	r2, r3, #12
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	4917      	ldr	r1, [pc, #92]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80026b4:	4b15      	ldr	r3, [pc, #84]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	f023 0202 	bic.w	r2, r3, #2
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c0:	4912      	ldr	r1, [pc, #72]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026c6:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ca:	4a10      	ldr	r2, [pc, #64]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d2:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d6:	4a0d      	ldr	r2, [pc, #52]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80026de:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e2:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80026ea:	4b08      	ldr	r3, [pc, #32]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ee:	4a07      	ldr	r2, [pc, #28]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a04      	ldr	r2, [pc, #16]	@ (800270c <HAL_RCC_OscConfig+0x76c>)
 80026fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7ff f8b1 	bl	8001868 <HAL_GetTick>
 8002706:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002708:	e011      	b.n	800272e <HAL_RCC_OscConfig+0x78e>
 800270a:	bf00      	nop
 800270c:	58024400 	.word	0x58024400
 8002710:	58024800 	.word	0x58024800
 8002714:	fffffc0c 	.word	0xfffffc0c
 8002718:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7ff f8a4 	bl	8001868 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e08a      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800272e:	4b47      	ldr	r3, [pc, #284]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x77c>
 800273a:	e082      	b.n	8002842 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273c:	4b43      	ldr	r3, [pc, #268]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a42      	ldr	r2, [pc, #264]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 8002742:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7ff f88e 	bl	8001868 <HAL_GetTick>
 800274c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002750:	f7ff f88a 	bl	8001868 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e070      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002762:	4b3a      	ldr	r3, [pc, #232]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x7b0>
 800276e:	e068      	b.n	8002842 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002770:	4b36      	ldr	r3, [pc, #216]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002776:	4b35      	ldr	r3, [pc, #212]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	2b01      	cmp	r3, #1
 8002782:	d031      	beq.n	80027e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f003 0203 	and.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d12a      	bne.n	80027e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d122      	bne.n	80027e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d11a      	bne.n	80027e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	0a5b      	lsrs	r3, r3, #9
 80027b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d111      	bne.n	80027e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	0c1b      	lsrs	r3, r3, #16
 80027c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d108      	bne.n	80027e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	0e1b      	lsrs	r3, r3, #24
 80027da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e02b      	b.n	8002844 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80027ec:	4b17      	ldr	r3, [pc, #92]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 80027ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f0:	08db      	lsrs	r3, r3, #3
 80027f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d01f      	beq.n	8002842 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002802:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	4a11      	ldr	r2, [pc, #68]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800280e:	f7ff f82b 	bl	8001868 <HAL_GetTick>
 8002812:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002814:	bf00      	nop
 8002816:	f7ff f827 	bl	8001868 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	4293      	cmp	r3, r2
 8002820:	d0f9      	beq.n	8002816 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002822:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 8002824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <HAL_RCC_OscConfig+0x8b0>)
 8002828:	4013      	ands	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800282e:	00d2      	lsls	r2, r2, #3
 8002830:	4906      	ldr	r1, [pc, #24]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 8002832:	4313      	orrs	r3, r2
 8002834:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002836:	4b05      	ldr	r3, [pc, #20]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	4a04      	ldr	r2, [pc, #16]	@ (800284c <HAL_RCC_OscConfig+0x8ac>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3730      	adds	r7, #48	@ 0x30
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	58024400 	.word	0x58024400
 8002850:	ffff0007 	.word	0xffff0007

08002854 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e19c      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b8a      	ldr	r3, [pc, #552]	@ (8002a94 <HAL_RCC_ClockConfig+0x240>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d910      	bls.n	8002898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b87      	ldr	r3, [pc, #540]	@ (8002a94 <HAL_RCC_ClockConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 020f 	bic.w	r2, r3, #15
 800287e:	4985      	ldr	r1, [pc, #532]	@ (8002a94 <HAL_RCC_ClockConfig+0x240>)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b83      	ldr	r3, [pc, #524]	@ (8002a94 <HAL_RCC_ClockConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e184      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d010      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d908      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028b4:	4b78      	ldr	r3, [pc, #480]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	4975      	ldr	r1, [pc, #468]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d010      	beq.n	80028f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	4b70      	ldr	r3, [pc, #448]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028de:	429a      	cmp	r2, r3
 80028e0:	d908      	bls.n	80028f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	496a      	ldr	r1, [pc, #424]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d010      	beq.n	8002922 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	4b64      	ldr	r3, [pc, #400]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800290c:	429a      	cmp	r2, r3
 800290e:	d908      	bls.n	8002922 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002910:	4b61      	ldr	r3, [pc, #388]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	495e      	ldr	r1, [pc, #376]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 800291e:	4313      	orrs	r3, r2
 8002920:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	d010      	beq.n	8002950 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	4b59      	ldr	r3, [pc, #356]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800293a:	429a      	cmp	r2, r3
 800293c:	d908      	bls.n	8002950 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800293e:	4b56      	ldr	r3, [pc, #344]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	4953      	ldr	r1, [pc, #332]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 800294c:	4313      	orrs	r3, r2
 800294e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d010      	beq.n	800297e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	4b4d      	ldr	r3, [pc, #308]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	429a      	cmp	r2, r3
 800296a:	d908      	bls.n	800297e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f023 020f 	bic.w	r2, r3, #15
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4947      	ldr	r1, [pc, #284]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 800297a:	4313      	orrs	r3, r2
 800297c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d055      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800298a:	4b43      	ldr	r3, [pc, #268]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4940      	ldr	r1, [pc, #256]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 8002998:	4313      	orrs	r3, r2
 800299a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d121      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0f6      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d107      	bne.n	80029cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029bc:	4b36      	ldr	r3, [pc, #216]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d115      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0ea      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029d4:	4b30      	ldr	r3, [pc, #192]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0de      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0d6      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029f4:	4b28      	ldr	r3, [pc, #160]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f023 0207 	bic.w	r2, r3, #7
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4925      	ldr	r1, [pc, #148]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a06:	f7fe ff2f 	bl	8001868 <HAL_GetTick>
 8002a0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0e:	f7fe ff2b 	bl	8001868 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e0be      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a24:	4b1c      	ldr	r3, [pc, #112]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d1eb      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d010      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d208      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a52:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f023 020f 	bic.w	r2, r3, #15
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	490e      	ldr	r1, [pc, #56]	@ (8002a98 <HAL_RCC_ClockConfig+0x244>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_ClockConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d214      	bcs.n	8002a9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <HAL_RCC_ClockConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 020f 	bic.w	r2, r3, #15
 8002a7a:	4906      	ldr	r1, [pc, #24]	@ (8002a94 <HAL_RCC_ClockConfig+0x240>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <HAL_RCC_ClockConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e086      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x34e>
 8002a94:	52002000 	.word	0x52002000
 8002a98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d010      	beq.n	8002aca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	4b3f      	ldr	r3, [pc, #252]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d208      	bcs.n	8002aca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ab8:	4b3c      	ldr	r3, [pc, #240]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	4939      	ldr	r1, [pc, #228]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d010      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	4b34      	ldr	r3, [pc, #208]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d208      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ae6:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	492e      	ldr	r1, [pc, #184]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d010      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699a      	ldr	r2, [r3, #24]
 8002b08:	4b28      	ldr	r3, [pc, #160]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d208      	bcs.n	8002b26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b14:	4b25      	ldr	r3, [pc, #148]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4922      	ldr	r1, [pc, #136]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d010      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69da      	ldr	r2, [r3, #28]
 8002b36:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d208      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b42:	4b1a      	ldr	r3, [pc, #104]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4917      	ldr	r1, [pc, #92]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b54:	f000 f834 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	4912      	ldr	r1, [pc, #72]	@ (8002bb0 <HAL_RCC_ClockConfig+0x35c>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b72:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <HAL_RCC_ClockConfig+0x358>)
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb0 <HAL_RCC_ClockConfig+0x35c>)
 8002b7c:	5cd3      	ldrb	r3, [r2, r3]
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
 8002b88:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb4 <HAL_RCC_ClockConfig+0x360>)
 8002b8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb8 <HAL_RCC_ClockConfig+0x364>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002b92:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <HAL_RCC_ClockConfig+0x368>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fe1c 	bl	80017d4 <HAL_InitTick>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	58024400 	.word	0x58024400
 8002bb0:	08007cf0 	.word	0x08007cf0
 8002bb4:	2400000c 	.word	0x2400000c
 8002bb8:	24000008 	.word	0x24000008
 8002bbc:	24000010 	.word	0x24000010

08002bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	@ 0x24
 8002bc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc6:	4bb3      	ldr	r3, [pc, #716]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bce:	2b18      	cmp	r3, #24
 8002bd0:	f200 8155 	bhi.w	8002e7e <HAL_RCC_GetSysClockFreq+0x2be>
 8002bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002c41 	.word	0x08002c41
 8002be0:	08002e7f 	.word	0x08002e7f
 8002be4:	08002e7f 	.word	0x08002e7f
 8002be8:	08002e7f 	.word	0x08002e7f
 8002bec:	08002e7f 	.word	0x08002e7f
 8002bf0:	08002e7f 	.word	0x08002e7f
 8002bf4:	08002e7f 	.word	0x08002e7f
 8002bf8:	08002e7f 	.word	0x08002e7f
 8002bfc:	08002c67 	.word	0x08002c67
 8002c00:	08002e7f 	.word	0x08002e7f
 8002c04:	08002e7f 	.word	0x08002e7f
 8002c08:	08002e7f 	.word	0x08002e7f
 8002c0c:	08002e7f 	.word	0x08002e7f
 8002c10:	08002e7f 	.word	0x08002e7f
 8002c14:	08002e7f 	.word	0x08002e7f
 8002c18:	08002e7f 	.word	0x08002e7f
 8002c1c:	08002c6d 	.word	0x08002c6d
 8002c20:	08002e7f 	.word	0x08002e7f
 8002c24:	08002e7f 	.word	0x08002e7f
 8002c28:	08002e7f 	.word	0x08002e7f
 8002c2c:	08002e7f 	.word	0x08002e7f
 8002c30:	08002e7f 	.word	0x08002e7f
 8002c34:	08002e7f 	.word	0x08002e7f
 8002c38:	08002e7f 	.word	0x08002e7f
 8002c3c:	08002c73 	.word	0x08002c73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c40:	4b94      	ldr	r3, [pc, #592]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d009      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c4c:	4b91      	ldr	r3, [pc, #580]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	08db      	lsrs	r3, r3, #3
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	4a90      	ldr	r2, [pc, #576]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002c5e:	e111      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c60:	4b8d      	ldr	r3, [pc, #564]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c62:	61bb      	str	r3, [r7, #24]
      break;
 8002c64:	e10e      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002c66:	4b8d      	ldr	r3, [pc, #564]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c68:	61bb      	str	r3, [r7, #24]
      break;
 8002c6a:	e10b      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c6e:	61bb      	str	r3, [r7, #24]
      break;
 8002c70:	e108      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c72:	4b88      	ldr	r3, [pc, #544]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002c7c:	4b85      	ldr	r3, [pc, #532]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c88:	4b82      	ldr	r3, [pc, #520]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002c92:	4b80      	ldr	r3, [pc, #512]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c96:	08db      	lsrs	r3, r3, #3
 8002c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	ee07 3a90 	vmov	s15, r3
 8002ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002caa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80e1 	beq.w	8002e78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	f000 8083 	beq.w	8002dc4 <HAL_RCC_GetSysClockFreq+0x204>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	f200 80a1 	bhi.w	8002e08 <HAL_RCC_GetSysClockFreq+0x248>
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x114>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d056      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002cd2:	e099      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cd4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d02d      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	08db      	lsrs	r3, r3, #3
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	4a6b      	ldr	r2, [pc, #428]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d0a:	4b62      	ldr	r3, [pc, #392]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d12:	ee07 3a90 	vmov	s15, r3
 8002d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002d3a:	e087      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ea8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d4e:	4b51      	ldr	r3, [pc, #324]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d7e:	e065      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002eac <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d92:	4b40      	ldr	r3, [pc, #256]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002da6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dc2:	e043      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002eb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e06:	e021      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002eac <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002ea4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e50:	0a5b      	lsrs	r3, r3, #9
 8002e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e56:	3301      	adds	r3, #1
 8002e58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	ee07 3a90 	vmov	s15, r3
 8002e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e64:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e70:	ee17 3a90 	vmov	r3, s15
 8002e74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002e76:	e005      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
      break;
 8002e7c:	e002      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002e7e:	4b07      	ldr	r3, [pc, #28]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e80:	61bb      	str	r3, [r7, #24]
      break;
 8002e82:	bf00      	nop
  }

  return sysclockfreq;
 8002e84:	69bb      	ldr	r3, [r7, #24]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3724      	adds	r7, #36	@ 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	58024400 	.word	0x58024400
 8002e98:	03d09000 	.word	0x03d09000
 8002e9c:	003d0900 	.word	0x003d0900
 8002ea0:	017d7840 	.word	0x017d7840
 8002ea4:	46000000 	.word	0x46000000
 8002ea8:	4c742400 	.word	0x4c742400
 8002eac:	4a742400 	.word	0x4a742400
 8002eb0:	4bbebc20 	.word	0x4bbebc20

08002eb4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b0ca      	sub	sp, #296	@ 0x128
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002ed8:	2500      	movs	r5, #0
 8002eda:	ea54 0305 	orrs.w	r3, r4, r5
 8002ede:	d049      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ee6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002eea:	d02f      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002eec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ef0:	d828      	bhi.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ef2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ef6:	d01a      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ef8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002efc:	d822      	bhi.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f06:	d007      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f08:	e01c      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f0a:	4bb8      	ldr	r3, [pc, #736]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	4ab7      	ldr	r2, [pc, #732]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f16:	e01a      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 f9d1 	bl	80042c8 <RCCEx_PLL2_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f2c:	e00f      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f32:	3328      	adds	r3, #40	@ 0x28
 8002f34:	2102      	movs	r1, #2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f001 fa78 	bl	800442c <RCCEx_PLL3_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f42:	e004      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f4a:	e000      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f56:	4ba5      	ldr	r3, [pc, #660]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f64:	4aa1      	ldr	r2, [pc, #644]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f66:	430b      	orrs	r3, r1
 8002f68:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f6a:	e003      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002f80:	f04f 0900 	mov.w	r9, #0
 8002f84:	ea58 0309 	orrs.w	r3, r8, r9
 8002f88:	d047      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d82a      	bhi.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002f94:	a201      	add	r2, pc, #4	@ (adr r2, 8002f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9a:	bf00      	nop
 8002f9c:	08002fb1 	.word	0x08002fb1
 8002fa0:	08002fbf 	.word	0x08002fbf
 8002fa4:	08002fd5 	.word	0x08002fd5
 8002fa8:	08002ff3 	.word	0x08002ff3
 8002fac:	08002ff3 	.word	0x08002ff3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb0:	4b8e      	ldr	r3, [pc, #568]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	4a8d      	ldr	r2, [pc, #564]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fbc:	e01a      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f001 f97e 	bl	80042c8 <RCCEx_PLL2_Config>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fd2:	e00f      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd8:	3328      	adds	r3, #40	@ 0x28
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fa25 	bl	800442c <RCCEx_PLL3_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fe8:	e004      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ff0:	e000      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ffc:	4b7b      	ldr	r3, [pc, #492]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003000:	f023 0107 	bic.w	r1, r3, #7
 8003004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300a:	4a78      	ldr	r2, [pc, #480]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800300c:	430b      	orrs	r3, r1
 800300e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003010:	e003      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800301a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003026:	f04f 0b00 	mov.w	fp, #0
 800302a:	ea5a 030b 	orrs.w	r3, sl, fp
 800302e:	d04c      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800303a:	d030      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800303c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003040:	d829      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003042:	2bc0      	cmp	r3, #192	@ 0xc0
 8003044:	d02d      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003046:	2bc0      	cmp	r3, #192	@ 0xc0
 8003048:	d825      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800304a:	2b80      	cmp	r3, #128	@ 0x80
 800304c:	d018      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800304e:	2b80      	cmp	r3, #128	@ 0x80
 8003050:	d821      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003056:	2b40      	cmp	r3, #64	@ 0x40
 8003058:	d007      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800305a:	e01c      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800305c:	4b63      	ldr	r3, [pc, #396]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	4a62      	ldr	r2, [pc, #392]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003068:	e01c      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800306a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306e:	3308      	adds	r3, #8
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f001 f928 	bl	80042c8 <RCCEx_PLL2_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800307e:	e011      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003084:	3328      	adds	r3, #40	@ 0x28
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f001 f9cf 	bl	800442c <RCCEx_PLL3_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003094:	e006      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800309c:	e002      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800309e:	bf00      	nop
 80030a0:	e000      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80030a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80030ac:	4b4f      	ldr	r3, [pc, #316]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ba:	4a4c      	ldr	r2, [pc, #304]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030bc:	430b      	orrs	r3, r1
 80030be:	6513      	str	r3, [r2, #80]	@ 0x50
 80030c0:	e003      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80030d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80030da:	2300      	movs	r3, #0
 80030dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80030e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80030e4:	460b      	mov	r3, r1
 80030e6:	4313      	orrs	r3, r2
 80030e8:	d053      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030f6:	d035      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80030f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030fc:	d82e      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80030fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003102:	d031      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003104:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003108:	d828      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800310a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800310e:	d01a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003110:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003114:	d822      	bhi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800311a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800311e:	d007      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003120:	e01c      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003122:	4b32      	ldr	r3, [pc, #200]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	4a31      	ldr	r2, [pc, #196]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800312c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800312e:	e01c      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003134:	3308      	adds	r3, #8
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f001 f8c5 	bl	80042c8 <RCCEx_PLL2_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003144:	e011      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800314a:	3328      	adds	r3, #40	@ 0x28
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f001 f96c 	bl	800442c <RCCEx_PLL3_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800315a:	e006      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003162:	e002      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003164:	bf00      	nop
 8003166:	e000      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800316a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003172:	4b1e      	ldr	r3, [pc, #120]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003176:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800317a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800317e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003182:	4a1a      	ldr	r2, [pc, #104]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003184:	430b      	orrs	r3, r1
 8003186:	6593      	str	r3, [r2, #88]	@ 0x58
 8003188:	e003      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800318a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800318e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800319e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80031a2:	2300      	movs	r3, #0
 80031a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80031a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80031ac:	460b      	mov	r3, r1
 80031ae:	4313      	orrs	r3, r2
 80031b0:	d056      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80031b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80031ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031be:	d038      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80031c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031c4:	d831      	bhi.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80031c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031ca:	d034      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80031cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031d0:	d82b      	bhi.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80031d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031d6:	d01d      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80031d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031dc:	d825      	bhi.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d006      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80031e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031e6:	d00a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80031e8:	e01f      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80031ea:	bf00      	nop
 80031ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f0:	4ba2      	ldr	r3, [pc, #648]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	4aa1      	ldr	r2, [pc, #644]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031fc:	e01c      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003202:	3308      	adds	r3, #8
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f85e 	bl	80042c8 <RCCEx_PLL2_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003212:	e011      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003218:	3328      	adds	r3, #40	@ 0x28
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f001 f905 	bl	800442c <RCCEx_PLL3_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003228:	e006      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003230:	e002      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003238:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003240:	4b8e      	ldr	r3, [pc, #568]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003244:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003250:	4a8a      	ldr	r2, [pc, #552]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003252:	430b      	orrs	r3, r1
 8003254:	6593      	str	r3, [r2, #88]	@ 0x58
 8003256:	e003      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800325c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800326c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003270:	2300      	movs	r3, #0
 8003272:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003276:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800327a:	460b      	mov	r3, r1
 800327c:	4313      	orrs	r3, r2
 800327e:	d03a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003286:	2b30      	cmp	r3, #48	@ 0x30
 8003288:	d01f      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800328a:	2b30      	cmp	r3, #48	@ 0x30
 800328c:	d819      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800328e:	2b20      	cmp	r3, #32
 8003290:	d00c      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003292:	2b20      	cmp	r3, #32
 8003294:	d815      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d019      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800329a:	2b10      	cmp	r3, #16
 800329c:	d111      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800329e:	4b77      	ldr	r3, [pc, #476]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a2:	4a76      	ldr	r2, [pc, #472]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80032aa:	e011      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b0:	3308      	adds	r3, #8
 80032b2:	2102      	movs	r1, #2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 f807 	bl	80042c8 <RCCEx_PLL2_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80032c0:	e006      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032c8:	e002      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80032ca:	bf00      	nop
 80032cc:	e000      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80032ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80032d8:	4b68      	ldr	r3, [pc, #416]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80032e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	4a65      	ldr	r2, [pc, #404]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032e8:	430b      	orrs	r3, r1
 80032ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ec:	e003      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80032f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003302:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003306:	2300      	movs	r3, #0
 8003308:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800330c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003310:	460b      	mov	r3, r1
 8003312:	4313      	orrs	r3, r2
 8003314:	d051      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003320:	d035      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003322:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003326:	d82e      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003328:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800332c:	d031      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800332e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003332:	d828      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003338:	d01a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800333a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800333e:	d822      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003348:	d007      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800334a:	e01c      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800334c:	4b4b      	ldr	r3, [pc, #300]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800334e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003350:	4a4a      	ldr	r2, [pc, #296]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003358:	e01c      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335e:	3308      	adds	r3, #8
 8003360:	2100      	movs	r1, #0
 8003362:	4618      	mov	r0, r3
 8003364:	f000 ffb0 	bl	80042c8 <RCCEx_PLL2_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800336e:	e011      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003374:	3328      	adds	r3, #40	@ 0x28
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f001 f857 	bl	800442c <RCCEx_PLL3_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003384:	e006      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800338c:	e002      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10a      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800339c:	4b37      	ldr	r3, [pc, #220]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800339e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80033a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033aa:	4a34      	ldr	r2, [pc, #208]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80033b0:	e003      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80033c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80033d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80033d4:	460b      	mov	r3, r1
 80033d6:	4313      	orrs	r3, r2
 80033d8:	d056      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80033da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033e4:	d033      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80033e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033ea:	d82c      	bhi.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80033ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033f0:	d02f      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80033f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033f6:	d826      	bhi.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80033f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033fc:	d02b      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80033fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003402:	d820      	bhi.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003408:	d012      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800340a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800340e:	d81a      	bhi.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d022      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003418:	d115      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800341a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341e:	3308      	adds	r3, #8
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f000 ff50 	bl	80042c8 <RCCEx_PLL2_Config>
 8003428:	4603      	mov	r3, r0
 800342a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800342e:	e015      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003434:	3328      	adds	r3, #40	@ 0x28
 8003436:	2101      	movs	r1, #1
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fff7 	bl	800442c <RCCEx_PLL3_Config>
 800343e:	4603      	mov	r3, r0
 8003440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003444:	e00a      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800344c:	e006      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800344e:	bf00      	nop
 8003450:	e004      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003452:	bf00      	nop
 8003454:	e002      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003456:	bf00      	nop
 8003458:	e000      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800345a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800345c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10d      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003468:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800346c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003472:	4a02      	ldr	r2, [pc, #8]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003474:	430b      	orrs	r3, r1
 8003476:	6513      	str	r3, [r2, #80]	@ 0x50
 8003478:	e006      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800347a:	bf00      	nop
 800347c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003498:	2300      	movs	r3, #0
 800349a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800349e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4313      	orrs	r3, r2
 80034a6:	d055      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80034b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b4:	d033      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80034b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ba:	d82c      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c0:	d02f      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80034c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c6:	d826      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80034c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034cc:	d02b      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80034ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034d2:	d820      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80034d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034d8:	d012      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80034da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034de:	d81a      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d022      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80034e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034e8:	d115      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	3308      	adds	r3, #8
 80034f0:	2101      	movs	r1, #1
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fee8 	bl	80042c8 <RCCEx_PLL2_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80034fe:	e015      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003504:	3328      	adds	r3, #40	@ 0x28
 8003506:	2101      	movs	r1, #1
 8003508:	4618      	mov	r0, r3
 800350a:	f000 ff8f 	bl	800442c <RCCEx_PLL3_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003514:	e00a      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800351c:	e006      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800351e:	bf00      	nop
 8003520:	e004      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003522:	bf00      	nop
 8003524:	e002      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003526:	bf00      	nop
 8003528:	e000      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800352a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003534:	4ba3      	ldr	r3, [pc, #652]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003538:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800353c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003540:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003544:	4a9f      	ldr	r2, [pc, #636]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003546:	430b      	orrs	r3, r1
 8003548:	6593      	str	r3, [r2, #88]	@ 0x58
 800354a:	e003      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800356a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800356e:	460b      	mov	r3, r1
 8003570:	4313      	orrs	r3, r2
 8003572:	d037      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800357e:	d00e      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003584:	d816      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d018      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800358a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800358e:	d111      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003590:	4b8c      	ldr	r3, [pc, #560]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	4a8b      	ldr	r2, [pc, #556]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800359a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800359c:	e00f      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a2:	3308      	adds	r3, #8
 80035a4:	2101      	movs	r1, #1
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fe8e 	bl	80042c8 <RCCEx_PLL2_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035b2:	e004      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80035bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035c6:	4b7f      	ldr	r3, [pc, #508]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d4:	4a7b      	ldr	r2, [pc, #492]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035d6:	430b      	orrs	r3, r1
 80035d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80035da:	e003      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80035f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80035fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80035fe:	460b      	mov	r3, r1
 8003600:	4313      	orrs	r3, r2
 8003602:	d039      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800360a:	2b03      	cmp	r3, #3
 800360c:	d81c      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800360e:	a201      	add	r2, pc, #4	@ (adr r2, 8003614 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	08003651 	.word	0x08003651
 8003618:	08003625 	.word	0x08003625
 800361c:	08003633 	.word	0x08003633
 8003620:	08003651 	.word	0x08003651
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003624:	4b67      	ldr	r3, [pc, #412]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003628:	4a66      	ldr	r2, [pc, #408]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800362a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800362e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003630:	e00f      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	3308      	adds	r3, #8
 8003638:	2102      	movs	r1, #2
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fe44 	bl	80042c8 <RCCEx_PLL2_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003646:	e004      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800365a:	4b5a      	ldr	r3, [pc, #360]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	f023 0103 	bic.w	r1, r3, #3
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003668:	4a56      	ldr	r2, [pc, #344]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800366a:	430b      	orrs	r3, r1
 800366c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800366e:	e003      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003684:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003688:	2300      	movs	r3, #0
 800368a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800368e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003692:	460b      	mov	r3, r1
 8003694:	4313      	orrs	r3, r2
 8003696:	f000 809f 	beq.w	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800369a:	4b4b      	ldr	r3, [pc, #300]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a4a      	ldr	r2, [pc, #296]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036a6:	f7fe f8df 	bl	8001868 <HAL_GetTick>
 80036aa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036ae:	e00b      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b0:	f7fe f8da 	bl	8001868 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	@ 0x64
 80036be:	d903      	bls.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036c6:	e005      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036c8:	4b3f      	ldr	r3, [pc, #252]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ed      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80036d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d179      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80036dc:	4b39      	ldr	r3, [pc, #228]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036e8:	4053      	eors	r3, r2
 80036ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d015      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036f2:	4b34      	ldr	r3, [pc, #208]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036fe:	4b31      	ldr	r3, [pc, #196]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003702:	4a30      	ldr	r2, [pc, #192]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003708:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800370a:	4b2e      	ldr	r3, [pc, #184]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370e:	4a2d      	ldr	r2, [pc, #180]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003714:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003716:	4a2b      	ldr	r2, [pc, #172]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003718:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800371c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800372a:	d118      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fe f89c 	bl	8001868 <HAL_GetTick>
 8003730:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003734:	e00d      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fe f897 	bl	8001868 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003740:	1ad2      	subs	r2, r2, r3
 8003742:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003746:	429a      	cmp	r2, r3
 8003748:	d903      	bls.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003750:	e005      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003752:	4b1c      	ldr	r3, [pc, #112]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0eb      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800375e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003762:	2b00      	cmp	r3, #0
 8003764:	d129      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800376e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003772:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003776:	d10e      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003778:	4b12      	ldr	r3, [pc, #72]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003784:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003788:	091a      	lsrs	r2, r3, #4
 800378a:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800378c:	4013      	ands	r3, r2
 800378e:	4a0d      	ldr	r2, [pc, #52]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003790:	430b      	orrs	r3, r1
 8003792:	6113      	str	r3, [r2, #16]
 8003794:	e005      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003796:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	4a0a      	ldr	r2, [pc, #40]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800379c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80037a0:	6113      	str	r3, [r2, #16]
 80037a2:	4b08      	ldr	r3, [pc, #32]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037a4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80037ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b2:	4a04      	ldr	r2, [pc, #16]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037b4:	430b      	orrs	r3, r1
 80037b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b8:	e00e      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80037c2:	e009      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80037c4:	58024400 	.word	0x58024400
 80037c8:	58024800 	.word	0x58024800
 80037cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f002 0301 	and.w	r3, r2, #1
 80037e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f000 8089 	beq.w	800390c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003800:	2b28      	cmp	r3, #40	@ 0x28
 8003802:	d86b      	bhi.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003804:	a201      	add	r2, pc, #4	@ (adr r2, 800380c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	080038e5 	.word	0x080038e5
 8003810:	080038dd 	.word	0x080038dd
 8003814:	080038dd 	.word	0x080038dd
 8003818:	080038dd 	.word	0x080038dd
 800381c:	080038dd 	.word	0x080038dd
 8003820:	080038dd 	.word	0x080038dd
 8003824:	080038dd 	.word	0x080038dd
 8003828:	080038dd 	.word	0x080038dd
 800382c:	080038b1 	.word	0x080038b1
 8003830:	080038dd 	.word	0x080038dd
 8003834:	080038dd 	.word	0x080038dd
 8003838:	080038dd 	.word	0x080038dd
 800383c:	080038dd 	.word	0x080038dd
 8003840:	080038dd 	.word	0x080038dd
 8003844:	080038dd 	.word	0x080038dd
 8003848:	080038dd 	.word	0x080038dd
 800384c:	080038c7 	.word	0x080038c7
 8003850:	080038dd 	.word	0x080038dd
 8003854:	080038dd 	.word	0x080038dd
 8003858:	080038dd 	.word	0x080038dd
 800385c:	080038dd 	.word	0x080038dd
 8003860:	080038dd 	.word	0x080038dd
 8003864:	080038dd 	.word	0x080038dd
 8003868:	080038dd 	.word	0x080038dd
 800386c:	080038e5 	.word	0x080038e5
 8003870:	080038dd 	.word	0x080038dd
 8003874:	080038dd 	.word	0x080038dd
 8003878:	080038dd 	.word	0x080038dd
 800387c:	080038dd 	.word	0x080038dd
 8003880:	080038dd 	.word	0x080038dd
 8003884:	080038dd 	.word	0x080038dd
 8003888:	080038dd 	.word	0x080038dd
 800388c:	080038e5 	.word	0x080038e5
 8003890:	080038dd 	.word	0x080038dd
 8003894:	080038dd 	.word	0x080038dd
 8003898:	080038dd 	.word	0x080038dd
 800389c:	080038dd 	.word	0x080038dd
 80038a0:	080038dd 	.word	0x080038dd
 80038a4:	080038dd 	.word	0x080038dd
 80038a8:	080038dd 	.word	0x080038dd
 80038ac:	080038e5 	.word	0x080038e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b4:	3308      	adds	r3, #8
 80038b6:	2101      	movs	r1, #1
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fd05 	bl	80042c8 <RCCEx_PLL2_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80038c4:	e00f      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ca:	3328      	adds	r3, #40	@ 0x28
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fdac 	bl	800442c <RCCEx_PLL3_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80038da:	e004      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038e2:	e000      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80038e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80038ee:	4bbf      	ldr	r3, [pc, #764]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038fc:	4abb      	ldr	r2, [pc, #748]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038fe:	430b      	orrs	r3, r1
 8003900:	6553      	str	r3, [r2, #84]	@ 0x54
 8003902:	e003      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003908:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800390c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003914:	f002 0302 	and.w	r3, r2, #2
 8003918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800391c:	2300      	movs	r3, #0
 800391e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003922:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003926:	460b      	mov	r3, r1
 8003928:	4313      	orrs	r3, r2
 800392a:	d041      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800392c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003932:	2b05      	cmp	r3, #5
 8003934:	d824      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003936:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	08003989 	.word	0x08003989
 8003940:	08003955 	.word	0x08003955
 8003944:	0800396b 	.word	0x0800396b
 8003948:	08003989 	.word	0x08003989
 800394c:	08003989 	.word	0x08003989
 8003950:	08003989 	.word	0x08003989
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003958:	3308      	adds	r3, #8
 800395a:	2101      	movs	r1, #1
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fcb3 	bl	80042c8 <RCCEx_PLL2_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003968:	e00f      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	3328      	adds	r3, #40	@ 0x28
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fd5a 	bl	800442c <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800397e:	e004      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003986:	e000      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003992:	4b96      	ldr	r3, [pc, #600]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003996:	f023 0107 	bic.w	r1, r3, #7
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039a0:	4a92      	ldr	r2, [pc, #584]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039a2:	430b      	orrs	r3, r1
 80039a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80039a6:	e003      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	f002 0304 	and.w	r3, r2, #4
 80039bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4313      	orrs	r3, r2
 80039ce:	d044      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80039d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d825      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80039dc:	a201      	add	r2, pc, #4	@ (adr r2, 80039e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	08003a31 	.word	0x08003a31
 80039e8:	080039fd 	.word	0x080039fd
 80039ec:	08003a13 	.word	0x08003a13
 80039f0:	08003a31 	.word	0x08003a31
 80039f4:	08003a31 	.word	0x08003a31
 80039f8:	08003a31 	.word	0x08003a31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a00:	3308      	adds	r3, #8
 8003a02:	2101      	movs	r1, #1
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fc5f 	bl	80042c8 <RCCEx_PLL2_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a10:	e00f      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	3328      	adds	r3, #40	@ 0x28
 8003a18:	2101      	movs	r1, #1
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fd06 	bl	800442c <RCCEx_PLL3_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a26:	e004      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a2e:	e000      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a3a:	4b6c      	ldr	r3, [pc, #432]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	f023 0107 	bic.w	r1, r3, #7
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a4a:	4a68      	ldr	r2, [pc, #416]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a50:	e003      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f002 0320 	and.w	r3, r2, #32
 8003a66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a74:	460b      	mov	r3, r1
 8003a76:	4313      	orrs	r3, r2
 8003a78:	d055      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a86:	d033      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a8c:	d82c      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a92:	d02f      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a98:	d826      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a9e:	d02b      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003aa0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003aa4:	d820      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aaa:	d012      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ab0:	d81a      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d022      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003ab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aba:	d115      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fbff 	bl	80042c8 <RCCEx_PLL2_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ad0:	e015      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad6:	3328      	adds	r3, #40	@ 0x28
 8003ad8:	2102      	movs	r1, #2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fca6 	bl	800442c <RCCEx_PLL3_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ae6:	e00a      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aee:	e006      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003af0:	bf00      	nop
 8003af2:	e004      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003af4:	bf00      	nop
 8003af6:	e002      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10b      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b06:	4b39      	ldr	r3, [pc, #228]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b16:	4a35      	ldr	r2, [pc, #212]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b1c:	e003      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003b3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4313      	orrs	r3, r2
 8003b44:	d058      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b52:	d033      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003b54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b58:	d82c      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5e:	d02f      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b64:	d826      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003b66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b6a:	d02b      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003b6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b70:	d820      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003b72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b76:	d012      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b7c:	d81a      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d022      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b86:	d115      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fb99 	bl	80042c8 <RCCEx_PLL2_Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b9c:	e015      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	3328      	adds	r3, #40	@ 0x28
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fc40 	bl	800442c <RCCEx_PLL3_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003bb2:	e00a      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bba:	e006      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003bbc:	bf00      	nop
 8003bbe:	e004      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003bc0:	bf00      	nop
 8003bc2:	e002      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bd2:	4b06      	ldr	r3, [pc, #24]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003be2:	4a02      	ldr	r2, [pc, #8]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be8:	e006      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003bea:	bf00      	nop
 8003bec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003c12:	460b      	mov	r3, r1
 8003c14:	4313      	orrs	r3, r2
 8003c16:	d055      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c24:	d033      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003c26:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c2a:	d82c      	bhi.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c30:	d02f      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003c32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c36:	d826      	bhi.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003c38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003c3c:	d02b      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003c3e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003c42:	d820      	bhi.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003c44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c48:	d012      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003c4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c4e:	d81a      	bhi.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d022      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c58:	d115      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	3308      	adds	r3, #8
 8003c60:	2100      	movs	r1, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fb30 	bl	80042c8 <RCCEx_PLL2_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c6e:	e015      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	3328      	adds	r3, #40	@ 0x28
 8003c76:	2102      	movs	r1, #2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fbd7 	bl	800442c <RCCEx_PLL3_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c84:	e00a      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c8c:	e006      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c8e:	bf00      	nop
 8003c90:	e004      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ca4:	4ba1      	ldr	r3, [pc, #644]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003cb4:	4a9d      	ldr	r2, [pc, #628]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cba:	e003      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f002 0308 	and.w	r3, r2, #8
 8003cd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	d01e      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf6:	3328      	adds	r3, #40	@ 0x28
 8003cf8:	2102      	movs	r1, #2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fb96 	bl	800442c <RCCEx_PLL3_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d0c:	4b87      	ldr	r3, [pc, #540]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d1c:	4a83      	ldr	r2, [pc, #524]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f002 0310 	and.w	r3, r2, #16
 8003d2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d32:	2300      	movs	r3, #0
 8003d34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003d38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	d01e      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d4e:	d10c      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d54:	3328      	adds	r3, #40	@ 0x28
 8003d56:	2102      	movs	r1, #2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fb67 	bl	800442c <RCCEx_PLL3_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d6a:	4b70      	ldr	r3, [pc, #448]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d7a:	4a6c      	ldr	r2, [pc, #432]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003d8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	d03e      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dac:	d022      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003db2:	d81b      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dbc:	d00b      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003dbe:	e015      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa7d 	bl	80042c8 <RCCEx_PLL2_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003dd4:	e00f      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	3328      	adds	r3, #40	@ 0x28
 8003ddc:	2102      	movs	r1, #2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fb24 	bl	800442c <RCCEx_PLL3_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003dea:	e004      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003df2:	e000      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dfe:	4b4b      	ldr	r3, [pc, #300]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e0e:	4a47      	ldr	r2, [pc, #284]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e14:	e003      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003e34:	460b      	mov	r3, r1
 8003e36:	4313      	orrs	r3, r2
 8003e38:	d03b      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e46:	d01f      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003e48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e4c:	d818      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e52:	d003      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003e54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e58:	d007      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003e5a:	e011      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e5c:	4b33      	ldr	r3, [pc, #204]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	4a32      	ldr	r2, [pc, #200]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e68:	e00f      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	3328      	adds	r3, #40	@ 0x28
 8003e70:	2101      	movs	r1, #1
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fada 	bl	800442c <RCCEx_PLL3_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e7e:	e004      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e86:	e000      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e92:	4b26      	ldr	r3, [pc, #152]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea2:	4a22      	ldr	r2, [pc, #136]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ea8:	e003      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ebe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ec4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	d034      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003edc:	d007      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003ede:	e011      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee0:	4b12      	ldr	r3, [pc, #72]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	4a11      	ldr	r2, [pc, #68]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003eec:	e00e      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f9e6 	bl	80042c8 <RCCEx_PLL2_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f02:	e003      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10d      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f22:	4a02      	ldr	r2, [pc, #8]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f24:	430b      	orrs	r3, r1
 8003f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f28:	e006      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003f2a:	bf00      	nop
 8003f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003f44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f46:	2300      	movs	r3, #0
 8003f48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4313      	orrs	r3, r2
 8003f52:	d00c      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f58:	3328      	adds	r3, #40	@ 0x28
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fa65 	bl	800442c <RCCEx_PLL3_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003f7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003f84:	460b      	mov	r3, r1
 8003f86:	4313      	orrs	r3, r2
 8003f88:	d038      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f96:	d018      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003f98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f9c:	d811      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa2:	d014      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa8:	d80b      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d011      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb2:	d106      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4bc3      	ldr	r3, [pc, #780]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	4ac2      	ldr	r2, [pc, #776]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fc8:	e004      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003fca:	bf00      	nop
 8003fcc:	e002      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003fce:	bf00      	nop
 8003fd0:	e000      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10b      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fdc:	4bb9      	ldr	r3, [pc, #740]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fec:	4ab5      	ldr	r2, [pc, #724]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ff2:	e003      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004008:	65bb      	str	r3, [r7, #88]	@ 0x58
 800400a:	2300      	movs	r3, #0
 800400c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800400e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004012:	460b      	mov	r3, r1
 8004014:	4313      	orrs	r3, r2
 8004016:	d009      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004018:	4baa      	ldr	r3, [pc, #680]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800401a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004026:	4aa7      	ldr	r2, [pc, #668]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004028:	430b      	orrs	r3, r1
 800402a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800402c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004038:	653b      	str	r3, [r7, #80]	@ 0x50
 800403a:	2300      	movs	r3, #0
 800403c:	657b      	str	r3, [r7, #84]	@ 0x54
 800403e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004042:	460b      	mov	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004048:	4b9e      	ldr	r3, [pc, #632]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004058:	4a9a      	ldr	r2, [pc, #616]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800405a:	430b      	orrs	r3, r1
 800405c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800406a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800406c:	2300      	movs	r3, #0
 800406e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004070:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004074:	460b      	mov	r3, r1
 8004076:	4313      	orrs	r3, r2
 8004078:	d009      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800407a:	4b92      	ldr	r3, [pc, #584]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800407c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004088:	4a8e      	ldr	r2, [pc, #568]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800408a:	430b      	orrs	r3, r1
 800408c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800409a:	643b      	str	r3, [r7, #64]	@ 0x40
 800409c:	2300      	movs	r3, #0
 800409e:	647b      	str	r3, [r7, #68]	@ 0x44
 80040a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80040a4:	460b      	mov	r3, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d00e      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040aa:	4b86      	ldr	r3, [pc, #536]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	4a85      	ldr	r2, [pc, #532]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80040b4:	6113      	str	r3, [r2, #16]
 80040b6:	4b83      	ldr	r3, [pc, #524]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040b8:	6919      	ldr	r1, [r3, #16]
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80040c2:	4a80      	ldr	r2, [pc, #512]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80040d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040d6:	2300      	movs	r3, #0
 80040d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80040de:	460b      	mov	r3, r1
 80040e0:	4313      	orrs	r3, r2
 80040e2:	d009      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80040e4:	4b77      	ldr	r3, [pc, #476]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f2:	4a74      	ldr	r2, [pc, #464]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040f4:	430b      	orrs	r3, r1
 80040f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004104:	633b      	str	r3, [r7, #48]	@ 0x30
 8004106:	2300      	movs	r3, #0
 8004108:	637b      	str	r3, [r7, #52]	@ 0x34
 800410a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800410e:	460b      	mov	r3, r1
 8004110:	4313      	orrs	r3, r2
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004114:	4b6b      	ldr	r3, [pc, #428]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004118:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004124:	4a67      	ldr	r2, [pc, #412]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004126:	430b      	orrs	r3, r1
 8004128:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	2100      	movs	r1, #0
 8004134:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800413c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d011      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	3308      	adds	r3, #8
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f8ba 	bl	80042c8 <RCCEx_PLL2_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800415a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	2100      	movs	r1, #0
 8004174:	6239      	str	r1, [r7, #32]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
 800417c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d011      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	3308      	adds	r3, #8
 800418c:	2101      	movs	r1, #1
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f89a 	bl	80042c8 <RCCEx_PLL2_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800419a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	2100      	movs	r1, #0
 80041b4:	61b9      	str	r1, [r7, #24]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80041c0:	460b      	mov	r3, r1
 80041c2:	4313      	orrs	r3, r2
 80041c4:	d011      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ca:	3308      	adds	r3, #8
 80041cc:	2102      	movs	r1, #2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f87a 	bl	80042c8 <RCCEx_PLL2_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80041da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	2100      	movs	r1, #0
 80041f4:	6139      	str	r1, [r7, #16]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004200:	460b      	mov	r3, r1
 8004202:	4313      	orrs	r3, r2
 8004204:	d011      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	3328      	adds	r3, #40	@ 0x28
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f90c 	bl	800442c <RCCEx_PLL3_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800421a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	2100      	movs	r1, #0
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004240:	460b      	mov	r3, r1
 8004242:	4313      	orrs	r3, r2
 8004244:	d011      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	3328      	adds	r3, #40	@ 0x28
 800424c:	2101      	movs	r1, #1
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f8ec 	bl	800442c <RCCEx_PLL3_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800425a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	2100      	movs	r1, #0
 8004274:	6039      	str	r1, [r7, #0]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004280:	460b      	mov	r3, r1
 8004282:	4313      	orrs	r3, r2
 8004284:	d011      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428a:	3328      	adds	r3, #40	@ 0x28
 800428c:	2102      	movs	r1, #2
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f8cc 	bl	800442c <RCCEx_PLL3_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800429a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80042aa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e000      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80042be:	46bd      	mov	sp, r7
 80042c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c4:	58024400 	.word	0x58024400

080042c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042d6:	4b53      	ldr	r3, [pc, #332]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d101      	bne.n	80042e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e099      	b.n	800441a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a4e      	ldr	r2, [pc, #312]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80042ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f2:	f7fd fab9 	bl	8001868 <HAL_GetTick>
 80042f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042f8:	e008      	b.n	800430c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042fa:	f7fd fab5 	bl	8001868 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e086      	b.n	800441a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800430c:	4b45      	ldr	r3, [pc, #276]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004318:	4b42      	ldr	r3, [pc, #264]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	031b      	lsls	r3, r3, #12
 8004326:	493f      	ldr	r1, [pc, #252]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 8004328:	4313      	orrs	r3, r2
 800432a:	628b      	str	r3, [r1, #40]	@ 0x28
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	3b01      	subs	r3, #1
 8004332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	3b01      	subs	r3, #1
 800433c:	025b      	lsls	r3, r3, #9
 800433e:	b29b      	uxth	r3, r3
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	3b01      	subs	r3, #1
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	3b01      	subs	r3, #1
 8004356:	061b      	lsls	r3, r3, #24
 8004358:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800435c:	4931      	ldr	r1, [pc, #196]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004362:	4b30      	ldr	r3, [pc, #192]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 8004364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004366:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	492d      	ldr	r1, [pc, #180]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 8004370:	4313      	orrs	r3, r2
 8004372:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004374:	4b2b      	ldr	r3, [pc, #172]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 8004376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004378:	f023 0220 	bic.w	r2, r3, #32
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	4928      	ldr	r1, [pc, #160]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004386:	4b27      	ldr	r3, [pc, #156]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	4a26      	ldr	r2, [pc, #152]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 800438c:	f023 0310 	bic.w	r3, r3, #16
 8004390:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004392:	4b24      	ldr	r3, [pc, #144]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 8004394:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004396:	4b24      	ldr	r3, [pc, #144]	@ (8004428 <RCCEx_PLL2_Config+0x160>)
 8004398:	4013      	ands	r3, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	69d2      	ldr	r2, [r2, #28]
 800439e:	00d2      	lsls	r2, r2, #3
 80043a0:	4920      	ldr	r1, [pc, #128]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80043a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80043ac:	f043 0310 	orr.w	r3, r3, #16
 80043b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80043b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	4a19      	ldr	r2, [pc, #100]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80043be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043c4:	e00f      	b.n	80043e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d106      	bne.n	80043da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80043cc:	4b15      	ldr	r3, [pc, #84]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	4a14      	ldr	r2, [pc, #80]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80043d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043d8:	e005      	b.n	80043e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80043da:	4b12      	ldr	r3, [pc, #72]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	4a11      	ldr	r2, [pc, #68]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80043e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80043e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 80043ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f2:	f7fd fa39 	bl	8001868 <HAL_GetTick>
 80043f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043f8:	e008      	b.n	800440c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043fa:	f7fd fa35 	bl	8001868 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e006      	b.n	800441a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800440c:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <RCCEx_PLL2_Config+0x15c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	58024400 	.word	0x58024400
 8004428:	ffff0007 	.word	0xffff0007

0800442c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800443a:	4b53      	ldr	r3, [pc, #332]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 800443c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b03      	cmp	r3, #3
 8004444:	d101      	bne.n	800444a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e099      	b.n	800457e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800444a:	4b4f      	ldr	r3, [pc, #316]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a4e      	ldr	r2, [pc, #312]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 8004450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004456:	f7fd fa07 	bl	8001868 <HAL_GetTick>
 800445a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800445c:	e008      	b.n	8004470 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800445e:	f7fd fa03 	bl	8001868 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e086      	b.n	800457e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004470:	4b45      	ldr	r3, [pc, #276]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800447c:	4b42      	ldr	r3, [pc, #264]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	051b      	lsls	r3, r3, #20
 800448a:	493f      	ldr	r1, [pc, #252]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 800448c:	4313      	orrs	r3, r2
 800448e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	3b01      	subs	r3, #1
 8004496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	3b01      	subs	r3, #1
 80044a0:	025b      	lsls	r3, r3, #9
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	041b      	lsls	r3, r3, #16
 80044ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044c0:	4931      	ldr	r1, [pc, #196]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80044c6:	4b30      	ldr	r3, [pc, #192]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	492d      	ldr	r1, [pc, #180]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	4928      	ldr	r1, [pc, #160]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044ea:	4b27      	ldr	r3, [pc, #156]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	4a26      	ldr	r2, [pc, #152]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 80044f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044f6:	4b24      	ldr	r3, [pc, #144]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 80044f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044fa:	4b24      	ldr	r3, [pc, #144]	@ (800458c <RCCEx_PLL3_Config+0x160>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	69d2      	ldr	r2, [r2, #28]
 8004502:	00d2      	lsls	r2, r2, #3
 8004504:	4920      	ldr	r1, [pc, #128]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 8004506:	4313      	orrs	r3, r2
 8004508:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800450a:	4b1f      	ldr	r3, [pc, #124]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 800450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450e:	4a1e      	ldr	r2, [pc, #120]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 8004510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004514:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800451c:	4b1a      	ldr	r3, [pc, #104]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	4a19      	ldr	r2, [pc, #100]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 8004522:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004526:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004528:	e00f      	b.n	800454a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d106      	bne.n	800453e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004530:	4b15      	ldr	r3, [pc, #84]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 8004532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004534:	4a14      	ldr	r2, [pc, #80]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 8004536:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800453a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800453c:	e005      	b.n	800454a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800453e:	4b12      	ldr	r3, [pc, #72]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 8004540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004542:	4a11      	ldr	r2, [pc, #68]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 8004544:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004548:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800454a:	4b0f      	ldr	r3, [pc, #60]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a0e      	ldr	r2, [pc, #56]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 8004550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004556:	f7fd f987 	bl	8001868 <HAL_GetTick>
 800455a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800455c:	e008      	b.n	8004570 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800455e:	f7fd f983 	bl	8001868 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e006      	b.n	800457e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004570:	4b05      	ldr	r3, [pc, #20]	@ (8004588 <RCCEx_PLL3_Config+0x15c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800457c:	7bfb      	ldrb	r3, [r7, #15]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	58024400 	.word	0x58024400
 800458c:	ffff0007 	.word	0xffff0007

08004590 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e10f      	b.n	80047c2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a87      	ldr	r2, [pc, #540]	@ (80047cc <HAL_SPI_Init+0x23c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00f      	beq.n	80045d2 <HAL_SPI_Init+0x42>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a86      	ldr	r2, [pc, #536]	@ (80047d0 <HAL_SPI_Init+0x240>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00a      	beq.n	80045d2 <HAL_SPI_Init+0x42>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a84      	ldr	r2, [pc, #528]	@ (80047d4 <HAL_SPI_Init+0x244>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d005      	beq.n	80045d2 <HAL_SPI_Init+0x42>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b0f      	cmp	r3, #15
 80045cc:	d901      	bls.n	80045d2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e0f7      	b.n	80047c2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fe2e 	bl	8005234 <SPI_GetPacketSize>
 80045d8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a7b      	ldr	r2, [pc, #492]	@ (80047cc <HAL_SPI_Init+0x23c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00c      	beq.n	80045fe <HAL_SPI_Init+0x6e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a79      	ldr	r2, [pc, #484]	@ (80047d0 <HAL_SPI_Init+0x240>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d007      	beq.n	80045fe <HAL_SPI_Init+0x6e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a78      	ldr	r2, [pc, #480]	@ (80047d4 <HAL_SPI_Init+0x244>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d002      	beq.n	80045fe <HAL_SPI_Init+0x6e>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d811      	bhi.n	8004622 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004602:	4a72      	ldr	r2, [pc, #456]	@ (80047cc <HAL_SPI_Init+0x23c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d009      	beq.n	800461c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a70      	ldr	r2, [pc, #448]	@ (80047d0 <HAL_SPI_Init+0x240>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_SPI_Init+0x8c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a6f      	ldr	r2, [pc, #444]	@ (80047d4 <HAL_SPI_Init+0x244>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d104      	bne.n	8004626 <HAL_SPI_Init+0x96>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b10      	cmp	r3, #16
 8004620:	d901      	bls.n	8004626 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0cd      	b.n	80047c2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fc fe1a 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004662:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800466c:	d119      	bne.n	80046a2 <HAL_SPI_Init+0x112>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004676:	d103      	bne.n	8004680 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10c      	bne.n	80046a2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800468c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004690:	d107      	bne.n	80046a2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00f      	beq.n	80046ce <HAL_SPI_Init+0x13e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b06      	cmp	r3, #6
 80046b4:	d90b      	bls.n	80046ce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	e007      	b.n	80046de <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69da      	ldr	r2, [r3, #28]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e6:	431a      	orrs	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f0:	ea42 0103 	orr.w	r1, r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473e:	ea42 0103 	orr.w	r1, r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d113      	bne.n	800477e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004768:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800477c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40013000 	.word	0x40013000
 80047d0:	40003800 	.word	0x40003800
 80047d4:	40003c00 	.word	0x40003c00

080047d8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3320      	adds	r3, #32
 80047ee:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047f0:	f7fd f83a 	bl	8001868 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d001      	beq.n	8004806 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004802:	2302      	movs	r3, #2
 8004804:	e1d1      	b.n	8004baa <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_SPI_Transmit+0x3a>
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e1c9      	b.n	8004baa <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_SPI_Transmit+0x4c>
 8004820:	2302      	movs	r3, #2
 8004822:	e1c2      	b.n	8004baa <HAL_SPI_Transmit+0x3d2>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2203      	movs	r2, #3
 8004830:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	88fa      	ldrh	r2, [r7, #6]
 8004846:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800487c:	d108      	bne.n	8004890 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e009      	b.n	80048a4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80048a2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	4b96      	ldr	r3, [pc, #600]	@ (8004b04 <HAL_SPI_Transmit+0x32c>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	88f9      	ldrh	r1, [r7, #6]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	430b      	orrs	r3, r1
 80048b6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048d0:	d107      	bne.n	80048e2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b0f      	cmp	r3, #15
 80048e8:	d947      	bls.n	800497a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80048ea:	e03f      	b.n	800496c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d114      	bne.n	8004924 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490a:	1d1a      	adds	r2, r3, #4
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004922:	e023      	b.n	800496c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004924:	f7fc ffa0 	bl	8001868 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d803      	bhi.n	800493c <HAL_SPI_Transmit+0x164>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d102      	bne.n	8004942 <HAL_SPI_Transmit+0x16a>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d114      	bne.n	800496c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fba8 	bl	8005098 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800494e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e11e      	b.n	8004baa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1b9      	bne.n	80048ec <HAL_SPI_Transmit+0x114>
 8004978:	e0f1      	b.n	8004b5e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	2b07      	cmp	r3, #7
 8004980:	f240 80e6 	bls.w	8004b50 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004984:	e05d      	b.n	8004a42 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b02      	cmp	r3, #2
 8004992:	d132      	bne.n	80049fa <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d918      	bls.n	80049d2 <HAL_SPI_Transmit+0x1fa>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d014      	beq.n	80049d2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b8:	1d1a      	adds	r2, r3, #4
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b02      	subs	r3, #2
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80049d0:	e037      	b.n	8004a42 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d6:	881a      	ldrh	r2, [r3, #0]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e0:	1c9a      	adds	r2, r3, #2
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80049f8:	e023      	b.n	8004a42 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049fa:	f7fc ff35 	bl	8001868 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d803      	bhi.n	8004a12 <HAL_SPI_Transmit+0x23a>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d102      	bne.n	8004a18 <HAL_SPI_Transmit+0x240>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d114      	bne.n	8004a42 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fb3d 	bl	8005098 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e0b3      	b.n	8004baa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d19b      	bne.n	8004986 <HAL_SPI_Transmit+0x1ae>
 8004a4e:	e086      	b.n	8004b5e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d154      	bne.n	8004b08 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d918      	bls.n	8004a9c <HAL_SPI_Transmit+0x2c4>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6e:	2b40      	cmp	r3, #64	@ 0x40
 8004a70:	d914      	bls.n	8004a9c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a82:	1d1a      	adds	r2, r3, #4
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b04      	subs	r3, #4
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004a9a:	e059      	b.n	8004b50 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d917      	bls.n	8004ad8 <HAL_SPI_Transmit+0x300>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab4:	881a      	ldrh	r2, [r3, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004abe:	1c9a      	adds	r2, r3, #2
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b02      	subs	r3, #2
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004ad6:	e03b      	b.n	8004b50 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3320      	adds	r3, #32
 8004ae2:	7812      	ldrb	r2, [r2, #0]
 8004ae4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004b02:	e025      	b.n	8004b50 <HAL_SPI_Transmit+0x378>
 8004b04:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b08:	f7fc feae 	bl	8001868 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d803      	bhi.n	8004b20 <HAL_SPI_Transmit+0x348>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d102      	bne.n	8004b26 <HAL_SPI_Transmit+0x34e>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d114      	bne.n	8004b50 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fab6 	bl	8005098 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e02c      	b.n	8004baa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f47f af79 	bne.w	8004a50 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2108      	movs	r1, #8
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fb35 	bl	80051d8 <SPI_WaitOnFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b7a:	f043 0220 	orr.w	r2, r3, #32
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fa87 	bl	8005098 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
  }
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop

08004bb4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3301      	adds	r3, #1
 8004bce:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3330      	adds	r3, #48	@ 0x30
 8004bd6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bd8:	f7fc fe46 	bl	8001868 <HAL_GetTick>
 8004bdc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d001      	beq.n	8004bee <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
 8004bec:	e250      	b.n	8005090 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_SPI_Receive+0x46>
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e248      	b.n	8005090 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_SPI_Receive+0x58>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e241      	b.n	8005090 <HAL_SPI_Receive+0x4dc>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2204      	movs	r2, #4
 8004c18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	88fa      	ldrh	r2, [r7, #6]
 8004c36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004c64:	d108      	bne.n	8004c78 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	e009      	b.n	8004c8c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004c8a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	4b95      	ldr	r3, [pc, #596]	@ (8004ee8 <HAL_SPI_Receive+0x334>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	88f9      	ldrh	r1, [r7, #6]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cb8:	d107      	bne.n	8004cca <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b0f      	cmp	r3, #15
 8004cd0:	d96c      	bls.n	8004dac <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004cd2:	e064      	b.n	8004d9e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d114      	bne.n	8004d14 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cf2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004cf4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cfa:	1d1a      	adds	r2, r3, #4
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004d12:	e044      	b.n	8004d9e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	8bfa      	ldrh	r2, [r7, #30]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d919      	bls.n	8004d56 <HAL_SPI_Receive+0x1a2>
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d014      	beq.n	8004d56 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d36:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d3c:	1d1a      	adds	r2, r3, #4
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004d54:	e023      	b.n	8004d9e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d56:	f7fc fd87 	bl	8001868 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d803      	bhi.n	8004d6e <HAL_SPI_Receive+0x1ba>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d102      	bne.n	8004d74 <HAL_SPI_Receive+0x1c0>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d114      	bne.n	8004d9e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f98f 	bl	8005098 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e178      	b.n	8005090 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d194      	bne.n	8004cd4 <HAL_SPI_Receive+0x120>
 8004daa:	e15e      	b.n	800506a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	2b07      	cmp	r3, #7
 8004db2:	f240 8153 	bls.w	800505c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004db6:	e08f      	b.n	8004ed8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d114      	bne.n	8004df8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	8812      	ldrh	r2, [r2, #0]
 8004dd6:	b292      	uxth	r2, r2
 8004dd8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dde:	1c9a      	adds	r2, r3, #2
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004df6:	e06f      	b.n	8004ed8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	8bfa      	ldrh	r2, [r7, #30]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d924      	bls.n	8004e50 <HAL_SPI_Receive+0x29c>
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01f      	beq.n	8004e50 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	8812      	ldrh	r2, [r2, #0]
 8004e18:	b292      	uxth	r2, r2
 8004e1a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e20:	1c9a      	adds	r2, r3, #2
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	8812      	ldrh	r2, [r2, #0]
 8004e2e:	b292      	uxth	r2, r2
 8004e30:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e36:	1c9a      	adds	r2, r3, #2
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b02      	subs	r3, #2
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004e4e:	e043      	b.n	8004ed8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d119      	bne.n	8004e90 <HAL_SPI_Receive+0x2dc>
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d014      	beq.n	8004e90 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	8812      	ldrh	r2, [r2, #0]
 8004e6e:	b292      	uxth	r2, r2
 8004e70:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e76:	1c9a      	adds	r2, r3, #2
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004e8e:	e023      	b.n	8004ed8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e90:	f7fc fcea 	bl	8001868 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d803      	bhi.n	8004ea8 <HAL_SPI_Receive+0x2f4>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d102      	bne.n	8004eae <HAL_SPI_Receive+0x2fa>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d114      	bne.n	8004ed8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f8f2 	bl	8005098 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0db      	b.n	8005090 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f47f af69 	bne.w	8004db8 <HAL_SPI_Receive+0x204>
 8004ee6:	e0c0      	b.n	800506a <HAL_SPI_Receive+0x4b6>
 8004ee8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d117      	bne.n	8004f32 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f0e:	7812      	ldrb	r2, [r2, #0]
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004f30:	e094      	b.n	800505c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	8bfa      	ldrh	r2, [r7, #30]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d946      	bls.n	8004fce <HAL_SPI_Receive+0x41a>
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d041      	beq.n	8004fce <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f56:	7812      	ldrb	r2, [r2, #0]
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f72:	7812      	ldrb	r2, [r2, #0]
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f8e:	7812      	ldrb	r2, [r2, #0]
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004faa:	7812      	ldrb	r2, [r2, #0]
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b04      	subs	r3, #4
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004fcc:	e046      	b.n	800505c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d81c      	bhi.n	8005014 <HAL_SPI_Receive+0x460>
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d017      	beq.n	8005014 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ff0:	7812      	ldrb	r2, [r2, #0]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005012:	e023      	b.n	800505c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005014:	f7fc fc28 	bl	8001868 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d803      	bhi.n	800502c <HAL_SPI_Receive+0x478>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	d102      	bne.n	8005032 <HAL_SPI_Receive+0x47e>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d114      	bne.n	800505c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f830 	bl	8005098 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800503e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e019      	b.n	8005090 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	f47f af41 	bne.w	8004eec <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f814 	bl	8005098 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800508e:	2300      	movs	r3, #0
  }
}
 8005090:	4618      	mov	r0, r3
 8005092:	3720      	adds	r7, #32
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0208 	orr.w	r2, r2, #8
 80050b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0210 	orr.w	r2, r2, #16
 80050c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6919      	ldr	r1, [r3, #16]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b3c      	ldr	r3, [pc, #240]	@ (80051d4 <SPI_CloseTransfer+0x13c>)
 80050e4:	400b      	ands	r3, r1
 80050e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80050f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b04      	cmp	r3, #4
 8005102:	d014      	beq.n	800512e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00f      	beq.n	800512e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005114:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0220 	orr.w	r2, r2, #32
 800512c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b03      	cmp	r3, #3
 8005138:	d014      	beq.n	8005164 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00f      	beq.n	8005164 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800514a:	f043 0204 	orr.w	r2, r3, #4
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005162:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00f      	beq.n	800518e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005174:	f043 0201 	orr.w	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699a      	ldr	r2, [r3, #24]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800518c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00f      	beq.n	80051b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800519e:	f043 0208 	orr.w	r2, r3, #8
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	fffffc90 	.word	0xfffffc90

080051d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80051e8:	e010      	b.n	800520c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ea:	f7fc fb3d 	bl	8001868 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d803      	bhi.n	8005202 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d102      	bne.n	8005208 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e00f      	b.n	800522c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695a      	ldr	r2, [r3, #20]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4013      	ands	r3, r2
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	429a      	cmp	r2, r3
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	429a      	cmp	r2, r3
 8005228:	d0df      	beq.n	80051ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	3301      	adds	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	3301      	adds	r3, #1
 800524c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	3307      	adds	r3, #7
 8005252:	08db      	lsrs	r3, r3, #3
 8005254:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	fb02 f303 	mul.w	r3, r2, r3
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <__cvt>:
 800526a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800526c:	ed2d 8b02 	vpush	{d8}
 8005270:	eeb0 8b40 	vmov.f64	d8, d0
 8005274:	b085      	sub	sp, #20
 8005276:	4617      	mov	r7, r2
 8005278:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800527a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800527c:	ee18 2a90 	vmov	r2, s17
 8005280:	f025 0520 	bic.w	r5, r5, #32
 8005284:	2a00      	cmp	r2, #0
 8005286:	bfb6      	itet	lt
 8005288:	222d      	movlt	r2, #45	@ 0x2d
 800528a:	2200      	movge	r2, #0
 800528c:	eeb1 8b40 	vneglt.f64	d8, d0
 8005290:	2d46      	cmp	r5, #70	@ 0x46
 8005292:	460c      	mov	r4, r1
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	d004      	beq.n	80052a2 <__cvt+0x38>
 8005298:	2d45      	cmp	r5, #69	@ 0x45
 800529a:	d100      	bne.n	800529e <__cvt+0x34>
 800529c:	3401      	adds	r4, #1
 800529e:	2102      	movs	r1, #2
 80052a0:	e000      	b.n	80052a4 <__cvt+0x3a>
 80052a2:	2103      	movs	r1, #3
 80052a4:	ab03      	add	r3, sp, #12
 80052a6:	9301      	str	r3, [sp, #4]
 80052a8:	ab02      	add	r3, sp, #8
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	4622      	mov	r2, r4
 80052ae:	4633      	mov	r3, r6
 80052b0:	eeb0 0b48 	vmov.f64	d0, d8
 80052b4:	f000 ff24 	bl	8006100 <_dtoa_r>
 80052b8:	2d47      	cmp	r5, #71	@ 0x47
 80052ba:	d114      	bne.n	80052e6 <__cvt+0x7c>
 80052bc:	07fb      	lsls	r3, r7, #31
 80052be:	d50a      	bpl.n	80052d6 <__cvt+0x6c>
 80052c0:	1902      	adds	r2, r0, r4
 80052c2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80052c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ca:	bf08      	it	eq
 80052cc:	9203      	streq	r2, [sp, #12]
 80052ce:	2130      	movs	r1, #48	@ 0x30
 80052d0:	9b03      	ldr	r3, [sp, #12]
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d319      	bcc.n	800530a <__cvt+0xa0>
 80052d6:	9b03      	ldr	r3, [sp, #12]
 80052d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80052da:	1a1b      	subs	r3, r3, r0
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	b005      	add	sp, #20
 80052e0:	ecbd 8b02 	vpop	{d8}
 80052e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e6:	2d46      	cmp	r5, #70	@ 0x46
 80052e8:	eb00 0204 	add.w	r2, r0, r4
 80052ec:	d1e9      	bne.n	80052c2 <__cvt+0x58>
 80052ee:	7803      	ldrb	r3, [r0, #0]
 80052f0:	2b30      	cmp	r3, #48	@ 0x30
 80052f2:	d107      	bne.n	8005304 <__cvt+0x9a>
 80052f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80052f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fc:	bf1c      	itt	ne
 80052fe:	f1c4 0401 	rsbne	r4, r4, #1
 8005302:	6034      	strne	r4, [r6, #0]
 8005304:	6833      	ldr	r3, [r6, #0]
 8005306:	441a      	add	r2, r3
 8005308:	e7db      	b.n	80052c2 <__cvt+0x58>
 800530a:	1c5c      	adds	r4, r3, #1
 800530c:	9403      	str	r4, [sp, #12]
 800530e:	7019      	strb	r1, [r3, #0]
 8005310:	e7de      	b.n	80052d0 <__cvt+0x66>

08005312 <__exponent>:
 8005312:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005314:	2900      	cmp	r1, #0
 8005316:	bfba      	itte	lt
 8005318:	4249      	neglt	r1, r1
 800531a:	232d      	movlt	r3, #45	@ 0x2d
 800531c:	232b      	movge	r3, #43	@ 0x2b
 800531e:	2909      	cmp	r1, #9
 8005320:	7002      	strb	r2, [r0, #0]
 8005322:	7043      	strb	r3, [r0, #1]
 8005324:	dd29      	ble.n	800537a <__exponent+0x68>
 8005326:	f10d 0307 	add.w	r3, sp, #7
 800532a:	461d      	mov	r5, r3
 800532c:	270a      	movs	r7, #10
 800532e:	461a      	mov	r2, r3
 8005330:	fbb1 f6f7 	udiv	r6, r1, r7
 8005334:	fb07 1416 	mls	r4, r7, r6, r1
 8005338:	3430      	adds	r4, #48	@ 0x30
 800533a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800533e:	460c      	mov	r4, r1
 8005340:	2c63      	cmp	r4, #99	@ 0x63
 8005342:	f103 33ff 	add.w	r3, r3, #4294967295
 8005346:	4631      	mov	r1, r6
 8005348:	dcf1      	bgt.n	800532e <__exponent+0x1c>
 800534a:	3130      	adds	r1, #48	@ 0x30
 800534c:	1e94      	subs	r4, r2, #2
 800534e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005352:	1c41      	adds	r1, r0, #1
 8005354:	4623      	mov	r3, r4
 8005356:	42ab      	cmp	r3, r5
 8005358:	d30a      	bcc.n	8005370 <__exponent+0x5e>
 800535a:	f10d 0309 	add.w	r3, sp, #9
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	42ac      	cmp	r4, r5
 8005362:	bf88      	it	hi
 8005364:	2300      	movhi	r3, #0
 8005366:	3302      	adds	r3, #2
 8005368:	4403      	add	r3, r0
 800536a:	1a18      	subs	r0, r3, r0
 800536c:	b003      	add	sp, #12
 800536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005370:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005374:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005378:	e7ed      	b.n	8005356 <__exponent+0x44>
 800537a:	2330      	movs	r3, #48	@ 0x30
 800537c:	3130      	adds	r1, #48	@ 0x30
 800537e:	7083      	strb	r3, [r0, #2]
 8005380:	70c1      	strb	r1, [r0, #3]
 8005382:	1d03      	adds	r3, r0, #4
 8005384:	e7f1      	b.n	800536a <__exponent+0x58>
	...

08005388 <_printf_float>:
 8005388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538c:	b08d      	sub	sp, #52	@ 0x34
 800538e:	460c      	mov	r4, r1
 8005390:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005394:	4616      	mov	r6, r2
 8005396:	461f      	mov	r7, r3
 8005398:	4605      	mov	r5, r0
 800539a:	f000 fdaf 	bl	8005efc <_localeconv_r>
 800539e:	f8d0 b000 	ldr.w	fp, [r0]
 80053a2:	4658      	mov	r0, fp
 80053a4:	f7fa ffec 	bl	8000380 <strlen>
 80053a8:	2300      	movs	r3, #0
 80053aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80053ac:	f8d8 3000 	ldr.w	r3, [r8]
 80053b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80053b4:	6822      	ldr	r2, [r4, #0]
 80053b6:	9005      	str	r0, [sp, #20]
 80053b8:	3307      	adds	r3, #7
 80053ba:	f023 0307 	bic.w	r3, r3, #7
 80053be:	f103 0108 	add.w	r1, r3, #8
 80053c2:	f8c8 1000 	str.w	r1, [r8]
 80053c6:	ed93 0b00 	vldr	d0, [r3]
 80053ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8005628 <_printf_float+0x2a0>
 80053ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80053d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80053d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80053de:	dd24      	ble.n	800542a <_printf_float+0xa2>
 80053e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80053e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e8:	d502      	bpl.n	80053f0 <_printf_float+0x68>
 80053ea:	232d      	movs	r3, #45	@ 0x2d
 80053ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053f0:	498f      	ldr	r1, [pc, #572]	@ (8005630 <_printf_float+0x2a8>)
 80053f2:	4b90      	ldr	r3, [pc, #576]	@ (8005634 <_printf_float+0x2ac>)
 80053f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80053f8:	bf94      	ite	ls
 80053fa:	4688      	movls	r8, r1
 80053fc:	4698      	movhi	r8, r3
 80053fe:	f022 0204 	bic.w	r2, r2, #4
 8005402:	2303      	movs	r3, #3
 8005404:	6123      	str	r3, [r4, #16]
 8005406:	6022      	str	r2, [r4, #0]
 8005408:	f04f 0a00 	mov.w	sl, #0
 800540c:	9700      	str	r7, [sp, #0]
 800540e:	4633      	mov	r3, r6
 8005410:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005412:	4621      	mov	r1, r4
 8005414:	4628      	mov	r0, r5
 8005416:	f000 f9d1 	bl	80057bc <_printf_common>
 800541a:	3001      	adds	r0, #1
 800541c:	f040 8089 	bne.w	8005532 <_printf_float+0x1aa>
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	b00d      	add	sp, #52	@ 0x34
 8005426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542a:	eeb4 0b40 	vcmp.f64	d0, d0
 800542e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005432:	d709      	bvc.n	8005448 <_printf_float+0xc0>
 8005434:	ee10 3a90 	vmov	r3, s1
 8005438:	2b00      	cmp	r3, #0
 800543a:	bfbc      	itt	lt
 800543c:	232d      	movlt	r3, #45	@ 0x2d
 800543e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005442:	497d      	ldr	r1, [pc, #500]	@ (8005638 <_printf_float+0x2b0>)
 8005444:	4b7d      	ldr	r3, [pc, #500]	@ (800563c <_printf_float+0x2b4>)
 8005446:	e7d5      	b.n	80053f4 <_printf_float+0x6c>
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	1c59      	adds	r1, r3, #1
 800544c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8005450:	d139      	bne.n	80054c6 <_printf_float+0x13e>
 8005452:	2306      	movs	r3, #6
 8005454:	6063      	str	r3, [r4, #4]
 8005456:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800545a:	2300      	movs	r3, #0
 800545c:	6022      	str	r2, [r4, #0]
 800545e:	9303      	str	r3, [sp, #12]
 8005460:	ab0a      	add	r3, sp, #40	@ 0x28
 8005462:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005466:	ab09      	add	r3, sp, #36	@ 0x24
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	6861      	ldr	r1, [r4, #4]
 800546c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005470:	4628      	mov	r0, r5
 8005472:	f7ff fefa 	bl	800526a <__cvt>
 8005476:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800547a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800547c:	4680      	mov	r8, r0
 800547e:	d129      	bne.n	80054d4 <_printf_float+0x14c>
 8005480:	1cc8      	adds	r0, r1, #3
 8005482:	db02      	blt.n	800548a <_printf_float+0x102>
 8005484:	6863      	ldr	r3, [r4, #4]
 8005486:	4299      	cmp	r1, r3
 8005488:	dd41      	ble.n	800550e <_printf_float+0x186>
 800548a:	f1a9 0902 	sub.w	r9, r9, #2
 800548e:	fa5f f989 	uxtb.w	r9, r9
 8005492:	3901      	subs	r1, #1
 8005494:	464a      	mov	r2, r9
 8005496:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800549a:	9109      	str	r1, [sp, #36]	@ 0x24
 800549c:	f7ff ff39 	bl	8005312 <__exponent>
 80054a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054a2:	1813      	adds	r3, r2, r0
 80054a4:	2a01      	cmp	r2, #1
 80054a6:	4682      	mov	sl, r0
 80054a8:	6123      	str	r3, [r4, #16]
 80054aa:	dc02      	bgt.n	80054b2 <_printf_float+0x12a>
 80054ac:	6822      	ldr	r2, [r4, #0]
 80054ae:	07d2      	lsls	r2, r2, #31
 80054b0:	d501      	bpl.n	80054b6 <_printf_float+0x12e>
 80054b2:	3301      	adds	r3, #1
 80054b4:	6123      	str	r3, [r4, #16]
 80054b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0a6      	beq.n	800540c <_printf_float+0x84>
 80054be:	232d      	movs	r3, #45	@ 0x2d
 80054c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054c4:	e7a2      	b.n	800540c <_printf_float+0x84>
 80054c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80054ca:	d1c4      	bne.n	8005456 <_printf_float+0xce>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1c2      	bne.n	8005456 <_printf_float+0xce>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e7bf      	b.n	8005454 <_printf_float+0xcc>
 80054d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80054d8:	d9db      	bls.n	8005492 <_printf_float+0x10a>
 80054da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80054de:	d118      	bne.n	8005512 <_printf_float+0x18a>
 80054e0:	2900      	cmp	r1, #0
 80054e2:	6863      	ldr	r3, [r4, #4]
 80054e4:	dd0b      	ble.n	80054fe <_printf_float+0x176>
 80054e6:	6121      	str	r1, [r4, #16]
 80054e8:	b913      	cbnz	r3, 80054f0 <_printf_float+0x168>
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	07d0      	lsls	r0, r2, #31
 80054ee:	d502      	bpl.n	80054f6 <_printf_float+0x16e>
 80054f0:	3301      	adds	r3, #1
 80054f2:	440b      	add	r3, r1
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80054f8:	f04f 0a00 	mov.w	sl, #0
 80054fc:	e7db      	b.n	80054b6 <_printf_float+0x12e>
 80054fe:	b913      	cbnz	r3, 8005506 <_printf_float+0x17e>
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	07d2      	lsls	r2, r2, #31
 8005504:	d501      	bpl.n	800550a <_printf_float+0x182>
 8005506:	3302      	adds	r3, #2
 8005508:	e7f4      	b.n	80054f4 <_printf_float+0x16c>
 800550a:	2301      	movs	r3, #1
 800550c:	e7f2      	b.n	80054f4 <_printf_float+0x16c>
 800550e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8005512:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005514:	4299      	cmp	r1, r3
 8005516:	db05      	blt.n	8005524 <_printf_float+0x19c>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	6121      	str	r1, [r4, #16]
 800551c:	07d8      	lsls	r0, r3, #31
 800551e:	d5ea      	bpl.n	80054f6 <_printf_float+0x16e>
 8005520:	1c4b      	adds	r3, r1, #1
 8005522:	e7e7      	b.n	80054f4 <_printf_float+0x16c>
 8005524:	2900      	cmp	r1, #0
 8005526:	bfd4      	ite	le
 8005528:	f1c1 0202 	rsble	r2, r1, #2
 800552c:	2201      	movgt	r2, #1
 800552e:	4413      	add	r3, r2
 8005530:	e7e0      	b.n	80054f4 <_printf_float+0x16c>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	055a      	lsls	r2, r3, #21
 8005536:	d407      	bmi.n	8005548 <_printf_float+0x1c0>
 8005538:	6923      	ldr	r3, [r4, #16]
 800553a:	4642      	mov	r2, r8
 800553c:	4631      	mov	r1, r6
 800553e:	4628      	mov	r0, r5
 8005540:	47b8      	blx	r7
 8005542:	3001      	adds	r0, #1
 8005544:	d12a      	bne.n	800559c <_printf_float+0x214>
 8005546:	e76b      	b.n	8005420 <_printf_float+0x98>
 8005548:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800554c:	f240 80e0 	bls.w	8005710 <_printf_float+0x388>
 8005550:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8005554:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555c:	d133      	bne.n	80055c6 <_printf_float+0x23e>
 800555e:	4a38      	ldr	r2, [pc, #224]	@ (8005640 <_printf_float+0x2b8>)
 8005560:	2301      	movs	r3, #1
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	47b8      	blx	r7
 8005568:	3001      	adds	r0, #1
 800556a:	f43f af59 	beq.w	8005420 <_printf_float+0x98>
 800556e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005572:	4543      	cmp	r3, r8
 8005574:	db02      	blt.n	800557c <_printf_float+0x1f4>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	07d8      	lsls	r0, r3, #31
 800557a:	d50f      	bpl.n	800559c <_printf_float+0x214>
 800557c:	9b05      	ldr	r3, [sp, #20]
 800557e:	465a      	mov	r2, fp
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	f43f af4a 	beq.w	8005420 <_printf_float+0x98>
 800558c:	f04f 0900 	mov.w	r9, #0
 8005590:	f108 38ff 	add.w	r8, r8, #4294967295
 8005594:	f104 0a1a 	add.w	sl, r4, #26
 8005598:	45c8      	cmp	r8, r9
 800559a:	dc09      	bgt.n	80055b0 <_printf_float+0x228>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	079b      	lsls	r3, r3, #30
 80055a0:	f100 8107 	bmi.w	80057b2 <_printf_float+0x42a>
 80055a4:	68e0      	ldr	r0, [r4, #12]
 80055a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055a8:	4298      	cmp	r0, r3
 80055aa:	bfb8      	it	lt
 80055ac:	4618      	movlt	r0, r3
 80055ae:	e739      	b.n	8005424 <_printf_float+0x9c>
 80055b0:	2301      	movs	r3, #1
 80055b2:	4652      	mov	r2, sl
 80055b4:	4631      	mov	r1, r6
 80055b6:	4628      	mov	r0, r5
 80055b8:	47b8      	blx	r7
 80055ba:	3001      	adds	r0, #1
 80055bc:	f43f af30 	beq.w	8005420 <_printf_float+0x98>
 80055c0:	f109 0901 	add.w	r9, r9, #1
 80055c4:	e7e8      	b.n	8005598 <_printf_float+0x210>
 80055c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	dc3b      	bgt.n	8005644 <_printf_float+0x2bc>
 80055cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005640 <_printf_float+0x2b8>)
 80055ce:	2301      	movs	r3, #1
 80055d0:	4631      	mov	r1, r6
 80055d2:	4628      	mov	r0, r5
 80055d4:	47b8      	blx	r7
 80055d6:	3001      	adds	r0, #1
 80055d8:	f43f af22 	beq.w	8005420 <_printf_float+0x98>
 80055dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80055e0:	ea59 0303 	orrs.w	r3, r9, r3
 80055e4:	d102      	bne.n	80055ec <_printf_float+0x264>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	07d9      	lsls	r1, r3, #31
 80055ea:	d5d7      	bpl.n	800559c <_printf_float+0x214>
 80055ec:	9b05      	ldr	r3, [sp, #20]
 80055ee:	465a      	mov	r2, fp
 80055f0:	4631      	mov	r1, r6
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	f43f af12 	beq.w	8005420 <_printf_float+0x98>
 80055fc:	f04f 0a00 	mov.w	sl, #0
 8005600:	f104 0b1a 	add.w	fp, r4, #26
 8005604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005606:	425b      	negs	r3, r3
 8005608:	4553      	cmp	r3, sl
 800560a:	dc01      	bgt.n	8005610 <_printf_float+0x288>
 800560c:	464b      	mov	r3, r9
 800560e:	e794      	b.n	800553a <_printf_float+0x1b2>
 8005610:	2301      	movs	r3, #1
 8005612:	465a      	mov	r2, fp
 8005614:	4631      	mov	r1, r6
 8005616:	4628      	mov	r0, r5
 8005618:	47b8      	blx	r7
 800561a:	3001      	adds	r0, #1
 800561c:	f43f af00 	beq.w	8005420 <_printf_float+0x98>
 8005620:	f10a 0a01 	add.w	sl, sl, #1
 8005624:	e7ee      	b.n	8005604 <_printf_float+0x27c>
 8005626:	bf00      	nop
 8005628:	ffffffff 	.word	0xffffffff
 800562c:	7fefffff 	.word	0x7fefffff
 8005630:	08007d00 	.word	0x08007d00
 8005634:	08007d04 	.word	0x08007d04
 8005638:	08007d08 	.word	0x08007d08
 800563c:	08007d0c 	.word	0x08007d0c
 8005640:	08007d10 	.word	0x08007d10
 8005644:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005646:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800564a:	4553      	cmp	r3, sl
 800564c:	bfa8      	it	ge
 800564e:	4653      	movge	r3, sl
 8005650:	2b00      	cmp	r3, #0
 8005652:	4699      	mov	r9, r3
 8005654:	dc37      	bgt.n	80056c6 <_printf_float+0x33e>
 8005656:	2300      	movs	r3, #0
 8005658:	9307      	str	r3, [sp, #28]
 800565a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800565e:	f104 021a 	add.w	r2, r4, #26
 8005662:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005664:	9907      	ldr	r1, [sp, #28]
 8005666:	9306      	str	r3, [sp, #24]
 8005668:	eba3 0309 	sub.w	r3, r3, r9
 800566c:	428b      	cmp	r3, r1
 800566e:	dc31      	bgt.n	80056d4 <_printf_float+0x34c>
 8005670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005672:	459a      	cmp	sl, r3
 8005674:	dc3b      	bgt.n	80056ee <_printf_float+0x366>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	07da      	lsls	r2, r3, #31
 800567a:	d438      	bmi.n	80056ee <_printf_float+0x366>
 800567c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800567e:	ebaa 0903 	sub.w	r9, sl, r3
 8005682:	9b06      	ldr	r3, [sp, #24]
 8005684:	ebaa 0303 	sub.w	r3, sl, r3
 8005688:	4599      	cmp	r9, r3
 800568a:	bfa8      	it	ge
 800568c:	4699      	movge	r9, r3
 800568e:	f1b9 0f00 	cmp.w	r9, #0
 8005692:	dc34      	bgt.n	80056fe <_printf_float+0x376>
 8005694:	f04f 0800 	mov.w	r8, #0
 8005698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800569c:	f104 0b1a 	add.w	fp, r4, #26
 80056a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056a2:	ebaa 0303 	sub.w	r3, sl, r3
 80056a6:	eba3 0309 	sub.w	r3, r3, r9
 80056aa:	4543      	cmp	r3, r8
 80056ac:	f77f af76 	ble.w	800559c <_printf_float+0x214>
 80056b0:	2301      	movs	r3, #1
 80056b2:	465a      	mov	r2, fp
 80056b4:	4631      	mov	r1, r6
 80056b6:	4628      	mov	r0, r5
 80056b8:	47b8      	blx	r7
 80056ba:	3001      	adds	r0, #1
 80056bc:	f43f aeb0 	beq.w	8005420 <_printf_float+0x98>
 80056c0:	f108 0801 	add.w	r8, r8, #1
 80056c4:	e7ec      	b.n	80056a0 <_printf_float+0x318>
 80056c6:	4642      	mov	r2, r8
 80056c8:	4631      	mov	r1, r6
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b8      	blx	r7
 80056ce:	3001      	adds	r0, #1
 80056d0:	d1c1      	bne.n	8005656 <_printf_float+0x2ce>
 80056d2:	e6a5      	b.n	8005420 <_printf_float+0x98>
 80056d4:	2301      	movs	r3, #1
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	9206      	str	r2, [sp, #24]
 80056dc:	47b8      	blx	r7
 80056de:	3001      	adds	r0, #1
 80056e0:	f43f ae9e 	beq.w	8005420 <_printf_float+0x98>
 80056e4:	9b07      	ldr	r3, [sp, #28]
 80056e6:	9a06      	ldr	r2, [sp, #24]
 80056e8:	3301      	adds	r3, #1
 80056ea:	9307      	str	r3, [sp, #28]
 80056ec:	e7b9      	b.n	8005662 <_printf_float+0x2da>
 80056ee:	9b05      	ldr	r3, [sp, #20]
 80056f0:	465a      	mov	r2, fp
 80056f2:	4631      	mov	r1, r6
 80056f4:	4628      	mov	r0, r5
 80056f6:	47b8      	blx	r7
 80056f8:	3001      	adds	r0, #1
 80056fa:	d1bf      	bne.n	800567c <_printf_float+0x2f4>
 80056fc:	e690      	b.n	8005420 <_printf_float+0x98>
 80056fe:	9a06      	ldr	r2, [sp, #24]
 8005700:	464b      	mov	r3, r9
 8005702:	4442      	add	r2, r8
 8005704:	4631      	mov	r1, r6
 8005706:	4628      	mov	r0, r5
 8005708:	47b8      	blx	r7
 800570a:	3001      	adds	r0, #1
 800570c:	d1c2      	bne.n	8005694 <_printf_float+0x30c>
 800570e:	e687      	b.n	8005420 <_printf_float+0x98>
 8005710:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8005714:	f1b9 0f01 	cmp.w	r9, #1
 8005718:	dc01      	bgt.n	800571e <_printf_float+0x396>
 800571a:	07db      	lsls	r3, r3, #31
 800571c:	d536      	bpl.n	800578c <_printf_float+0x404>
 800571e:	2301      	movs	r3, #1
 8005720:	4642      	mov	r2, r8
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	47b8      	blx	r7
 8005728:	3001      	adds	r0, #1
 800572a:	f43f ae79 	beq.w	8005420 <_printf_float+0x98>
 800572e:	9b05      	ldr	r3, [sp, #20]
 8005730:	465a      	mov	r2, fp
 8005732:	4631      	mov	r1, r6
 8005734:	4628      	mov	r0, r5
 8005736:	47b8      	blx	r7
 8005738:	3001      	adds	r0, #1
 800573a:	f43f ae71 	beq.w	8005420 <_printf_float+0x98>
 800573e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8005742:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574a:	f109 39ff 	add.w	r9, r9, #4294967295
 800574e:	d018      	beq.n	8005782 <_printf_float+0x3fa>
 8005750:	464b      	mov	r3, r9
 8005752:	f108 0201 	add.w	r2, r8, #1
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	47b8      	blx	r7
 800575c:	3001      	adds	r0, #1
 800575e:	d10c      	bne.n	800577a <_printf_float+0x3f2>
 8005760:	e65e      	b.n	8005420 <_printf_float+0x98>
 8005762:	2301      	movs	r3, #1
 8005764:	465a      	mov	r2, fp
 8005766:	4631      	mov	r1, r6
 8005768:	4628      	mov	r0, r5
 800576a:	47b8      	blx	r7
 800576c:	3001      	adds	r0, #1
 800576e:	f43f ae57 	beq.w	8005420 <_printf_float+0x98>
 8005772:	f108 0801 	add.w	r8, r8, #1
 8005776:	45c8      	cmp	r8, r9
 8005778:	dbf3      	blt.n	8005762 <_printf_float+0x3da>
 800577a:	4653      	mov	r3, sl
 800577c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005780:	e6dc      	b.n	800553c <_printf_float+0x1b4>
 8005782:	f04f 0800 	mov.w	r8, #0
 8005786:	f104 0b1a 	add.w	fp, r4, #26
 800578a:	e7f4      	b.n	8005776 <_printf_float+0x3ee>
 800578c:	2301      	movs	r3, #1
 800578e:	4642      	mov	r2, r8
 8005790:	e7e1      	b.n	8005756 <_printf_float+0x3ce>
 8005792:	2301      	movs	r3, #1
 8005794:	464a      	mov	r2, r9
 8005796:	4631      	mov	r1, r6
 8005798:	4628      	mov	r0, r5
 800579a:	47b8      	blx	r7
 800579c:	3001      	adds	r0, #1
 800579e:	f43f ae3f 	beq.w	8005420 <_printf_float+0x98>
 80057a2:	f108 0801 	add.w	r8, r8, #1
 80057a6:	68e3      	ldr	r3, [r4, #12]
 80057a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80057aa:	1a5b      	subs	r3, r3, r1
 80057ac:	4543      	cmp	r3, r8
 80057ae:	dcf0      	bgt.n	8005792 <_printf_float+0x40a>
 80057b0:	e6f8      	b.n	80055a4 <_printf_float+0x21c>
 80057b2:	f04f 0800 	mov.w	r8, #0
 80057b6:	f104 0919 	add.w	r9, r4, #25
 80057ba:	e7f4      	b.n	80057a6 <_printf_float+0x41e>

080057bc <_printf_common>:
 80057bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c0:	4616      	mov	r6, r2
 80057c2:	4698      	mov	r8, r3
 80057c4:	688a      	ldr	r2, [r1, #8]
 80057c6:	690b      	ldr	r3, [r1, #16]
 80057c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057cc:	4293      	cmp	r3, r2
 80057ce:	bfb8      	it	lt
 80057d0:	4613      	movlt	r3, r2
 80057d2:	6033      	str	r3, [r6, #0]
 80057d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057d8:	4607      	mov	r7, r0
 80057da:	460c      	mov	r4, r1
 80057dc:	b10a      	cbz	r2, 80057e2 <_printf_common+0x26>
 80057de:	3301      	adds	r3, #1
 80057e0:	6033      	str	r3, [r6, #0]
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	0699      	lsls	r1, r3, #26
 80057e6:	bf42      	ittt	mi
 80057e8:	6833      	ldrmi	r3, [r6, #0]
 80057ea:	3302      	addmi	r3, #2
 80057ec:	6033      	strmi	r3, [r6, #0]
 80057ee:	6825      	ldr	r5, [r4, #0]
 80057f0:	f015 0506 	ands.w	r5, r5, #6
 80057f4:	d106      	bne.n	8005804 <_printf_common+0x48>
 80057f6:	f104 0a19 	add.w	sl, r4, #25
 80057fa:	68e3      	ldr	r3, [r4, #12]
 80057fc:	6832      	ldr	r2, [r6, #0]
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	42ab      	cmp	r3, r5
 8005802:	dc26      	bgt.n	8005852 <_printf_common+0x96>
 8005804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005808:	6822      	ldr	r2, [r4, #0]
 800580a:	3b00      	subs	r3, #0
 800580c:	bf18      	it	ne
 800580e:	2301      	movne	r3, #1
 8005810:	0692      	lsls	r2, r2, #26
 8005812:	d42b      	bmi.n	800586c <_printf_common+0xb0>
 8005814:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005818:	4641      	mov	r1, r8
 800581a:	4638      	mov	r0, r7
 800581c:	47c8      	blx	r9
 800581e:	3001      	adds	r0, #1
 8005820:	d01e      	beq.n	8005860 <_printf_common+0xa4>
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	6922      	ldr	r2, [r4, #16]
 8005826:	f003 0306 	and.w	r3, r3, #6
 800582a:	2b04      	cmp	r3, #4
 800582c:	bf02      	ittt	eq
 800582e:	68e5      	ldreq	r5, [r4, #12]
 8005830:	6833      	ldreq	r3, [r6, #0]
 8005832:	1aed      	subeq	r5, r5, r3
 8005834:	68a3      	ldr	r3, [r4, #8]
 8005836:	bf0c      	ite	eq
 8005838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800583c:	2500      	movne	r5, #0
 800583e:	4293      	cmp	r3, r2
 8005840:	bfc4      	itt	gt
 8005842:	1a9b      	subgt	r3, r3, r2
 8005844:	18ed      	addgt	r5, r5, r3
 8005846:	2600      	movs	r6, #0
 8005848:	341a      	adds	r4, #26
 800584a:	42b5      	cmp	r5, r6
 800584c:	d11a      	bne.n	8005884 <_printf_common+0xc8>
 800584e:	2000      	movs	r0, #0
 8005850:	e008      	b.n	8005864 <_printf_common+0xa8>
 8005852:	2301      	movs	r3, #1
 8005854:	4652      	mov	r2, sl
 8005856:	4641      	mov	r1, r8
 8005858:	4638      	mov	r0, r7
 800585a:	47c8      	blx	r9
 800585c:	3001      	adds	r0, #1
 800585e:	d103      	bne.n	8005868 <_printf_common+0xac>
 8005860:	f04f 30ff 	mov.w	r0, #4294967295
 8005864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005868:	3501      	adds	r5, #1
 800586a:	e7c6      	b.n	80057fa <_printf_common+0x3e>
 800586c:	18e1      	adds	r1, r4, r3
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	2030      	movs	r0, #48	@ 0x30
 8005872:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005876:	4422      	add	r2, r4
 8005878:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800587c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005880:	3302      	adds	r3, #2
 8005882:	e7c7      	b.n	8005814 <_printf_common+0x58>
 8005884:	2301      	movs	r3, #1
 8005886:	4622      	mov	r2, r4
 8005888:	4641      	mov	r1, r8
 800588a:	4638      	mov	r0, r7
 800588c:	47c8      	blx	r9
 800588e:	3001      	adds	r0, #1
 8005890:	d0e6      	beq.n	8005860 <_printf_common+0xa4>
 8005892:	3601      	adds	r6, #1
 8005894:	e7d9      	b.n	800584a <_printf_common+0x8e>
	...

08005898 <_printf_i>:
 8005898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800589c:	7e0f      	ldrb	r7, [r1, #24]
 800589e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058a0:	2f78      	cmp	r7, #120	@ 0x78
 80058a2:	4691      	mov	r9, r2
 80058a4:	4680      	mov	r8, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	469a      	mov	sl, r3
 80058aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058ae:	d807      	bhi.n	80058c0 <_printf_i+0x28>
 80058b0:	2f62      	cmp	r7, #98	@ 0x62
 80058b2:	d80a      	bhi.n	80058ca <_printf_i+0x32>
 80058b4:	2f00      	cmp	r7, #0
 80058b6:	f000 80d2 	beq.w	8005a5e <_printf_i+0x1c6>
 80058ba:	2f58      	cmp	r7, #88	@ 0x58
 80058bc:	f000 80b9 	beq.w	8005a32 <_printf_i+0x19a>
 80058c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058c8:	e03a      	b.n	8005940 <_printf_i+0xa8>
 80058ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058ce:	2b15      	cmp	r3, #21
 80058d0:	d8f6      	bhi.n	80058c0 <_printf_i+0x28>
 80058d2:	a101      	add	r1, pc, #4	@ (adr r1, 80058d8 <_printf_i+0x40>)
 80058d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058d8:	08005931 	.word	0x08005931
 80058dc:	08005945 	.word	0x08005945
 80058e0:	080058c1 	.word	0x080058c1
 80058e4:	080058c1 	.word	0x080058c1
 80058e8:	080058c1 	.word	0x080058c1
 80058ec:	080058c1 	.word	0x080058c1
 80058f0:	08005945 	.word	0x08005945
 80058f4:	080058c1 	.word	0x080058c1
 80058f8:	080058c1 	.word	0x080058c1
 80058fc:	080058c1 	.word	0x080058c1
 8005900:	080058c1 	.word	0x080058c1
 8005904:	08005a45 	.word	0x08005a45
 8005908:	0800596f 	.word	0x0800596f
 800590c:	080059ff 	.word	0x080059ff
 8005910:	080058c1 	.word	0x080058c1
 8005914:	080058c1 	.word	0x080058c1
 8005918:	08005a67 	.word	0x08005a67
 800591c:	080058c1 	.word	0x080058c1
 8005920:	0800596f 	.word	0x0800596f
 8005924:	080058c1 	.word	0x080058c1
 8005928:	080058c1 	.word	0x080058c1
 800592c:	08005a07 	.word	0x08005a07
 8005930:	6833      	ldr	r3, [r6, #0]
 8005932:	1d1a      	adds	r2, r3, #4
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6032      	str	r2, [r6, #0]
 8005938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800593c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005940:	2301      	movs	r3, #1
 8005942:	e09d      	b.n	8005a80 <_printf_i+0x1e8>
 8005944:	6833      	ldr	r3, [r6, #0]
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	1d19      	adds	r1, r3, #4
 800594a:	6031      	str	r1, [r6, #0]
 800594c:	0606      	lsls	r6, r0, #24
 800594e:	d501      	bpl.n	8005954 <_printf_i+0xbc>
 8005950:	681d      	ldr	r5, [r3, #0]
 8005952:	e003      	b.n	800595c <_printf_i+0xc4>
 8005954:	0645      	lsls	r5, r0, #25
 8005956:	d5fb      	bpl.n	8005950 <_printf_i+0xb8>
 8005958:	f9b3 5000 	ldrsh.w	r5, [r3]
 800595c:	2d00      	cmp	r5, #0
 800595e:	da03      	bge.n	8005968 <_printf_i+0xd0>
 8005960:	232d      	movs	r3, #45	@ 0x2d
 8005962:	426d      	negs	r5, r5
 8005964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005968:	4859      	ldr	r0, [pc, #356]	@ (8005ad0 <_printf_i+0x238>)
 800596a:	230a      	movs	r3, #10
 800596c:	e011      	b.n	8005992 <_printf_i+0xfa>
 800596e:	6821      	ldr	r1, [r4, #0]
 8005970:	6833      	ldr	r3, [r6, #0]
 8005972:	0608      	lsls	r0, r1, #24
 8005974:	f853 5b04 	ldr.w	r5, [r3], #4
 8005978:	d402      	bmi.n	8005980 <_printf_i+0xe8>
 800597a:	0649      	lsls	r1, r1, #25
 800597c:	bf48      	it	mi
 800597e:	b2ad      	uxthmi	r5, r5
 8005980:	2f6f      	cmp	r7, #111	@ 0x6f
 8005982:	4853      	ldr	r0, [pc, #332]	@ (8005ad0 <_printf_i+0x238>)
 8005984:	6033      	str	r3, [r6, #0]
 8005986:	bf14      	ite	ne
 8005988:	230a      	movne	r3, #10
 800598a:	2308      	moveq	r3, #8
 800598c:	2100      	movs	r1, #0
 800598e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005992:	6866      	ldr	r6, [r4, #4]
 8005994:	60a6      	str	r6, [r4, #8]
 8005996:	2e00      	cmp	r6, #0
 8005998:	bfa2      	ittt	ge
 800599a:	6821      	ldrge	r1, [r4, #0]
 800599c:	f021 0104 	bicge.w	r1, r1, #4
 80059a0:	6021      	strge	r1, [r4, #0]
 80059a2:	b90d      	cbnz	r5, 80059a8 <_printf_i+0x110>
 80059a4:	2e00      	cmp	r6, #0
 80059a6:	d04b      	beq.n	8005a40 <_printf_i+0x1a8>
 80059a8:	4616      	mov	r6, r2
 80059aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80059ae:	fb03 5711 	mls	r7, r3, r1, r5
 80059b2:	5dc7      	ldrb	r7, [r0, r7]
 80059b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059b8:	462f      	mov	r7, r5
 80059ba:	42bb      	cmp	r3, r7
 80059bc:	460d      	mov	r5, r1
 80059be:	d9f4      	bls.n	80059aa <_printf_i+0x112>
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d10b      	bne.n	80059dc <_printf_i+0x144>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	07df      	lsls	r7, r3, #31
 80059c8:	d508      	bpl.n	80059dc <_printf_i+0x144>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	6861      	ldr	r1, [r4, #4]
 80059ce:	4299      	cmp	r1, r3
 80059d0:	bfde      	ittt	le
 80059d2:	2330      	movle	r3, #48	@ 0x30
 80059d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059dc:	1b92      	subs	r2, r2, r6
 80059de:	6122      	str	r2, [r4, #16]
 80059e0:	f8cd a000 	str.w	sl, [sp]
 80059e4:	464b      	mov	r3, r9
 80059e6:	aa03      	add	r2, sp, #12
 80059e8:	4621      	mov	r1, r4
 80059ea:	4640      	mov	r0, r8
 80059ec:	f7ff fee6 	bl	80057bc <_printf_common>
 80059f0:	3001      	adds	r0, #1
 80059f2:	d14a      	bne.n	8005a8a <_printf_i+0x1f2>
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295
 80059f8:	b004      	add	sp, #16
 80059fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	f043 0320 	orr.w	r3, r3, #32
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	4833      	ldr	r0, [pc, #204]	@ (8005ad4 <_printf_i+0x23c>)
 8005a08:	2778      	movs	r7, #120	@ 0x78
 8005a0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	6831      	ldr	r1, [r6, #0]
 8005a12:	061f      	lsls	r7, r3, #24
 8005a14:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a18:	d402      	bmi.n	8005a20 <_printf_i+0x188>
 8005a1a:	065f      	lsls	r7, r3, #25
 8005a1c:	bf48      	it	mi
 8005a1e:	b2ad      	uxthmi	r5, r5
 8005a20:	6031      	str	r1, [r6, #0]
 8005a22:	07d9      	lsls	r1, r3, #31
 8005a24:	bf44      	itt	mi
 8005a26:	f043 0320 	orrmi.w	r3, r3, #32
 8005a2a:	6023      	strmi	r3, [r4, #0]
 8005a2c:	b11d      	cbz	r5, 8005a36 <_printf_i+0x19e>
 8005a2e:	2310      	movs	r3, #16
 8005a30:	e7ac      	b.n	800598c <_printf_i+0xf4>
 8005a32:	4827      	ldr	r0, [pc, #156]	@ (8005ad0 <_printf_i+0x238>)
 8005a34:	e7e9      	b.n	8005a0a <_printf_i+0x172>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	f023 0320 	bic.w	r3, r3, #32
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	e7f6      	b.n	8005a2e <_printf_i+0x196>
 8005a40:	4616      	mov	r6, r2
 8005a42:	e7bd      	b.n	80059c0 <_printf_i+0x128>
 8005a44:	6833      	ldr	r3, [r6, #0]
 8005a46:	6825      	ldr	r5, [r4, #0]
 8005a48:	6961      	ldr	r1, [r4, #20]
 8005a4a:	1d18      	adds	r0, r3, #4
 8005a4c:	6030      	str	r0, [r6, #0]
 8005a4e:	062e      	lsls	r6, r5, #24
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	d501      	bpl.n	8005a58 <_printf_i+0x1c0>
 8005a54:	6019      	str	r1, [r3, #0]
 8005a56:	e002      	b.n	8005a5e <_printf_i+0x1c6>
 8005a58:	0668      	lsls	r0, r5, #25
 8005a5a:	d5fb      	bpl.n	8005a54 <_printf_i+0x1bc>
 8005a5c:	8019      	strh	r1, [r3, #0]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6123      	str	r3, [r4, #16]
 8005a62:	4616      	mov	r6, r2
 8005a64:	e7bc      	b.n	80059e0 <_printf_i+0x148>
 8005a66:	6833      	ldr	r3, [r6, #0]
 8005a68:	1d1a      	adds	r2, r3, #4
 8005a6a:	6032      	str	r2, [r6, #0]
 8005a6c:	681e      	ldr	r6, [r3, #0]
 8005a6e:	6862      	ldr	r2, [r4, #4]
 8005a70:	2100      	movs	r1, #0
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7fa fc34 	bl	80002e0 <memchr>
 8005a78:	b108      	cbz	r0, 8005a7e <_printf_i+0x1e6>
 8005a7a:	1b80      	subs	r0, r0, r6
 8005a7c:	6060      	str	r0, [r4, #4]
 8005a7e:	6863      	ldr	r3, [r4, #4]
 8005a80:	6123      	str	r3, [r4, #16]
 8005a82:	2300      	movs	r3, #0
 8005a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a88:	e7aa      	b.n	80059e0 <_printf_i+0x148>
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	4632      	mov	r2, r6
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4640      	mov	r0, r8
 8005a92:	47d0      	blx	sl
 8005a94:	3001      	adds	r0, #1
 8005a96:	d0ad      	beq.n	80059f4 <_printf_i+0x15c>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	079b      	lsls	r3, r3, #30
 8005a9c:	d413      	bmi.n	8005ac6 <_printf_i+0x22e>
 8005a9e:	68e0      	ldr	r0, [r4, #12]
 8005aa0:	9b03      	ldr	r3, [sp, #12]
 8005aa2:	4298      	cmp	r0, r3
 8005aa4:	bfb8      	it	lt
 8005aa6:	4618      	movlt	r0, r3
 8005aa8:	e7a6      	b.n	80059f8 <_printf_i+0x160>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	4632      	mov	r2, r6
 8005aae:	4649      	mov	r1, r9
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	47d0      	blx	sl
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d09d      	beq.n	80059f4 <_printf_i+0x15c>
 8005ab8:	3501      	adds	r5, #1
 8005aba:	68e3      	ldr	r3, [r4, #12]
 8005abc:	9903      	ldr	r1, [sp, #12]
 8005abe:	1a5b      	subs	r3, r3, r1
 8005ac0:	42ab      	cmp	r3, r5
 8005ac2:	dcf2      	bgt.n	8005aaa <_printf_i+0x212>
 8005ac4:	e7eb      	b.n	8005a9e <_printf_i+0x206>
 8005ac6:	2500      	movs	r5, #0
 8005ac8:	f104 0619 	add.w	r6, r4, #25
 8005acc:	e7f5      	b.n	8005aba <_printf_i+0x222>
 8005ace:	bf00      	nop
 8005ad0:	08007d12 	.word	0x08007d12
 8005ad4:	08007d23 	.word	0x08007d23

08005ad8 <std>:
 8005ad8:	2300      	movs	r3, #0
 8005ada:	b510      	push	{r4, lr}
 8005adc:	4604      	mov	r4, r0
 8005ade:	e9c0 3300 	strd	r3, r3, [r0]
 8005ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ae6:	6083      	str	r3, [r0, #8]
 8005ae8:	8181      	strh	r1, [r0, #12]
 8005aea:	6643      	str	r3, [r0, #100]	@ 0x64
 8005aec:	81c2      	strh	r2, [r0, #14]
 8005aee:	6183      	str	r3, [r0, #24]
 8005af0:	4619      	mov	r1, r3
 8005af2:	2208      	movs	r2, #8
 8005af4:	305c      	adds	r0, #92	@ 0x5c
 8005af6:	f000 f9f9 	bl	8005eec <memset>
 8005afa:	4b0d      	ldr	r3, [pc, #52]	@ (8005b30 <std+0x58>)
 8005afc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005afe:	4b0d      	ldr	r3, [pc, #52]	@ (8005b34 <std+0x5c>)
 8005b00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b02:	4b0d      	ldr	r3, [pc, #52]	@ (8005b38 <std+0x60>)
 8005b04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b06:	4b0d      	ldr	r3, [pc, #52]	@ (8005b3c <std+0x64>)
 8005b08:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b40 <std+0x68>)
 8005b0c:	6224      	str	r4, [r4, #32]
 8005b0e:	429c      	cmp	r4, r3
 8005b10:	d006      	beq.n	8005b20 <std+0x48>
 8005b12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b16:	4294      	cmp	r4, r2
 8005b18:	d002      	beq.n	8005b20 <std+0x48>
 8005b1a:	33d0      	adds	r3, #208	@ 0xd0
 8005b1c:	429c      	cmp	r4, r3
 8005b1e:	d105      	bne.n	8005b2c <std+0x54>
 8005b20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b28:	f000 ba5c 	b.w	8005fe4 <__retarget_lock_init_recursive>
 8005b2c:	bd10      	pop	{r4, pc}
 8005b2e:	bf00      	nop
 8005b30:	08005d3d 	.word	0x08005d3d
 8005b34:	08005d5f 	.word	0x08005d5f
 8005b38:	08005d97 	.word	0x08005d97
 8005b3c:	08005dbb 	.word	0x08005dbb
 8005b40:	240002c8 	.word	0x240002c8

08005b44 <stdio_exit_handler>:
 8005b44:	4a02      	ldr	r2, [pc, #8]	@ (8005b50 <stdio_exit_handler+0xc>)
 8005b46:	4903      	ldr	r1, [pc, #12]	@ (8005b54 <stdio_exit_handler+0x10>)
 8005b48:	4803      	ldr	r0, [pc, #12]	@ (8005b58 <stdio_exit_handler+0x14>)
 8005b4a:	f000 b869 	b.w	8005c20 <_fwalk_sglue>
 8005b4e:	bf00      	nop
 8005b50:	24000018 	.word	0x24000018
 8005b54:	0800783d 	.word	0x0800783d
 8005b58:	24000028 	.word	0x24000028

08005b5c <cleanup_stdio>:
 8005b5c:	6841      	ldr	r1, [r0, #4]
 8005b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b90 <cleanup_stdio+0x34>)
 8005b60:	4299      	cmp	r1, r3
 8005b62:	b510      	push	{r4, lr}
 8005b64:	4604      	mov	r4, r0
 8005b66:	d001      	beq.n	8005b6c <cleanup_stdio+0x10>
 8005b68:	f001 fe68 	bl	800783c <_fflush_r>
 8005b6c:	68a1      	ldr	r1, [r4, #8]
 8005b6e:	4b09      	ldr	r3, [pc, #36]	@ (8005b94 <cleanup_stdio+0x38>)
 8005b70:	4299      	cmp	r1, r3
 8005b72:	d002      	beq.n	8005b7a <cleanup_stdio+0x1e>
 8005b74:	4620      	mov	r0, r4
 8005b76:	f001 fe61 	bl	800783c <_fflush_r>
 8005b7a:	68e1      	ldr	r1, [r4, #12]
 8005b7c:	4b06      	ldr	r3, [pc, #24]	@ (8005b98 <cleanup_stdio+0x3c>)
 8005b7e:	4299      	cmp	r1, r3
 8005b80:	d004      	beq.n	8005b8c <cleanup_stdio+0x30>
 8005b82:	4620      	mov	r0, r4
 8005b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b88:	f001 be58 	b.w	800783c <_fflush_r>
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	bf00      	nop
 8005b90:	240002c8 	.word	0x240002c8
 8005b94:	24000330 	.word	0x24000330
 8005b98:	24000398 	.word	0x24000398

08005b9c <global_stdio_init.part.0>:
 8005b9c:	b510      	push	{r4, lr}
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005bcc <global_stdio_init.part.0+0x30>)
 8005ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8005bd0 <global_stdio_init.part.0+0x34>)
 8005ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd4 <global_stdio_init.part.0+0x38>)
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2104      	movs	r1, #4
 8005bac:	f7ff ff94 	bl	8005ad8 <std>
 8005bb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	2109      	movs	r1, #9
 8005bb8:	f7ff ff8e 	bl	8005ad8 <std>
 8005bbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc6:	2112      	movs	r1, #18
 8005bc8:	f7ff bf86 	b.w	8005ad8 <std>
 8005bcc:	24000400 	.word	0x24000400
 8005bd0:	240002c8 	.word	0x240002c8
 8005bd4:	08005b45 	.word	0x08005b45

08005bd8 <__sfp_lock_acquire>:
 8005bd8:	4801      	ldr	r0, [pc, #4]	@ (8005be0 <__sfp_lock_acquire+0x8>)
 8005bda:	f000 ba04 	b.w	8005fe6 <__retarget_lock_acquire_recursive>
 8005bde:	bf00      	nop
 8005be0:	24000409 	.word	0x24000409

08005be4 <__sfp_lock_release>:
 8005be4:	4801      	ldr	r0, [pc, #4]	@ (8005bec <__sfp_lock_release+0x8>)
 8005be6:	f000 b9ff 	b.w	8005fe8 <__retarget_lock_release_recursive>
 8005bea:	bf00      	nop
 8005bec:	24000409 	.word	0x24000409

08005bf0 <__sinit>:
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	f7ff fff0 	bl	8005bd8 <__sfp_lock_acquire>
 8005bf8:	6a23      	ldr	r3, [r4, #32]
 8005bfa:	b11b      	cbz	r3, 8005c04 <__sinit+0x14>
 8005bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c00:	f7ff bff0 	b.w	8005be4 <__sfp_lock_release>
 8005c04:	4b04      	ldr	r3, [pc, #16]	@ (8005c18 <__sinit+0x28>)
 8005c06:	6223      	str	r3, [r4, #32]
 8005c08:	4b04      	ldr	r3, [pc, #16]	@ (8005c1c <__sinit+0x2c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1f5      	bne.n	8005bfc <__sinit+0xc>
 8005c10:	f7ff ffc4 	bl	8005b9c <global_stdio_init.part.0>
 8005c14:	e7f2      	b.n	8005bfc <__sinit+0xc>
 8005c16:	bf00      	nop
 8005c18:	08005b5d 	.word	0x08005b5d
 8005c1c:	24000400 	.word	0x24000400

08005c20 <_fwalk_sglue>:
 8005c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c24:	4607      	mov	r7, r0
 8005c26:	4688      	mov	r8, r1
 8005c28:	4614      	mov	r4, r2
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c30:	f1b9 0901 	subs.w	r9, r9, #1
 8005c34:	d505      	bpl.n	8005c42 <_fwalk_sglue+0x22>
 8005c36:	6824      	ldr	r4, [r4, #0]
 8005c38:	2c00      	cmp	r4, #0
 8005c3a:	d1f7      	bne.n	8005c2c <_fwalk_sglue+0xc>
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c42:	89ab      	ldrh	r3, [r5, #12]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d907      	bls.n	8005c58 <_fwalk_sglue+0x38>
 8005c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	d003      	beq.n	8005c58 <_fwalk_sglue+0x38>
 8005c50:	4629      	mov	r1, r5
 8005c52:	4638      	mov	r0, r7
 8005c54:	47c0      	blx	r8
 8005c56:	4306      	orrs	r6, r0
 8005c58:	3568      	adds	r5, #104	@ 0x68
 8005c5a:	e7e9      	b.n	8005c30 <_fwalk_sglue+0x10>

08005c5c <iprintf>:
 8005c5c:	b40f      	push	{r0, r1, r2, r3}
 8005c5e:	b507      	push	{r0, r1, r2, lr}
 8005c60:	4906      	ldr	r1, [pc, #24]	@ (8005c7c <iprintf+0x20>)
 8005c62:	ab04      	add	r3, sp, #16
 8005c64:	6808      	ldr	r0, [r1, #0]
 8005c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c6a:	6881      	ldr	r1, [r0, #8]
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	f001 fc49 	bl	8007504 <_vfiprintf_r>
 8005c72:	b003      	add	sp, #12
 8005c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c78:	b004      	add	sp, #16
 8005c7a:	4770      	bx	lr
 8005c7c:	24000024 	.word	0x24000024

08005c80 <_puts_r>:
 8005c80:	6a03      	ldr	r3, [r0, #32]
 8005c82:	b570      	push	{r4, r5, r6, lr}
 8005c84:	6884      	ldr	r4, [r0, #8]
 8005c86:	4605      	mov	r5, r0
 8005c88:	460e      	mov	r6, r1
 8005c8a:	b90b      	cbnz	r3, 8005c90 <_puts_r+0x10>
 8005c8c:	f7ff ffb0 	bl	8005bf0 <__sinit>
 8005c90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c92:	07db      	lsls	r3, r3, #31
 8005c94:	d405      	bmi.n	8005ca2 <_puts_r+0x22>
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	0598      	lsls	r0, r3, #22
 8005c9a:	d402      	bmi.n	8005ca2 <_puts_r+0x22>
 8005c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c9e:	f000 f9a2 	bl	8005fe6 <__retarget_lock_acquire_recursive>
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	0719      	lsls	r1, r3, #28
 8005ca6:	d502      	bpl.n	8005cae <_puts_r+0x2e>
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d135      	bne.n	8005d1a <_puts_r+0x9a>
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f000 f8c5 	bl	8005e40 <__swsetup_r>
 8005cb6:	b380      	cbz	r0, 8005d1a <_puts_r+0x9a>
 8005cb8:	f04f 35ff 	mov.w	r5, #4294967295
 8005cbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cbe:	07da      	lsls	r2, r3, #31
 8005cc0:	d405      	bmi.n	8005cce <_puts_r+0x4e>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	059b      	lsls	r3, r3, #22
 8005cc6:	d402      	bmi.n	8005cce <_puts_r+0x4e>
 8005cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cca:	f000 f98d 	bl	8005fe8 <__retarget_lock_release_recursive>
 8005cce:	4628      	mov	r0, r5
 8005cd0:	bd70      	pop	{r4, r5, r6, pc}
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	da04      	bge.n	8005ce0 <_puts_r+0x60>
 8005cd6:	69a2      	ldr	r2, [r4, #24]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	dc17      	bgt.n	8005d0c <_puts_r+0x8c>
 8005cdc:	290a      	cmp	r1, #10
 8005cde:	d015      	beq.n	8005d0c <_puts_r+0x8c>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	6022      	str	r2, [r4, #0]
 8005ce6:	7019      	strb	r1, [r3, #0]
 8005ce8:	68a3      	ldr	r3, [r4, #8]
 8005cea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	60a3      	str	r3, [r4, #8]
 8005cf2:	2900      	cmp	r1, #0
 8005cf4:	d1ed      	bne.n	8005cd2 <_puts_r+0x52>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	da11      	bge.n	8005d1e <_puts_r+0x9e>
 8005cfa:	4622      	mov	r2, r4
 8005cfc:	210a      	movs	r1, #10
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f000 f85f 	bl	8005dc2 <__swbuf_r>
 8005d04:	3001      	adds	r0, #1
 8005d06:	d0d7      	beq.n	8005cb8 <_puts_r+0x38>
 8005d08:	250a      	movs	r5, #10
 8005d0a:	e7d7      	b.n	8005cbc <_puts_r+0x3c>
 8005d0c:	4622      	mov	r2, r4
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f000 f857 	bl	8005dc2 <__swbuf_r>
 8005d14:	3001      	adds	r0, #1
 8005d16:	d1e7      	bne.n	8005ce8 <_puts_r+0x68>
 8005d18:	e7ce      	b.n	8005cb8 <_puts_r+0x38>
 8005d1a:	3e01      	subs	r6, #1
 8005d1c:	e7e4      	b.n	8005ce8 <_puts_r+0x68>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	6022      	str	r2, [r4, #0]
 8005d24:	220a      	movs	r2, #10
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	e7ee      	b.n	8005d08 <_puts_r+0x88>
	...

08005d2c <puts>:
 8005d2c:	4b02      	ldr	r3, [pc, #8]	@ (8005d38 <puts+0xc>)
 8005d2e:	4601      	mov	r1, r0
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	f7ff bfa5 	b.w	8005c80 <_puts_r>
 8005d36:	bf00      	nop
 8005d38:	24000024 	.word	0x24000024

08005d3c <__sread>:
 8005d3c:	b510      	push	{r4, lr}
 8005d3e:	460c      	mov	r4, r1
 8005d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d44:	f000 f900 	bl	8005f48 <_read_r>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	bfab      	itete	ge
 8005d4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d50:	181b      	addge	r3, r3, r0
 8005d52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d56:	bfac      	ite	ge
 8005d58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d5a:	81a3      	strhlt	r3, [r4, #12]
 8005d5c:	bd10      	pop	{r4, pc}

08005d5e <__swrite>:
 8005d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d62:	461f      	mov	r7, r3
 8005d64:	898b      	ldrh	r3, [r1, #12]
 8005d66:	05db      	lsls	r3, r3, #23
 8005d68:	4605      	mov	r5, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	d505      	bpl.n	8005d7c <__swrite+0x1e>
 8005d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d74:	2302      	movs	r3, #2
 8005d76:	2200      	movs	r2, #0
 8005d78:	f000 f8d4 	bl	8005f24 <_lseek_r>
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d86:	81a3      	strh	r3, [r4, #12]
 8005d88:	4632      	mov	r2, r6
 8005d8a:	463b      	mov	r3, r7
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d92:	f000 b8eb 	b.w	8005f6c <_write_r>

08005d96 <__sseek>:
 8005d96:	b510      	push	{r4, lr}
 8005d98:	460c      	mov	r4, r1
 8005d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d9e:	f000 f8c1 	bl	8005f24 <_lseek_r>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	bf15      	itete	ne
 8005da8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005daa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005db2:	81a3      	strheq	r3, [r4, #12]
 8005db4:	bf18      	it	ne
 8005db6:	81a3      	strhne	r3, [r4, #12]
 8005db8:	bd10      	pop	{r4, pc}

08005dba <__sclose>:
 8005dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dbe:	f000 b8a1 	b.w	8005f04 <_close_r>

08005dc2 <__swbuf_r>:
 8005dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc4:	460e      	mov	r6, r1
 8005dc6:	4614      	mov	r4, r2
 8005dc8:	4605      	mov	r5, r0
 8005dca:	b118      	cbz	r0, 8005dd4 <__swbuf_r+0x12>
 8005dcc:	6a03      	ldr	r3, [r0, #32]
 8005dce:	b90b      	cbnz	r3, 8005dd4 <__swbuf_r+0x12>
 8005dd0:	f7ff ff0e 	bl	8005bf0 <__sinit>
 8005dd4:	69a3      	ldr	r3, [r4, #24]
 8005dd6:	60a3      	str	r3, [r4, #8]
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	071a      	lsls	r2, r3, #28
 8005ddc:	d501      	bpl.n	8005de2 <__swbuf_r+0x20>
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	b943      	cbnz	r3, 8005df4 <__swbuf_r+0x32>
 8005de2:	4621      	mov	r1, r4
 8005de4:	4628      	mov	r0, r5
 8005de6:	f000 f82b 	bl	8005e40 <__swsetup_r>
 8005dea:	b118      	cbz	r0, 8005df4 <__swbuf_r+0x32>
 8005dec:	f04f 37ff 	mov.w	r7, #4294967295
 8005df0:	4638      	mov	r0, r7
 8005df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	6922      	ldr	r2, [r4, #16]
 8005df8:	1a98      	subs	r0, r3, r2
 8005dfa:	6963      	ldr	r3, [r4, #20]
 8005dfc:	b2f6      	uxtb	r6, r6
 8005dfe:	4283      	cmp	r3, r0
 8005e00:	4637      	mov	r7, r6
 8005e02:	dc05      	bgt.n	8005e10 <__swbuf_r+0x4e>
 8005e04:	4621      	mov	r1, r4
 8005e06:	4628      	mov	r0, r5
 8005e08:	f001 fd18 	bl	800783c <_fflush_r>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d1ed      	bne.n	8005dec <__swbuf_r+0x2a>
 8005e10:	68a3      	ldr	r3, [r4, #8]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	60a3      	str	r3, [r4, #8]
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	6022      	str	r2, [r4, #0]
 8005e1c:	701e      	strb	r6, [r3, #0]
 8005e1e:	6962      	ldr	r2, [r4, #20]
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d004      	beq.n	8005e30 <__swbuf_r+0x6e>
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	07db      	lsls	r3, r3, #31
 8005e2a:	d5e1      	bpl.n	8005df0 <__swbuf_r+0x2e>
 8005e2c:	2e0a      	cmp	r6, #10
 8005e2e:	d1df      	bne.n	8005df0 <__swbuf_r+0x2e>
 8005e30:	4621      	mov	r1, r4
 8005e32:	4628      	mov	r0, r5
 8005e34:	f001 fd02 	bl	800783c <_fflush_r>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d0d9      	beq.n	8005df0 <__swbuf_r+0x2e>
 8005e3c:	e7d6      	b.n	8005dec <__swbuf_r+0x2a>
	...

08005e40 <__swsetup_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4b29      	ldr	r3, [pc, #164]	@ (8005ee8 <__swsetup_r+0xa8>)
 8005e44:	4605      	mov	r5, r0
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	460c      	mov	r4, r1
 8005e4a:	b118      	cbz	r0, 8005e54 <__swsetup_r+0x14>
 8005e4c:	6a03      	ldr	r3, [r0, #32]
 8005e4e:	b90b      	cbnz	r3, 8005e54 <__swsetup_r+0x14>
 8005e50:	f7ff fece 	bl	8005bf0 <__sinit>
 8005e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e58:	0719      	lsls	r1, r3, #28
 8005e5a:	d422      	bmi.n	8005ea2 <__swsetup_r+0x62>
 8005e5c:	06da      	lsls	r2, r3, #27
 8005e5e:	d407      	bmi.n	8005e70 <__swsetup_r+0x30>
 8005e60:	2209      	movs	r2, #9
 8005e62:	602a      	str	r2, [r5, #0]
 8005e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e68:	81a3      	strh	r3, [r4, #12]
 8005e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6e:	e033      	b.n	8005ed8 <__swsetup_r+0x98>
 8005e70:	0758      	lsls	r0, r3, #29
 8005e72:	d512      	bpl.n	8005e9a <__swsetup_r+0x5a>
 8005e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e76:	b141      	cbz	r1, 8005e8a <__swsetup_r+0x4a>
 8005e78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e7c:	4299      	cmp	r1, r3
 8005e7e:	d002      	beq.n	8005e86 <__swsetup_r+0x46>
 8005e80:	4628      	mov	r0, r5
 8005e82:	f000 fe93 	bl	8006bac <_free_r>
 8005e86:	2300      	movs	r3, #0
 8005e88:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e90:	81a3      	strh	r3, [r4, #12]
 8005e92:	2300      	movs	r3, #0
 8005e94:	6063      	str	r3, [r4, #4]
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	6023      	str	r3, [r4, #0]
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	f043 0308 	orr.w	r3, r3, #8
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	b94b      	cbnz	r3, 8005eba <__swsetup_r+0x7a>
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eb0:	d003      	beq.n	8005eba <__swsetup_r+0x7a>
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f001 fd0f 	bl	80078d8 <__smakebuf_r>
 8005eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ebe:	f013 0201 	ands.w	r2, r3, #1
 8005ec2:	d00a      	beq.n	8005eda <__swsetup_r+0x9a>
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	60a2      	str	r2, [r4, #8]
 8005ec8:	6962      	ldr	r2, [r4, #20]
 8005eca:	4252      	negs	r2, r2
 8005ecc:	61a2      	str	r2, [r4, #24]
 8005ece:	6922      	ldr	r2, [r4, #16]
 8005ed0:	b942      	cbnz	r2, 8005ee4 <__swsetup_r+0xa4>
 8005ed2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ed6:	d1c5      	bne.n	8005e64 <__swsetup_r+0x24>
 8005ed8:	bd38      	pop	{r3, r4, r5, pc}
 8005eda:	0799      	lsls	r1, r3, #30
 8005edc:	bf58      	it	pl
 8005ede:	6962      	ldrpl	r2, [r4, #20]
 8005ee0:	60a2      	str	r2, [r4, #8]
 8005ee2:	e7f4      	b.n	8005ece <__swsetup_r+0x8e>
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	e7f7      	b.n	8005ed8 <__swsetup_r+0x98>
 8005ee8:	24000024 	.word	0x24000024

08005eec <memset>:
 8005eec:	4402      	add	r2, r0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d100      	bne.n	8005ef6 <memset+0xa>
 8005ef4:	4770      	bx	lr
 8005ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8005efa:	e7f9      	b.n	8005ef0 <memset+0x4>

08005efc <_localeconv_r>:
 8005efc:	4800      	ldr	r0, [pc, #0]	@ (8005f00 <_localeconv_r+0x4>)
 8005efe:	4770      	bx	lr
 8005f00:	24000164 	.word	0x24000164

08005f04 <_close_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d06      	ldr	r5, [pc, #24]	@ (8005f20 <_close_r+0x1c>)
 8005f08:	2300      	movs	r3, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	f7fb fad5 	bl	80014be <_close>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_close_r+0x1a>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_close_r+0x1a>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	24000404 	.word	0x24000404

08005f24 <_lseek_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4d07      	ldr	r5, [pc, #28]	@ (8005f44 <_lseek_r+0x20>)
 8005f28:	4604      	mov	r4, r0
 8005f2a:	4608      	mov	r0, r1
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	602a      	str	r2, [r5, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f7fb faea 	bl	800150c <_lseek>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_lseek_r+0x1e>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_lseek_r+0x1e>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	24000404 	.word	0x24000404

08005f48 <_read_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4d07      	ldr	r5, [pc, #28]	@ (8005f68 <_read_r+0x20>)
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	4608      	mov	r0, r1
 8005f50:	4611      	mov	r1, r2
 8005f52:	2200      	movs	r2, #0
 8005f54:	602a      	str	r2, [r5, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f7fb fa94 	bl	8001484 <_read>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d102      	bne.n	8005f66 <_read_r+0x1e>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	b103      	cbz	r3, 8005f66 <_read_r+0x1e>
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	24000404 	.word	0x24000404

08005f6c <_write_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4d07      	ldr	r5, [pc, #28]	@ (8005f8c <_write_r+0x20>)
 8005f70:	4604      	mov	r4, r0
 8005f72:	4608      	mov	r0, r1
 8005f74:	4611      	mov	r1, r2
 8005f76:	2200      	movs	r2, #0
 8005f78:	602a      	str	r2, [r5, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f7fb f912 	bl	80011a4 <_write>
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	d102      	bne.n	8005f8a <_write_r+0x1e>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	b103      	cbz	r3, 8005f8a <_write_r+0x1e>
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
 8005f8c:	24000404 	.word	0x24000404

08005f90 <__errno>:
 8005f90:	4b01      	ldr	r3, [pc, #4]	@ (8005f98 <__errno+0x8>)
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	24000024 	.word	0x24000024

08005f9c <__libc_init_array>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd4 <__libc_init_array+0x38>)
 8005fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8005fd8 <__libc_init_array+0x3c>)
 8005fa2:	1b64      	subs	r4, r4, r5
 8005fa4:	10a4      	asrs	r4, r4, #2
 8005fa6:	2600      	movs	r6, #0
 8005fa8:	42a6      	cmp	r6, r4
 8005faa:	d109      	bne.n	8005fc0 <__libc_init_array+0x24>
 8005fac:	4d0b      	ldr	r5, [pc, #44]	@ (8005fdc <__libc_init_array+0x40>)
 8005fae:	4c0c      	ldr	r4, [pc, #48]	@ (8005fe0 <__libc_init_array+0x44>)
 8005fb0:	f001 fdbe 	bl	8007b30 <_init>
 8005fb4:	1b64      	subs	r4, r4, r5
 8005fb6:	10a4      	asrs	r4, r4, #2
 8005fb8:	2600      	movs	r6, #0
 8005fba:	42a6      	cmp	r6, r4
 8005fbc:	d105      	bne.n	8005fca <__libc_init_array+0x2e>
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc4:	4798      	blx	r3
 8005fc6:	3601      	adds	r6, #1
 8005fc8:	e7ee      	b.n	8005fa8 <__libc_init_array+0xc>
 8005fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fce:	4798      	blx	r3
 8005fd0:	3601      	adds	r6, #1
 8005fd2:	e7f2      	b.n	8005fba <__libc_init_array+0x1e>
 8005fd4:	08008078 	.word	0x08008078
 8005fd8:	08008078 	.word	0x08008078
 8005fdc:	08008078 	.word	0x08008078
 8005fe0:	0800807c 	.word	0x0800807c

08005fe4 <__retarget_lock_init_recursive>:
 8005fe4:	4770      	bx	lr

08005fe6 <__retarget_lock_acquire_recursive>:
 8005fe6:	4770      	bx	lr

08005fe8 <__retarget_lock_release_recursive>:
 8005fe8:	4770      	bx	lr

08005fea <quorem>:
 8005fea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fee:	6903      	ldr	r3, [r0, #16]
 8005ff0:	690c      	ldr	r4, [r1, #16]
 8005ff2:	42a3      	cmp	r3, r4
 8005ff4:	4607      	mov	r7, r0
 8005ff6:	db7e      	blt.n	80060f6 <quorem+0x10c>
 8005ff8:	3c01      	subs	r4, #1
 8005ffa:	f101 0814 	add.w	r8, r1, #20
 8005ffe:	00a3      	lsls	r3, r4, #2
 8006000:	f100 0514 	add.w	r5, r0, #20
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006010:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006014:	3301      	adds	r3, #1
 8006016:	429a      	cmp	r2, r3
 8006018:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800601c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006020:	d32e      	bcc.n	8006080 <quorem+0x96>
 8006022:	f04f 0a00 	mov.w	sl, #0
 8006026:	46c4      	mov	ip, r8
 8006028:	46ae      	mov	lr, r5
 800602a:	46d3      	mov	fp, sl
 800602c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006030:	b298      	uxth	r0, r3
 8006032:	fb06 a000 	mla	r0, r6, r0, sl
 8006036:	0c02      	lsrs	r2, r0, #16
 8006038:	0c1b      	lsrs	r3, r3, #16
 800603a:	fb06 2303 	mla	r3, r6, r3, r2
 800603e:	f8de 2000 	ldr.w	r2, [lr]
 8006042:	b280      	uxth	r0, r0
 8006044:	b292      	uxth	r2, r2
 8006046:	1a12      	subs	r2, r2, r0
 8006048:	445a      	add	r2, fp
 800604a:	f8de 0000 	ldr.w	r0, [lr]
 800604e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006052:	b29b      	uxth	r3, r3
 8006054:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006058:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800605c:	b292      	uxth	r2, r2
 800605e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006062:	45e1      	cmp	r9, ip
 8006064:	f84e 2b04 	str.w	r2, [lr], #4
 8006068:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800606c:	d2de      	bcs.n	800602c <quorem+0x42>
 800606e:	9b00      	ldr	r3, [sp, #0]
 8006070:	58eb      	ldr	r3, [r5, r3]
 8006072:	b92b      	cbnz	r3, 8006080 <quorem+0x96>
 8006074:	9b01      	ldr	r3, [sp, #4]
 8006076:	3b04      	subs	r3, #4
 8006078:	429d      	cmp	r5, r3
 800607a:	461a      	mov	r2, r3
 800607c:	d32f      	bcc.n	80060de <quorem+0xf4>
 800607e:	613c      	str	r4, [r7, #16]
 8006080:	4638      	mov	r0, r7
 8006082:	f001 f90d 	bl	80072a0 <__mcmp>
 8006086:	2800      	cmp	r0, #0
 8006088:	db25      	blt.n	80060d6 <quorem+0xec>
 800608a:	4629      	mov	r1, r5
 800608c:	2000      	movs	r0, #0
 800608e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006092:	f8d1 c000 	ldr.w	ip, [r1]
 8006096:	fa1f fe82 	uxth.w	lr, r2
 800609a:	fa1f f38c 	uxth.w	r3, ip
 800609e:	eba3 030e 	sub.w	r3, r3, lr
 80060a2:	4403      	add	r3, r0
 80060a4:	0c12      	lsrs	r2, r2, #16
 80060a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80060aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060b4:	45c1      	cmp	r9, r8
 80060b6:	f841 3b04 	str.w	r3, [r1], #4
 80060ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060be:	d2e6      	bcs.n	800608e <quorem+0xa4>
 80060c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060c8:	b922      	cbnz	r2, 80060d4 <quorem+0xea>
 80060ca:	3b04      	subs	r3, #4
 80060cc:	429d      	cmp	r5, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	d30b      	bcc.n	80060ea <quorem+0x100>
 80060d2:	613c      	str	r4, [r7, #16]
 80060d4:	3601      	adds	r6, #1
 80060d6:	4630      	mov	r0, r6
 80060d8:	b003      	add	sp, #12
 80060da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	3b04      	subs	r3, #4
 80060e2:	2a00      	cmp	r2, #0
 80060e4:	d1cb      	bne.n	800607e <quorem+0x94>
 80060e6:	3c01      	subs	r4, #1
 80060e8:	e7c6      	b.n	8006078 <quorem+0x8e>
 80060ea:	6812      	ldr	r2, [r2, #0]
 80060ec:	3b04      	subs	r3, #4
 80060ee:	2a00      	cmp	r2, #0
 80060f0:	d1ef      	bne.n	80060d2 <quorem+0xe8>
 80060f2:	3c01      	subs	r4, #1
 80060f4:	e7ea      	b.n	80060cc <quorem+0xe2>
 80060f6:	2000      	movs	r0, #0
 80060f8:	e7ee      	b.n	80060d8 <quorem+0xee>
 80060fa:	0000      	movs	r0, r0
 80060fc:	0000      	movs	r0, r0
	...

08006100 <_dtoa_r>:
 8006100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006104:	ed2d 8b02 	vpush	{d8}
 8006108:	69c7      	ldr	r7, [r0, #28]
 800610a:	b091      	sub	sp, #68	@ 0x44
 800610c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006110:	ec55 4b10 	vmov	r4, r5, d0
 8006114:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8006116:	9107      	str	r1, [sp, #28]
 8006118:	4681      	mov	r9, r0
 800611a:	9209      	str	r2, [sp, #36]	@ 0x24
 800611c:	930d      	str	r3, [sp, #52]	@ 0x34
 800611e:	b97f      	cbnz	r7, 8006140 <_dtoa_r+0x40>
 8006120:	2010      	movs	r0, #16
 8006122:	f000 fd8d 	bl	8006c40 <malloc>
 8006126:	4602      	mov	r2, r0
 8006128:	f8c9 001c 	str.w	r0, [r9, #28]
 800612c:	b920      	cbnz	r0, 8006138 <_dtoa_r+0x38>
 800612e:	4ba0      	ldr	r3, [pc, #640]	@ (80063b0 <_dtoa_r+0x2b0>)
 8006130:	21ef      	movs	r1, #239	@ 0xef
 8006132:	48a0      	ldr	r0, [pc, #640]	@ (80063b4 <_dtoa_r+0x2b4>)
 8006134:	f001 fc4c 	bl	80079d0 <__assert_func>
 8006138:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800613c:	6007      	str	r7, [r0, #0]
 800613e:	60c7      	str	r7, [r0, #12]
 8006140:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006144:	6819      	ldr	r1, [r3, #0]
 8006146:	b159      	cbz	r1, 8006160 <_dtoa_r+0x60>
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	604a      	str	r2, [r1, #4]
 800614c:	2301      	movs	r3, #1
 800614e:	4093      	lsls	r3, r2
 8006150:	608b      	str	r3, [r1, #8]
 8006152:	4648      	mov	r0, r9
 8006154:	f000 fe6a 	bl	8006e2c <_Bfree>
 8006158:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	1e2b      	subs	r3, r5, #0
 8006162:	bfbb      	ittet	lt
 8006164:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006168:	9303      	strlt	r3, [sp, #12]
 800616a:	2300      	movge	r3, #0
 800616c:	2201      	movlt	r2, #1
 800616e:	bfac      	ite	ge
 8006170:	6033      	strge	r3, [r6, #0]
 8006172:	6032      	strlt	r2, [r6, #0]
 8006174:	4b90      	ldr	r3, [pc, #576]	@ (80063b8 <_dtoa_r+0x2b8>)
 8006176:	9e03      	ldr	r6, [sp, #12]
 8006178:	43b3      	bics	r3, r6
 800617a:	d110      	bne.n	800619e <_dtoa_r+0x9e>
 800617c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800617e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8006188:	4323      	orrs	r3, r4
 800618a:	f000 84de 	beq.w	8006b4a <_dtoa_r+0xa4a>
 800618e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006190:	4f8a      	ldr	r7, [pc, #552]	@ (80063bc <_dtoa_r+0x2bc>)
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 84e0 	beq.w	8006b58 <_dtoa_r+0xa58>
 8006198:	1cfb      	adds	r3, r7, #3
 800619a:	f000 bcdb 	b.w	8006b54 <_dtoa_r+0xa54>
 800619e:	ed9d 8b02 	vldr	d8, [sp, #8]
 80061a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80061a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061aa:	d10a      	bne.n	80061c2 <_dtoa_r+0xc2>
 80061ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80061ae:	2301      	movs	r3, #1
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80061b4:	b113      	cbz	r3, 80061bc <_dtoa_r+0xbc>
 80061b6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80061b8:	4b81      	ldr	r3, [pc, #516]	@ (80063c0 <_dtoa_r+0x2c0>)
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	4f81      	ldr	r7, [pc, #516]	@ (80063c4 <_dtoa_r+0x2c4>)
 80061be:	f000 bccb 	b.w	8006b58 <_dtoa_r+0xa58>
 80061c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80061c4:	a90f      	add	r1, sp, #60	@ 0x3c
 80061c6:	4648      	mov	r0, r9
 80061c8:	eeb0 0b48 	vmov.f64	d0, d8
 80061cc:	f001 f918 	bl	8007400 <__d2b>
 80061d0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80061d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061d6:	9001      	str	r0, [sp, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d045      	beq.n	8006268 <_dtoa_r+0x168>
 80061dc:	eeb0 7b48 	vmov.f64	d7, d8
 80061e0:	ee18 1a90 	vmov	r1, s17
 80061e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80061e8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80061ec:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80061f0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80061f4:	2500      	movs	r5, #0
 80061f6:	ee07 1a90 	vmov	s15, r1
 80061fa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80061fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006398 <_dtoa_r+0x298>
 8006202:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006206:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80063a0 <_dtoa_r+0x2a0>
 800620a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800620e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80063a8 <_dtoa_r+0x2a8>
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800621a:	eeb0 7b46 	vmov.f64	d7, d6
 800621e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006222:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006226:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800622a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622e:	ee16 8a90 	vmov	r8, s13
 8006232:	d508      	bpl.n	8006246 <_dtoa_r+0x146>
 8006234:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006238:	eeb4 6b47 	vcmp.f64	d6, d7
 800623c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006240:	bf18      	it	ne
 8006242:	f108 38ff 	addne.w	r8, r8, #4294967295
 8006246:	f1b8 0f16 	cmp.w	r8, #22
 800624a:	d82b      	bhi.n	80062a4 <_dtoa_r+0x1a4>
 800624c:	495e      	ldr	r1, [pc, #376]	@ (80063c8 <_dtoa_r+0x2c8>)
 800624e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8006252:	ed91 7b00 	vldr	d7, [r1]
 8006256:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800625a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625e:	d501      	bpl.n	8006264 <_dtoa_r+0x164>
 8006260:	f108 38ff 	add.w	r8, r8, #4294967295
 8006264:	2100      	movs	r1, #0
 8006266:	e01e      	b.n	80062a6 <_dtoa_r+0x1a6>
 8006268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800626a:	4413      	add	r3, r2
 800626c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8006270:	2920      	cmp	r1, #32
 8006272:	bfc1      	itttt	gt
 8006274:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8006278:	408e      	lslgt	r6, r1
 800627a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800627e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8006282:	bfd6      	itet	le
 8006284:	f1c1 0120 	rsble	r1, r1, #32
 8006288:	4331      	orrgt	r1, r6
 800628a:	fa04 f101 	lslle.w	r1, r4, r1
 800628e:	ee07 1a90 	vmov	s15, r1
 8006292:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006296:	3b01      	subs	r3, #1
 8006298:	ee17 1a90 	vmov	r1, s15
 800629c:	2501      	movs	r5, #1
 800629e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80062a2:	e7a8      	b.n	80061f6 <_dtoa_r+0xf6>
 80062a4:	2101      	movs	r1, #1
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	1e53      	subs	r3, r2, #1
 80062aa:	9306      	str	r3, [sp, #24]
 80062ac:	bf45      	ittet	mi
 80062ae:	f1c2 0301 	rsbmi	r3, r2, #1
 80062b2:	9305      	strmi	r3, [sp, #20]
 80062b4:	2300      	movpl	r3, #0
 80062b6:	2300      	movmi	r3, #0
 80062b8:	bf4c      	ite	mi
 80062ba:	9306      	strmi	r3, [sp, #24]
 80062bc:	9305      	strpl	r3, [sp, #20]
 80062be:	f1b8 0f00 	cmp.w	r8, #0
 80062c2:	910c      	str	r1, [sp, #48]	@ 0x30
 80062c4:	db18      	blt.n	80062f8 <_dtoa_r+0x1f8>
 80062c6:	9b06      	ldr	r3, [sp, #24]
 80062c8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80062cc:	4443      	add	r3, r8
 80062ce:	9306      	str	r3, [sp, #24]
 80062d0:	2300      	movs	r3, #0
 80062d2:	9a07      	ldr	r2, [sp, #28]
 80062d4:	2a09      	cmp	r2, #9
 80062d6:	d849      	bhi.n	800636c <_dtoa_r+0x26c>
 80062d8:	2a05      	cmp	r2, #5
 80062da:	bfc4      	itt	gt
 80062dc:	3a04      	subgt	r2, #4
 80062de:	9207      	strgt	r2, [sp, #28]
 80062e0:	9a07      	ldr	r2, [sp, #28]
 80062e2:	f1a2 0202 	sub.w	r2, r2, #2
 80062e6:	bfcc      	ite	gt
 80062e8:	2400      	movgt	r4, #0
 80062ea:	2401      	movle	r4, #1
 80062ec:	2a03      	cmp	r2, #3
 80062ee:	d848      	bhi.n	8006382 <_dtoa_r+0x282>
 80062f0:	e8df f002 	tbb	[pc, r2]
 80062f4:	3a2c2e0b 	.word	0x3a2c2e0b
 80062f8:	9b05      	ldr	r3, [sp, #20]
 80062fa:	2200      	movs	r2, #0
 80062fc:	eba3 0308 	sub.w	r3, r3, r8
 8006300:	9305      	str	r3, [sp, #20]
 8006302:	920a      	str	r2, [sp, #40]	@ 0x28
 8006304:	f1c8 0300 	rsb	r3, r8, #0
 8006308:	e7e3      	b.n	80062d2 <_dtoa_r+0x1d2>
 800630a:	2200      	movs	r2, #0
 800630c:	9208      	str	r2, [sp, #32]
 800630e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006310:	2a00      	cmp	r2, #0
 8006312:	dc39      	bgt.n	8006388 <_dtoa_r+0x288>
 8006314:	f04f 0b01 	mov.w	fp, #1
 8006318:	46da      	mov	sl, fp
 800631a:	465a      	mov	r2, fp
 800631c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8006320:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8006324:	2100      	movs	r1, #0
 8006326:	2004      	movs	r0, #4
 8006328:	f100 0614 	add.w	r6, r0, #20
 800632c:	4296      	cmp	r6, r2
 800632e:	d930      	bls.n	8006392 <_dtoa_r+0x292>
 8006330:	6079      	str	r1, [r7, #4]
 8006332:	4648      	mov	r0, r9
 8006334:	9304      	str	r3, [sp, #16]
 8006336:	f000 fd39 	bl	8006dac <_Balloc>
 800633a:	9b04      	ldr	r3, [sp, #16]
 800633c:	4607      	mov	r7, r0
 800633e:	2800      	cmp	r0, #0
 8006340:	d146      	bne.n	80063d0 <_dtoa_r+0x2d0>
 8006342:	4b22      	ldr	r3, [pc, #136]	@ (80063cc <_dtoa_r+0x2cc>)
 8006344:	4602      	mov	r2, r0
 8006346:	f240 11af 	movw	r1, #431	@ 0x1af
 800634a:	e6f2      	b.n	8006132 <_dtoa_r+0x32>
 800634c:	2201      	movs	r2, #1
 800634e:	e7dd      	b.n	800630c <_dtoa_r+0x20c>
 8006350:	2200      	movs	r2, #0
 8006352:	9208      	str	r2, [sp, #32]
 8006354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006356:	eb08 0b02 	add.w	fp, r8, r2
 800635a:	f10b 0a01 	add.w	sl, fp, #1
 800635e:	4652      	mov	r2, sl
 8006360:	2a01      	cmp	r2, #1
 8006362:	bfb8      	it	lt
 8006364:	2201      	movlt	r2, #1
 8006366:	e7db      	b.n	8006320 <_dtoa_r+0x220>
 8006368:	2201      	movs	r2, #1
 800636a:	e7f2      	b.n	8006352 <_dtoa_r+0x252>
 800636c:	2401      	movs	r4, #1
 800636e:	2200      	movs	r2, #0
 8006370:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8006374:	f04f 3bff 	mov.w	fp, #4294967295
 8006378:	2100      	movs	r1, #0
 800637a:	46da      	mov	sl, fp
 800637c:	2212      	movs	r2, #18
 800637e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006380:	e7ce      	b.n	8006320 <_dtoa_r+0x220>
 8006382:	2201      	movs	r2, #1
 8006384:	9208      	str	r2, [sp, #32]
 8006386:	e7f5      	b.n	8006374 <_dtoa_r+0x274>
 8006388:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800638c:	46da      	mov	sl, fp
 800638e:	465a      	mov	r2, fp
 8006390:	e7c6      	b.n	8006320 <_dtoa_r+0x220>
 8006392:	3101      	adds	r1, #1
 8006394:	0040      	lsls	r0, r0, #1
 8006396:	e7c7      	b.n	8006328 <_dtoa_r+0x228>
 8006398:	636f4361 	.word	0x636f4361
 800639c:	3fd287a7 	.word	0x3fd287a7
 80063a0:	8b60c8b3 	.word	0x8b60c8b3
 80063a4:	3fc68a28 	.word	0x3fc68a28
 80063a8:	509f79fb 	.word	0x509f79fb
 80063ac:	3fd34413 	.word	0x3fd34413
 80063b0:	08007d41 	.word	0x08007d41
 80063b4:	08007d58 	.word	0x08007d58
 80063b8:	7ff00000 	.word	0x7ff00000
 80063bc:	08007d3d 	.word	0x08007d3d
 80063c0:	08007d11 	.word	0x08007d11
 80063c4:	08007d10 	.word	0x08007d10
 80063c8:	08007e50 	.word	0x08007e50
 80063cc:	08007db0 	.word	0x08007db0
 80063d0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80063d4:	f1ba 0f0e 	cmp.w	sl, #14
 80063d8:	6010      	str	r0, [r2, #0]
 80063da:	d86f      	bhi.n	80064bc <_dtoa_r+0x3bc>
 80063dc:	2c00      	cmp	r4, #0
 80063de:	d06d      	beq.n	80064bc <_dtoa_r+0x3bc>
 80063e0:	f1b8 0f00 	cmp.w	r8, #0
 80063e4:	f340 80c2 	ble.w	800656c <_dtoa_r+0x46c>
 80063e8:	4aca      	ldr	r2, [pc, #808]	@ (8006714 <_dtoa_r+0x614>)
 80063ea:	f008 010f 	and.w	r1, r8, #15
 80063ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80063f2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80063f6:	ed92 7b00 	vldr	d7, [r2]
 80063fa:	ea4f 1128 	mov.w	r1, r8, asr #4
 80063fe:	f000 80a9 	beq.w	8006554 <_dtoa_r+0x454>
 8006402:	4ac5      	ldr	r2, [pc, #788]	@ (8006718 <_dtoa_r+0x618>)
 8006404:	ed92 6b08 	vldr	d6, [r2, #32]
 8006408:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800640c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006410:	f001 010f 	and.w	r1, r1, #15
 8006414:	2203      	movs	r2, #3
 8006416:	48c0      	ldr	r0, [pc, #768]	@ (8006718 <_dtoa_r+0x618>)
 8006418:	2900      	cmp	r1, #0
 800641a:	f040 809d 	bne.w	8006558 <_dtoa_r+0x458>
 800641e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006422:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006426:	ed8d 7b02 	vstr	d7, [sp, #8]
 800642a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800642c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006430:	2900      	cmp	r1, #0
 8006432:	f000 80c1 	beq.w	80065b8 <_dtoa_r+0x4b8>
 8006436:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800643a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800643e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006442:	f140 80b9 	bpl.w	80065b8 <_dtoa_r+0x4b8>
 8006446:	f1ba 0f00 	cmp.w	sl, #0
 800644a:	f000 80b5 	beq.w	80065b8 <_dtoa_r+0x4b8>
 800644e:	f1bb 0f00 	cmp.w	fp, #0
 8006452:	dd31      	ble.n	80064b8 <_dtoa_r+0x3b8>
 8006454:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006458:	ee27 7b06 	vmul.f64	d7, d7, d6
 800645c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006460:	f108 31ff 	add.w	r1, r8, #4294967295
 8006464:	9104      	str	r1, [sp, #16]
 8006466:	3201      	adds	r2, #1
 8006468:	465c      	mov	r4, fp
 800646a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800646e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8006472:	ee07 2a90 	vmov	s15, r2
 8006476:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800647a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800647e:	ee15 2a90 	vmov	r2, s11
 8006482:	ec51 0b15 	vmov	r0, r1, d5
 8006486:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800648a:	2c00      	cmp	r4, #0
 800648c:	f040 8098 	bne.w	80065c0 <_dtoa_r+0x4c0>
 8006490:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8006494:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006498:	ec41 0b17 	vmov	d7, r0, r1
 800649c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80064a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a4:	f300 8261 	bgt.w	800696a <_dtoa_r+0x86a>
 80064a8:	eeb1 7b47 	vneg.f64	d7, d7
 80064ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80064b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b4:	f100 80f5 	bmi.w	80066a2 <_dtoa_r+0x5a2>
 80064b8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80064bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80064be:	2a00      	cmp	r2, #0
 80064c0:	f2c0 812c 	blt.w	800671c <_dtoa_r+0x61c>
 80064c4:	f1b8 0f0e 	cmp.w	r8, #14
 80064c8:	f300 8128 	bgt.w	800671c <_dtoa_r+0x61c>
 80064cc:	4b91      	ldr	r3, [pc, #580]	@ (8006714 <_dtoa_r+0x614>)
 80064ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80064d2:	ed93 6b00 	vldr	d6, [r3]
 80064d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d8:	2b00      	cmp	r3, #0
 80064da:	da03      	bge.n	80064e4 <_dtoa_r+0x3e4>
 80064dc:	f1ba 0f00 	cmp.w	sl, #0
 80064e0:	f340 80d2 	ble.w	8006688 <_dtoa_r+0x588>
 80064e4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80064e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064ec:	463e      	mov	r6, r7
 80064ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80064f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80064f6:	ee15 3a10 	vmov	r3, s10
 80064fa:	3330      	adds	r3, #48	@ 0x30
 80064fc:	f806 3b01 	strb.w	r3, [r6], #1
 8006500:	1bf3      	subs	r3, r6, r7
 8006502:	459a      	cmp	sl, r3
 8006504:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006508:	eea3 7b46 	vfms.f64	d7, d3, d6
 800650c:	f040 80f8 	bne.w	8006700 <_dtoa_r+0x600>
 8006510:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006514:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651c:	f300 80dd 	bgt.w	80066da <_dtoa_r+0x5da>
 8006520:	eeb4 7b46 	vcmp.f64	d7, d6
 8006524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006528:	d104      	bne.n	8006534 <_dtoa_r+0x434>
 800652a:	ee15 3a10 	vmov	r3, s10
 800652e:	07db      	lsls	r3, r3, #31
 8006530:	f100 80d3 	bmi.w	80066da <_dtoa_r+0x5da>
 8006534:	9901      	ldr	r1, [sp, #4]
 8006536:	4648      	mov	r0, r9
 8006538:	f000 fc78 	bl	8006e2c <_Bfree>
 800653c:	2300      	movs	r3, #0
 800653e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006540:	7033      	strb	r3, [r6, #0]
 8006542:	f108 0301 	add.w	r3, r8, #1
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 8304 	beq.w	8006b58 <_dtoa_r+0xa58>
 8006550:	601e      	str	r6, [r3, #0]
 8006552:	e301      	b.n	8006b58 <_dtoa_r+0xa58>
 8006554:	2202      	movs	r2, #2
 8006556:	e75e      	b.n	8006416 <_dtoa_r+0x316>
 8006558:	07cc      	lsls	r4, r1, #31
 800655a:	d504      	bpl.n	8006566 <_dtoa_r+0x466>
 800655c:	ed90 6b00 	vldr	d6, [r0]
 8006560:	3201      	adds	r2, #1
 8006562:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006566:	1049      	asrs	r1, r1, #1
 8006568:	3008      	adds	r0, #8
 800656a:	e755      	b.n	8006418 <_dtoa_r+0x318>
 800656c:	d022      	beq.n	80065b4 <_dtoa_r+0x4b4>
 800656e:	f1c8 0100 	rsb	r1, r8, #0
 8006572:	4a68      	ldr	r2, [pc, #416]	@ (8006714 <_dtoa_r+0x614>)
 8006574:	f001 000f 	and.w	r0, r1, #15
 8006578:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800657c:	ed92 7b00 	vldr	d7, [r2]
 8006580:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006584:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006588:	4863      	ldr	r0, [pc, #396]	@ (8006718 <_dtoa_r+0x618>)
 800658a:	1109      	asrs	r1, r1, #4
 800658c:	2400      	movs	r4, #0
 800658e:	2202      	movs	r2, #2
 8006590:	b929      	cbnz	r1, 800659e <_dtoa_r+0x49e>
 8006592:	2c00      	cmp	r4, #0
 8006594:	f43f af49 	beq.w	800642a <_dtoa_r+0x32a>
 8006598:	ed8d 7b02 	vstr	d7, [sp, #8]
 800659c:	e745      	b.n	800642a <_dtoa_r+0x32a>
 800659e:	07ce      	lsls	r6, r1, #31
 80065a0:	d505      	bpl.n	80065ae <_dtoa_r+0x4ae>
 80065a2:	ed90 6b00 	vldr	d6, [r0]
 80065a6:	3201      	adds	r2, #1
 80065a8:	2401      	movs	r4, #1
 80065aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80065ae:	1049      	asrs	r1, r1, #1
 80065b0:	3008      	adds	r0, #8
 80065b2:	e7ed      	b.n	8006590 <_dtoa_r+0x490>
 80065b4:	2202      	movs	r2, #2
 80065b6:	e738      	b.n	800642a <_dtoa_r+0x32a>
 80065b8:	f8cd 8010 	str.w	r8, [sp, #16]
 80065bc:	4654      	mov	r4, sl
 80065be:	e754      	b.n	800646a <_dtoa_r+0x36a>
 80065c0:	4a54      	ldr	r2, [pc, #336]	@ (8006714 <_dtoa_r+0x614>)
 80065c2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80065c6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80065ca:	9a08      	ldr	r2, [sp, #32]
 80065cc:	ec41 0b17 	vmov	d7, r0, r1
 80065d0:	443c      	add	r4, r7
 80065d2:	b34a      	cbz	r2, 8006628 <_dtoa_r+0x528>
 80065d4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80065d8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80065dc:	463e      	mov	r6, r7
 80065de:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80065e2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80065e6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80065ea:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80065ee:	ee14 2a90 	vmov	r2, s9
 80065f2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80065f6:	3230      	adds	r2, #48	@ 0x30
 80065f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80065fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006604:	f806 2b01 	strb.w	r2, [r6], #1
 8006608:	d438      	bmi.n	800667c <_dtoa_r+0x57c>
 800660a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800660e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006616:	d462      	bmi.n	80066de <_dtoa_r+0x5de>
 8006618:	42a6      	cmp	r6, r4
 800661a:	f43f af4d 	beq.w	80064b8 <_dtoa_r+0x3b8>
 800661e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006622:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006626:	e7e0      	b.n	80065ea <_dtoa_r+0x4ea>
 8006628:	4621      	mov	r1, r4
 800662a:	463e      	mov	r6, r7
 800662c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006630:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006634:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006638:	ee14 2a90 	vmov	r2, s9
 800663c:	3230      	adds	r2, #48	@ 0x30
 800663e:	f806 2b01 	strb.w	r2, [r6], #1
 8006642:	42a6      	cmp	r6, r4
 8006644:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006648:	ee36 6b45 	vsub.f64	d6, d6, d5
 800664c:	d119      	bne.n	8006682 <_dtoa_r+0x582>
 800664e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8006652:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006656:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800665a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665e:	dc3e      	bgt.n	80066de <_dtoa_r+0x5de>
 8006660:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006664:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666c:	f57f af24 	bpl.w	80064b8 <_dtoa_r+0x3b8>
 8006670:	460e      	mov	r6, r1
 8006672:	3901      	subs	r1, #1
 8006674:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006678:	2b30      	cmp	r3, #48	@ 0x30
 800667a:	d0f9      	beq.n	8006670 <_dtoa_r+0x570>
 800667c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006680:	e758      	b.n	8006534 <_dtoa_r+0x434>
 8006682:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006686:	e7d5      	b.n	8006634 <_dtoa_r+0x534>
 8006688:	d10b      	bne.n	80066a2 <_dtoa_r+0x5a2>
 800668a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800668e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006692:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006696:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800669a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669e:	f2c0 8161 	blt.w	8006964 <_dtoa_r+0x864>
 80066a2:	2400      	movs	r4, #0
 80066a4:	4625      	mov	r5, r4
 80066a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a8:	43db      	mvns	r3, r3
 80066aa:	9304      	str	r3, [sp, #16]
 80066ac:	463e      	mov	r6, r7
 80066ae:	f04f 0800 	mov.w	r8, #0
 80066b2:	4621      	mov	r1, r4
 80066b4:	4648      	mov	r0, r9
 80066b6:	f000 fbb9 	bl	8006e2c <_Bfree>
 80066ba:	2d00      	cmp	r5, #0
 80066bc:	d0de      	beq.n	800667c <_dtoa_r+0x57c>
 80066be:	f1b8 0f00 	cmp.w	r8, #0
 80066c2:	d005      	beq.n	80066d0 <_dtoa_r+0x5d0>
 80066c4:	45a8      	cmp	r8, r5
 80066c6:	d003      	beq.n	80066d0 <_dtoa_r+0x5d0>
 80066c8:	4641      	mov	r1, r8
 80066ca:	4648      	mov	r0, r9
 80066cc:	f000 fbae 	bl	8006e2c <_Bfree>
 80066d0:	4629      	mov	r1, r5
 80066d2:	4648      	mov	r0, r9
 80066d4:	f000 fbaa 	bl	8006e2c <_Bfree>
 80066d8:	e7d0      	b.n	800667c <_dtoa_r+0x57c>
 80066da:	f8cd 8010 	str.w	r8, [sp, #16]
 80066de:	4633      	mov	r3, r6
 80066e0:	461e      	mov	r6, r3
 80066e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066e6:	2a39      	cmp	r2, #57	@ 0x39
 80066e8:	d106      	bne.n	80066f8 <_dtoa_r+0x5f8>
 80066ea:	429f      	cmp	r7, r3
 80066ec:	d1f8      	bne.n	80066e0 <_dtoa_r+0x5e0>
 80066ee:	9a04      	ldr	r2, [sp, #16]
 80066f0:	3201      	adds	r2, #1
 80066f2:	9204      	str	r2, [sp, #16]
 80066f4:	2230      	movs	r2, #48	@ 0x30
 80066f6:	703a      	strb	r2, [r7, #0]
 80066f8:	781a      	ldrb	r2, [r3, #0]
 80066fa:	3201      	adds	r2, #1
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	e7bd      	b.n	800667c <_dtoa_r+0x57c>
 8006700:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006704:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800670c:	f47f aeef 	bne.w	80064ee <_dtoa_r+0x3ee>
 8006710:	e710      	b.n	8006534 <_dtoa_r+0x434>
 8006712:	bf00      	nop
 8006714:	08007e50 	.word	0x08007e50
 8006718:	08007e28 	.word	0x08007e28
 800671c:	9908      	ldr	r1, [sp, #32]
 800671e:	2900      	cmp	r1, #0
 8006720:	f000 80e3 	beq.w	80068ea <_dtoa_r+0x7ea>
 8006724:	9907      	ldr	r1, [sp, #28]
 8006726:	2901      	cmp	r1, #1
 8006728:	f300 80c8 	bgt.w	80068bc <_dtoa_r+0x7bc>
 800672c:	2d00      	cmp	r5, #0
 800672e:	f000 80c1 	beq.w	80068b4 <_dtoa_r+0x7b4>
 8006732:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006736:	9e05      	ldr	r6, [sp, #20]
 8006738:	461c      	mov	r4, r3
 800673a:	9304      	str	r3, [sp, #16]
 800673c:	9b05      	ldr	r3, [sp, #20]
 800673e:	4413      	add	r3, r2
 8006740:	9305      	str	r3, [sp, #20]
 8006742:	9b06      	ldr	r3, [sp, #24]
 8006744:	2101      	movs	r1, #1
 8006746:	4413      	add	r3, r2
 8006748:	4648      	mov	r0, r9
 800674a:	9306      	str	r3, [sp, #24]
 800674c:	f000 fc22 	bl	8006f94 <__i2b>
 8006750:	9b04      	ldr	r3, [sp, #16]
 8006752:	4605      	mov	r5, r0
 8006754:	b166      	cbz	r6, 8006770 <_dtoa_r+0x670>
 8006756:	9a06      	ldr	r2, [sp, #24]
 8006758:	2a00      	cmp	r2, #0
 800675a:	dd09      	ble.n	8006770 <_dtoa_r+0x670>
 800675c:	42b2      	cmp	r2, r6
 800675e:	9905      	ldr	r1, [sp, #20]
 8006760:	bfa8      	it	ge
 8006762:	4632      	movge	r2, r6
 8006764:	1a89      	subs	r1, r1, r2
 8006766:	9105      	str	r1, [sp, #20]
 8006768:	9906      	ldr	r1, [sp, #24]
 800676a:	1ab6      	subs	r6, r6, r2
 800676c:	1a8a      	subs	r2, r1, r2
 800676e:	9206      	str	r2, [sp, #24]
 8006770:	b1fb      	cbz	r3, 80067b2 <_dtoa_r+0x6b2>
 8006772:	9a08      	ldr	r2, [sp, #32]
 8006774:	2a00      	cmp	r2, #0
 8006776:	f000 80bc 	beq.w	80068f2 <_dtoa_r+0x7f2>
 800677a:	b19c      	cbz	r4, 80067a4 <_dtoa_r+0x6a4>
 800677c:	4629      	mov	r1, r5
 800677e:	4622      	mov	r2, r4
 8006780:	4648      	mov	r0, r9
 8006782:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006784:	f000 fcc6 	bl	8007114 <__pow5mult>
 8006788:	9a01      	ldr	r2, [sp, #4]
 800678a:	4601      	mov	r1, r0
 800678c:	4605      	mov	r5, r0
 800678e:	4648      	mov	r0, r9
 8006790:	f000 fc16 	bl	8006fc0 <__multiply>
 8006794:	9901      	ldr	r1, [sp, #4]
 8006796:	9004      	str	r0, [sp, #16]
 8006798:	4648      	mov	r0, r9
 800679a:	f000 fb47 	bl	8006e2c <_Bfree>
 800679e:	9a04      	ldr	r2, [sp, #16]
 80067a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067a2:	9201      	str	r2, [sp, #4]
 80067a4:	1b1a      	subs	r2, r3, r4
 80067a6:	d004      	beq.n	80067b2 <_dtoa_r+0x6b2>
 80067a8:	9901      	ldr	r1, [sp, #4]
 80067aa:	4648      	mov	r0, r9
 80067ac:	f000 fcb2 	bl	8007114 <__pow5mult>
 80067b0:	9001      	str	r0, [sp, #4]
 80067b2:	2101      	movs	r1, #1
 80067b4:	4648      	mov	r0, r9
 80067b6:	f000 fbed 	bl	8006f94 <__i2b>
 80067ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067bc:	4604      	mov	r4, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 81d0 	beq.w	8006b64 <_dtoa_r+0xa64>
 80067c4:	461a      	mov	r2, r3
 80067c6:	4601      	mov	r1, r0
 80067c8:	4648      	mov	r0, r9
 80067ca:	f000 fca3 	bl	8007114 <__pow5mult>
 80067ce:	9b07      	ldr	r3, [sp, #28]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	4604      	mov	r4, r0
 80067d4:	f300 8095 	bgt.w	8006902 <_dtoa_r+0x802>
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f040 808b 	bne.w	80068f6 <_dtoa_r+0x7f6>
 80067e0:	9b03      	ldr	r3, [sp, #12]
 80067e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80067e6:	2a00      	cmp	r2, #0
 80067e8:	f040 8087 	bne.w	80068fa <_dtoa_r+0x7fa>
 80067ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80067f0:	0d12      	lsrs	r2, r2, #20
 80067f2:	0512      	lsls	r2, r2, #20
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	f000 8082 	beq.w	80068fe <_dtoa_r+0x7fe>
 80067fa:	9b05      	ldr	r3, [sp, #20]
 80067fc:	3301      	adds	r3, #1
 80067fe:	9305      	str	r3, [sp, #20]
 8006800:	9b06      	ldr	r3, [sp, #24]
 8006802:	3301      	adds	r3, #1
 8006804:	9306      	str	r3, [sp, #24]
 8006806:	2301      	movs	r3, #1
 8006808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800680a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 81af 	beq.w	8006b70 <_dtoa_r+0xa70>
 8006812:	6922      	ldr	r2, [r4, #16]
 8006814:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006818:	6910      	ldr	r0, [r2, #16]
 800681a:	f000 fb6f 	bl	8006efc <__hi0bits>
 800681e:	f1c0 0020 	rsb	r0, r0, #32
 8006822:	9b06      	ldr	r3, [sp, #24]
 8006824:	4418      	add	r0, r3
 8006826:	f010 001f 	ands.w	r0, r0, #31
 800682a:	d076      	beq.n	800691a <_dtoa_r+0x81a>
 800682c:	f1c0 0220 	rsb	r2, r0, #32
 8006830:	2a04      	cmp	r2, #4
 8006832:	dd69      	ble.n	8006908 <_dtoa_r+0x808>
 8006834:	9b05      	ldr	r3, [sp, #20]
 8006836:	f1c0 001c 	rsb	r0, r0, #28
 800683a:	4403      	add	r3, r0
 800683c:	9305      	str	r3, [sp, #20]
 800683e:	9b06      	ldr	r3, [sp, #24]
 8006840:	4406      	add	r6, r0
 8006842:	4403      	add	r3, r0
 8006844:	9306      	str	r3, [sp, #24]
 8006846:	9b05      	ldr	r3, [sp, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	dd05      	ble.n	8006858 <_dtoa_r+0x758>
 800684c:	9901      	ldr	r1, [sp, #4]
 800684e:	461a      	mov	r2, r3
 8006850:	4648      	mov	r0, r9
 8006852:	f000 fcb9 	bl	80071c8 <__lshift>
 8006856:	9001      	str	r0, [sp, #4]
 8006858:	9b06      	ldr	r3, [sp, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	dd05      	ble.n	800686a <_dtoa_r+0x76a>
 800685e:	4621      	mov	r1, r4
 8006860:	461a      	mov	r2, r3
 8006862:	4648      	mov	r0, r9
 8006864:	f000 fcb0 	bl	80071c8 <__lshift>
 8006868:	4604      	mov	r4, r0
 800686a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800686c:	2b00      	cmp	r3, #0
 800686e:	d056      	beq.n	800691e <_dtoa_r+0x81e>
 8006870:	9801      	ldr	r0, [sp, #4]
 8006872:	4621      	mov	r1, r4
 8006874:	f000 fd14 	bl	80072a0 <__mcmp>
 8006878:	2800      	cmp	r0, #0
 800687a:	da50      	bge.n	800691e <_dtoa_r+0x81e>
 800687c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006880:	9304      	str	r3, [sp, #16]
 8006882:	9901      	ldr	r1, [sp, #4]
 8006884:	2300      	movs	r3, #0
 8006886:	220a      	movs	r2, #10
 8006888:	4648      	mov	r0, r9
 800688a:	f000 faf1 	bl	8006e70 <__multadd>
 800688e:	9b08      	ldr	r3, [sp, #32]
 8006890:	9001      	str	r0, [sp, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 816e 	beq.w	8006b74 <_dtoa_r+0xa74>
 8006898:	4629      	mov	r1, r5
 800689a:	2300      	movs	r3, #0
 800689c:	220a      	movs	r2, #10
 800689e:	4648      	mov	r0, r9
 80068a0:	f000 fae6 	bl	8006e70 <__multadd>
 80068a4:	f1bb 0f00 	cmp.w	fp, #0
 80068a8:	4605      	mov	r5, r0
 80068aa:	dc64      	bgt.n	8006976 <_dtoa_r+0x876>
 80068ac:	9b07      	ldr	r3, [sp, #28]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	dc3e      	bgt.n	8006930 <_dtoa_r+0x830>
 80068b2:	e060      	b.n	8006976 <_dtoa_r+0x876>
 80068b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80068ba:	e73c      	b.n	8006736 <_dtoa_r+0x636>
 80068bc:	f10a 34ff 	add.w	r4, sl, #4294967295
 80068c0:	42a3      	cmp	r3, r4
 80068c2:	bfbf      	itttt	lt
 80068c4:	1ae2      	sublt	r2, r4, r3
 80068c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80068c8:	189b      	addlt	r3, r3, r2
 80068ca:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80068cc:	bfae      	itee	ge
 80068ce:	1b1c      	subge	r4, r3, r4
 80068d0:	4623      	movlt	r3, r4
 80068d2:	2400      	movlt	r4, #0
 80068d4:	f1ba 0f00 	cmp.w	sl, #0
 80068d8:	bfb5      	itete	lt
 80068da:	9a05      	ldrlt	r2, [sp, #20]
 80068dc:	9e05      	ldrge	r6, [sp, #20]
 80068de:	eba2 060a 	sublt.w	r6, r2, sl
 80068e2:	4652      	movge	r2, sl
 80068e4:	bfb8      	it	lt
 80068e6:	2200      	movlt	r2, #0
 80068e8:	e727      	b.n	800673a <_dtoa_r+0x63a>
 80068ea:	9e05      	ldr	r6, [sp, #20]
 80068ec:	9d08      	ldr	r5, [sp, #32]
 80068ee:	461c      	mov	r4, r3
 80068f0:	e730      	b.n	8006754 <_dtoa_r+0x654>
 80068f2:	461a      	mov	r2, r3
 80068f4:	e758      	b.n	80067a8 <_dtoa_r+0x6a8>
 80068f6:	2300      	movs	r3, #0
 80068f8:	e786      	b.n	8006808 <_dtoa_r+0x708>
 80068fa:	9b02      	ldr	r3, [sp, #8]
 80068fc:	e784      	b.n	8006808 <_dtoa_r+0x708>
 80068fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006900:	e783      	b.n	800680a <_dtoa_r+0x70a>
 8006902:	2300      	movs	r3, #0
 8006904:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006906:	e784      	b.n	8006812 <_dtoa_r+0x712>
 8006908:	d09d      	beq.n	8006846 <_dtoa_r+0x746>
 800690a:	9b05      	ldr	r3, [sp, #20]
 800690c:	321c      	adds	r2, #28
 800690e:	4413      	add	r3, r2
 8006910:	9305      	str	r3, [sp, #20]
 8006912:	9b06      	ldr	r3, [sp, #24]
 8006914:	4416      	add	r6, r2
 8006916:	4413      	add	r3, r2
 8006918:	e794      	b.n	8006844 <_dtoa_r+0x744>
 800691a:	4602      	mov	r2, r0
 800691c:	e7f5      	b.n	800690a <_dtoa_r+0x80a>
 800691e:	f1ba 0f00 	cmp.w	sl, #0
 8006922:	f8cd 8010 	str.w	r8, [sp, #16]
 8006926:	46d3      	mov	fp, sl
 8006928:	dc21      	bgt.n	800696e <_dtoa_r+0x86e>
 800692a:	9b07      	ldr	r3, [sp, #28]
 800692c:	2b02      	cmp	r3, #2
 800692e:	dd1e      	ble.n	800696e <_dtoa_r+0x86e>
 8006930:	f1bb 0f00 	cmp.w	fp, #0
 8006934:	f47f aeb7 	bne.w	80066a6 <_dtoa_r+0x5a6>
 8006938:	4621      	mov	r1, r4
 800693a:	465b      	mov	r3, fp
 800693c:	2205      	movs	r2, #5
 800693e:	4648      	mov	r0, r9
 8006940:	f000 fa96 	bl	8006e70 <__multadd>
 8006944:	4601      	mov	r1, r0
 8006946:	4604      	mov	r4, r0
 8006948:	9801      	ldr	r0, [sp, #4]
 800694a:	f000 fca9 	bl	80072a0 <__mcmp>
 800694e:	2800      	cmp	r0, #0
 8006950:	f77f aea9 	ble.w	80066a6 <_dtoa_r+0x5a6>
 8006954:	463e      	mov	r6, r7
 8006956:	2331      	movs	r3, #49	@ 0x31
 8006958:	f806 3b01 	strb.w	r3, [r6], #1
 800695c:	9b04      	ldr	r3, [sp, #16]
 800695e:	3301      	adds	r3, #1
 8006960:	9304      	str	r3, [sp, #16]
 8006962:	e6a4      	b.n	80066ae <_dtoa_r+0x5ae>
 8006964:	f8cd 8010 	str.w	r8, [sp, #16]
 8006968:	4654      	mov	r4, sl
 800696a:	4625      	mov	r5, r4
 800696c:	e7f2      	b.n	8006954 <_dtoa_r+0x854>
 800696e:	9b08      	ldr	r3, [sp, #32]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8103 	beq.w	8006b7c <_dtoa_r+0xa7c>
 8006976:	2e00      	cmp	r6, #0
 8006978:	dd05      	ble.n	8006986 <_dtoa_r+0x886>
 800697a:	4629      	mov	r1, r5
 800697c:	4632      	mov	r2, r6
 800697e:	4648      	mov	r0, r9
 8006980:	f000 fc22 	bl	80071c8 <__lshift>
 8006984:	4605      	mov	r5, r0
 8006986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d058      	beq.n	8006a3e <_dtoa_r+0x93e>
 800698c:	6869      	ldr	r1, [r5, #4]
 800698e:	4648      	mov	r0, r9
 8006990:	f000 fa0c 	bl	8006dac <_Balloc>
 8006994:	4606      	mov	r6, r0
 8006996:	b928      	cbnz	r0, 80069a4 <_dtoa_r+0x8a4>
 8006998:	4b82      	ldr	r3, [pc, #520]	@ (8006ba4 <_dtoa_r+0xaa4>)
 800699a:	4602      	mov	r2, r0
 800699c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80069a0:	f7ff bbc7 	b.w	8006132 <_dtoa_r+0x32>
 80069a4:	692a      	ldr	r2, [r5, #16]
 80069a6:	3202      	adds	r2, #2
 80069a8:	0092      	lsls	r2, r2, #2
 80069aa:	f105 010c 	add.w	r1, r5, #12
 80069ae:	300c      	adds	r0, #12
 80069b0:	f001 f800 	bl	80079b4 <memcpy>
 80069b4:	2201      	movs	r2, #1
 80069b6:	4631      	mov	r1, r6
 80069b8:	4648      	mov	r0, r9
 80069ba:	f000 fc05 	bl	80071c8 <__lshift>
 80069be:	1c7b      	adds	r3, r7, #1
 80069c0:	9305      	str	r3, [sp, #20]
 80069c2:	eb07 030b 	add.w	r3, r7, fp
 80069c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80069c8:	9b02      	ldr	r3, [sp, #8]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	46a8      	mov	r8, r5
 80069d0:	9308      	str	r3, [sp, #32]
 80069d2:	4605      	mov	r5, r0
 80069d4:	9b05      	ldr	r3, [sp, #20]
 80069d6:	9801      	ldr	r0, [sp, #4]
 80069d8:	4621      	mov	r1, r4
 80069da:	f103 3bff 	add.w	fp, r3, #4294967295
 80069de:	f7ff fb04 	bl	8005fea <quorem>
 80069e2:	4641      	mov	r1, r8
 80069e4:	9002      	str	r0, [sp, #8]
 80069e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80069ea:	9801      	ldr	r0, [sp, #4]
 80069ec:	f000 fc58 	bl	80072a0 <__mcmp>
 80069f0:	462a      	mov	r2, r5
 80069f2:	9006      	str	r0, [sp, #24]
 80069f4:	4621      	mov	r1, r4
 80069f6:	4648      	mov	r0, r9
 80069f8:	f000 fc6e 	bl	80072d8 <__mdiff>
 80069fc:	68c2      	ldr	r2, [r0, #12]
 80069fe:	4606      	mov	r6, r0
 8006a00:	b9fa      	cbnz	r2, 8006a42 <_dtoa_r+0x942>
 8006a02:	4601      	mov	r1, r0
 8006a04:	9801      	ldr	r0, [sp, #4]
 8006a06:	f000 fc4b 	bl	80072a0 <__mcmp>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	4648      	mov	r0, r9
 8006a10:	920a      	str	r2, [sp, #40]	@ 0x28
 8006a12:	f000 fa0b 	bl	8006e2c <_Bfree>
 8006a16:	9b07      	ldr	r3, [sp, #28]
 8006a18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a1a:	9e05      	ldr	r6, [sp, #20]
 8006a1c:	ea43 0102 	orr.w	r1, r3, r2
 8006a20:	9b08      	ldr	r3, [sp, #32]
 8006a22:	4319      	orrs	r1, r3
 8006a24:	d10f      	bne.n	8006a46 <_dtoa_r+0x946>
 8006a26:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006a2a:	d028      	beq.n	8006a7e <_dtoa_r+0x97e>
 8006a2c:	9b06      	ldr	r3, [sp, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	dd02      	ble.n	8006a38 <_dtoa_r+0x938>
 8006a32:	9b02      	ldr	r3, [sp, #8]
 8006a34:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8006a38:	f88b a000 	strb.w	sl, [fp]
 8006a3c:	e639      	b.n	80066b2 <_dtoa_r+0x5b2>
 8006a3e:	4628      	mov	r0, r5
 8006a40:	e7bd      	b.n	80069be <_dtoa_r+0x8be>
 8006a42:	2201      	movs	r2, #1
 8006a44:	e7e2      	b.n	8006a0c <_dtoa_r+0x90c>
 8006a46:	9b06      	ldr	r3, [sp, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	db04      	blt.n	8006a56 <_dtoa_r+0x956>
 8006a4c:	9907      	ldr	r1, [sp, #28]
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	9908      	ldr	r1, [sp, #32]
 8006a52:	430b      	orrs	r3, r1
 8006a54:	d120      	bne.n	8006a98 <_dtoa_r+0x998>
 8006a56:	2a00      	cmp	r2, #0
 8006a58:	ddee      	ble.n	8006a38 <_dtoa_r+0x938>
 8006a5a:	9901      	ldr	r1, [sp, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	4648      	mov	r0, r9
 8006a60:	f000 fbb2 	bl	80071c8 <__lshift>
 8006a64:	4621      	mov	r1, r4
 8006a66:	9001      	str	r0, [sp, #4]
 8006a68:	f000 fc1a 	bl	80072a0 <__mcmp>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	dc03      	bgt.n	8006a78 <_dtoa_r+0x978>
 8006a70:	d1e2      	bne.n	8006a38 <_dtoa_r+0x938>
 8006a72:	f01a 0f01 	tst.w	sl, #1
 8006a76:	d0df      	beq.n	8006a38 <_dtoa_r+0x938>
 8006a78:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006a7c:	d1d9      	bne.n	8006a32 <_dtoa_r+0x932>
 8006a7e:	2339      	movs	r3, #57	@ 0x39
 8006a80:	f88b 3000 	strb.w	r3, [fp]
 8006a84:	4633      	mov	r3, r6
 8006a86:	461e      	mov	r6, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a8e:	2a39      	cmp	r2, #57	@ 0x39
 8006a90:	d053      	beq.n	8006b3a <_dtoa_r+0xa3a>
 8006a92:	3201      	adds	r2, #1
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	e60c      	b.n	80066b2 <_dtoa_r+0x5b2>
 8006a98:	2a00      	cmp	r2, #0
 8006a9a:	dd07      	ble.n	8006aac <_dtoa_r+0x9ac>
 8006a9c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006aa0:	d0ed      	beq.n	8006a7e <_dtoa_r+0x97e>
 8006aa2:	f10a 0301 	add.w	r3, sl, #1
 8006aa6:	f88b 3000 	strb.w	r3, [fp]
 8006aaa:	e602      	b.n	80066b2 <_dtoa_r+0x5b2>
 8006aac:	9b05      	ldr	r3, [sp, #20]
 8006aae:	9a05      	ldr	r2, [sp, #20]
 8006ab0:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d029      	beq.n	8006b0e <_dtoa_r+0xa0e>
 8006aba:	9901      	ldr	r1, [sp, #4]
 8006abc:	2300      	movs	r3, #0
 8006abe:	220a      	movs	r2, #10
 8006ac0:	4648      	mov	r0, r9
 8006ac2:	f000 f9d5 	bl	8006e70 <__multadd>
 8006ac6:	45a8      	cmp	r8, r5
 8006ac8:	9001      	str	r0, [sp, #4]
 8006aca:	f04f 0300 	mov.w	r3, #0
 8006ace:	f04f 020a 	mov.w	r2, #10
 8006ad2:	4641      	mov	r1, r8
 8006ad4:	4648      	mov	r0, r9
 8006ad6:	d107      	bne.n	8006ae8 <_dtoa_r+0x9e8>
 8006ad8:	f000 f9ca 	bl	8006e70 <__multadd>
 8006adc:	4680      	mov	r8, r0
 8006ade:	4605      	mov	r5, r0
 8006ae0:	9b05      	ldr	r3, [sp, #20]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	9305      	str	r3, [sp, #20]
 8006ae6:	e775      	b.n	80069d4 <_dtoa_r+0x8d4>
 8006ae8:	f000 f9c2 	bl	8006e70 <__multadd>
 8006aec:	4629      	mov	r1, r5
 8006aee:	4680      	mov	r8, r0
 8006af0:	2300      	movs	r3, #0
 8006af2:	220a      	movs	r2, #10
 8006af4:	4648      	mov	r0, r9
 8006af6:	f000 f9bb 	bl	8006e70 <__multadd>
 8006afa:	4605      	mov	r5, r0
 8006afc:	e7f0      	b.n	8006ae0 <_dtoa_r+0x9e0>
 8006afe:	f1bb 0f00 	cmp.w	fp, #0
 8006b02:	bfcc      	ite	gt
 8006b04:	465e      	movgt	r6, fp
 8006b06:	2601      	movle	r6, #1
 8006b08:	443e      	add	r6, r7
 8006b0a:	f04f 0800 	mov.w	r8, #0
 8006b0e:	9901      	ldr	r1, [sp, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	4648      	mov	r0, r9
 8006b14:	f000 fb58 	bl	80071c8 <__lshift>
 8006b18:	4621      	mov	r1, r4
 8006b1a:	9001      	str	r0, [sp, #4]
 8006b1c:	f000 fbc0 	bl	80072a0 <__mcmp>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	dcaf      	bgt.n	8006a84 <_dtoa_r+0x984>
 8006b24:	d102      	bne.n	8006b2c <_dtoa_r+0xa2c>
 8006b26:	f01a 0f01 	tst.w	sl, #1
 8006b2a:	d1ab      	bne.n	8006a84 <_dtoa_r+0x984>
 8006b2c:	4633      	mov	r3, r6
 8006b2e:	461e      	mov	r6, r3
 8006b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b34:	2a30      	cmp	r2, #48	@ 0x30
 8006b36:	d0fa      	beq.n	8006b2e <_dtoa_r+0xa2e>
 8006b38:	e5bb      	b.n	80066b2 <_dtoa_r+0x5b2>
 8006b3a:	429f      	cmp	r7, r3
 8006b3c:	d1a3      	bne.n	8006a86 <_dtoa_r+0x986>
 8006b3e:	9b04      	ldr	r3, [sp, #16]
 8006b40:	3301      	adds	r3, #1
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	2331      	movs	r3, #49	@ 0x31
 8006b46:	703b      	strb	r3, [r7, #0]
 8006b48:	e5b3      	b.n	80066b2 <_dtoa_r+0x5b2>
 8006b4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006b4c:	4f16      	ldr	r7, [pc, #88]	@ (8006ba8 <_dtoa_r+0xaa8>)
 8006b4e:	b11b      	cbz	r3, 8006b58 <_dtoa_r+0xa58>
 8006b50:	f107 0308 	add.w	r3, r7, #8
 8006b54:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	4638      	mov	r0, r7
 8006b5a:	b011      	add	sp, #68	@ 0x44
 8006b5c:	ecbd 8b02 	vpop	{d8}
 8006b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b64:	9b07      	ldr	r3, [sp, #28]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	f77f ae36 	ble.w	80067d8 <_dtoa_r+0x6d8>
 8006b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b70:	2001      	movs	r0, #1
 8006b72:	e656      	b.n	8006822 <_dtoa_r+0x722>
 8006b74:	f1bb 0f00 	cmp.w	fp, #0
 8006b78:	f77f aed7 	ble.w	800692a <_dtoa_r+0x82a>
 8006b7c:	463e      	mov	r6, r7
 8006b7e:	9801      	ldr	r0, [sp, #4]
 8006b80:	4621      	mov	r1, r4
 8006b82:	f7ff fa32 	bl	8005fea <quorem>
 8006b86:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006b8a:	f806 ab01 	strb.w	sl, [r6], #1
 8006b8e:	1bf2      	subs	r2, r6, r7
 8006b90:	4593      	cmp	fp, r2
 8006b92:	ddb4      	ble.n	8006afe <_dtoa_r+0x9fe>
 8006b94:	9901      	ldr	r1, [sp, #4]
 8006b96:	2300      	movs	r3, #0
 8006b98:	220a      	movs	r2, #10
 8006b9a:	4648      	mov	r0, r9
 8006b9c:	f000 f968 	bl	8006e70 <__multadd>
 8006ba0:	9001      	str	r0, [sp, #4]
 8006ba2:	e7ec      	b.n	8006b7e <_dtoa_r+0xa7e>
 8006ba4:	08007db0 	.word	0x08007db0
 8006ba8:	08007d34 	.word	0x08007d34

08006bac <_free_r>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4605      	mov	r5, r0
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	d041      	beq.n	8006c38 <_free_r+0x8c>
 8006bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb8:	1f0c      	subs	r4, r1, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bfb8      	it	lt
 8006bbe:	18e4      	addlt	r4, r4, r3
 8006bc0:	f000 f8e8 	bl	8006d94 <__malloc_lock>
 8006bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8006c3c <_free_r+0x90>)
 8006bc6:	6813      	ldr	r3, [r2, #0]
 8006bc8:	b933      	cbnz	r3, 8006bd8 <_free_r+0x2c>
 8006bca:	6063      	str	r3, [r4, #4]
 8006bcc:	6014      	str	r4, [r2, #0]
 8006bce:	4628      	mov	r0, r5
 8006bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bd4:	f000 b8e4 	b.w	8006da0 <__malloc_unlock>
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d908      	bls.n	8006bee <_free_r+0x42>
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	1821      	adds	r1, r4, r0
 8006be0:	428b      	cmp	r3, r1
 8006be2:	bf01      	itttt	eq
 8006be4:	6819      	ldreq	r1, [r3, #0]
 8006be6:	685b      	ldreq	r3, [r3, #4]
 8006be8:	1809      	addeq	r1, r1, r0
 8006bea:	6021      	streq	r1, [r4, #0]
 8006bec:	e7ed      	b.n	8006bca <_free_r+0x1e>
 8006bee:	461a      	mov	r2, r3
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	b10b      	cbz	r3, 8006bf8 <_free_r+0x4c>
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d9fa      	bls.n	8006bee <_free_r+0x42>
 8006bf8:	6811      	ldr	r1, [r2, #0]
 8006bfa:	1850      	adds	r0, r2, r1
 8006bfc:	42a0      	cmp	r0, r4
 8006bfe:	d10b      	bne.n	8006c18 <_free_r+0x6c>
 8006c00:	6820      	ldr	r0, [r4, #0]
 8006c02:	4401      	add	r1, r0
 8006c04:	1850      	adds	r0, r2, r1
 8006c06:	4283      	cmp	r3, r0
 8006c08:	6011      	str	r1, [r2, #0]
 8006c0a:	d1e0      	bne.n	8006bce <_free_r+0x22>
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	6053      	str	r3, [r2, #4]
 8006c12:	4408      	add	r0, r1
 8006c14:	6010      	str	r0, [r2, #0]
 8006c16:	e7da      	b.n	8006bce <_free_r+0x22>
 8006c18:	d902      	bls.n	8006c20 <_free_r+0x74>
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	602b      	str	r3, [r5, #0]
 8006c1e:	e7d6      	b.n	8006bce <_free_r+0x22>
 8006c20:	6820      	ldr	r0, [r4, #0]
 8006c22:	1821      	adds	r1, r4, r0
 8006c24:	428b      	cmp	r3, r1
 8006c26:	bf04      	itt	eq
 8006c28:	6819      	ldreq	r1, [r3, #0]
 8006c2a:	685b      	ldreq	r3, [r3, #4]
 8006c2c:	6063      	str	r3, [r4, #4]
 8006c2e:	bf04      	itt	eq
 8006c30:	1809      	addeq	r1, r1, r0
 8006c32:	6021      	streq	r1, [r4, #0]
 8006c34:	6054      	str	r4, [r2, #4]
 8006c36:	e7ca      	b.n	8006bce <_free_r+0x22>
 8006c38:	bd38      	pop	{r3, r4, r5, pc}
 8006c3a:	bf00      	nop
 8006c3c:	24000410 	.word	0x24000410

08006c40 <malloc>:
 8006c40:	4b02      	ldr	r3, [pc, #8]	@ (8006c4c <malloc+0xc>)
 8006c42:	4601      	mov	r1, r0
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	f000 b825 	b.w	8006c94 <_malloc_r>
 8006c4a:	bf00      	nop
 8006c4c:	24000024 	.word	0x24000024

08006c50 <sbrk_aligned>:
 8006c50:	b570      	push	{r4, r5, r6, lr}
 8006c52:	4e0f      	ldr	r6, [pc, #60]	@ (8006c90 <sbrk_aligned+0x40>)
 8006c54:	460c      	mov	r4, r1
 8006c56:	6831      	ldr	r1, [r6, #0]
 8006c58:	4605      	mov	r5, r0
 8006c5a:	b911      	cbnz	r1, 8006c62 <sbrk_aligned+0x12>
 8006c5c:	f000 fe9a 	bl	8007994 <_sbrk_r>
 8006c60:	6030      	str	r0, [r6, #0]
 8006c62:	4621      	mov	r1, r4
 8006c64:	4628      	mov	r0, r5
 8006c66:	f000 fe95 	bl	8007994 <_sbrk_r>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	d103      	bne.n	8006c76 <sbrk_aligned+0x26>
 8006c6e:	f04f 34ff 	mov.w	r4, #4294967295
 8006c72:	4620      	mov	r0, r4
 8006c74:	bd70      	pop	{r4, r5, r6, pc}
 8006c76:	1cc4      	adds	r4, r0, #3
 8006c78:	f024 0403 	bic.w	r4, r4, #3
 8006c7c:	42a0      	cmp	r0, r4
 8006c7e:	d0f8      	beq.n	8006c72 <sbrk_aligned+0x22>
 8006c80:	1a21      	subs	r1, r4, r0
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 fe86 	bl	8007994 <_sbrk_r>
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d1f2      	bne.n	8006c72 <sbrk_aligned+0x22>
 8006c8c:	e7ef      	b.n	8006c6e <sbrk_aligned+0x1e>
 8006c8e:	bf00      	nop
 8006c90:	2400040c 	.word	0x2400040c

08006c94 <_malloc_r>:
 8006c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c98:	1ccd      	adds	r5, r1, #3
 8006c9a:	f025 0503 	bic.w	r5, r5, #3
 8006c9e:	3508      	adds	r5, #8
 8006ca0:	2d0c      	cmp	r5, #12
 8006ca2:	bf38      	it	cc
 8006ca4:	250c      	movcc	r5, #12
 8006ca6:	2d00      	cmp	r5, #0
 8006ca8:	4606      	mov	r6, r0
 8006caa:	db01      	blt.n	8006cb0 <_malloc_r+0x1c>
 8006cac:	42a9      	cmp	r1, r5
 8006cae:	d904      	bls.n	8006cba <_malloc_r+0x26>
 8006cb0:	230c      	movs	r3, #12
 8006cb2:	6033      	str	r3, [r6, #0]
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d90 <_malloc_r+0xfc>
 8006cbe:	f000 f869 	bl	8006d94 <__malloc_lock>
 8006cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc6:	461c      	mov	r4, r3
 8006cc8:	bb44      	cbnz	r4, 8006d1c <_malloc_r+0x88>
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f7ff ffbf 	bl	8006c50 <sbrk_aligned>
 8006cd2:	1c43      	adds	r3, r0, #1
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	d158      	bne.n	8006d8a <_malloc_r+0xf6>
 8006cd8:	f8d8 4000 	ldr.w	r4, [r8]
 8006cdc:	4627      	mov	r7, r4
 8006cde:	2f00      	cmp	r7, #0
 8006ce0:	d143      	bne.n	8006d6a <_malloc_r+0xd6>
 8006ce2:	2c00      	cmp	r4, #0
 8006ce4:	d04b      	beq.n	8006d7e <_malloc_r+0xea>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	4639      	mov	r1, r7
 8006cea:	4630      	mov	r0, r6
 8006cec:	eb04 0903 	add.w	r9, r4, r3
 8006cf0:	f000 fe50 	bl	8007994 <_sbrk_r>
 8006cf4:	4581      	cmp	r9, r0
 8006cf6:	d142      	bne.n	8006d7e <_malloc_r+0xea>
 8006cf8:	6821      	ldr	r1, [r4, #0]
 8006cfa:	1a6d      	subs	r5, r5, r1
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f7ff ffa6 	bl	8006c50 <sbrk_aligned>
 8006d04:	3001      	adds	r0, #1
 8006d06:	d03a      	beq.n	8006d7e <_malloc_r+0xea>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	442b      	add	r3, r5
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	bb62      	cbnz	r2, 8006d70 <_malloc_r+0xdc>
 8006d16:	f8c8 7000 	str.w	r7, [r8]
 8006d1a:	e00f      	b.n	8006d3c <_malloc_r+0xa8>
 8006d1c:	6822      	ldr	r2, [r4, #0]
 8006d1e:	1b52      	subs	r2, r2, r5
 8006d20:	d420      	bmi.n	8006d64 <_malloc_r+0xd0>
 8006d22:	2a0b      	cmp	r2, #11
 8006d24:	d917      	bls.n	8006d56 <_malloc_r+0xc2>
 8006d26:	1961      	adds	r1, r4, r5
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	6025      	str	r5, [r4, #0]
 8006d2c:	bf18      	it	ne
 8006d2e:	6059      	strne	r1, [r3, #4]
 8006d30:	6863      	ldr	r3, [r4, #4]
 8006d32:	bf08      	it	eq
 8006d34:	f8c8 1000 	streq.w	r1, [r8]
 8006d38:	5162      	str	r2, [r4, r5]
 8006d3a:	604b      	str	r3, [r1, #4]
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f000 f82f 	bl	8006da0 <__malloc_unlock>
 8006d42:	f104 000b 	add.w	r0, r4, #11
 8006d46:	1d23      	adds	r3, r4, #4
 8006d48:	f020 0007 	bic.w	r0, r0, #7
 8006d4c:	1ac2      	subs	r2, r0, r3
 8006d4e:	bf1c      	itt	ne
 8006d50:	1a1b      	subne	r3, r3, r0
 8006d52:	50a3      	strne	r3, [r4, r2]
 8006d54:	e7af      	b.n	8006cb6 <_malloc_r+0x22>
 8006d56:	6862      	ldr	r2, [r4, #4]
 8006d58:	42a3      	cmp	r3, r4
 8006d5a:	bf0c      	ite	eq
 8006d5c:	f8c8 2000 	streq.w	r2, [r8]
 8006d60:	605a      	strne	r2, [r3, #4]
 8006d62:	e7eb      	b.n	8006d3c <_malloc_r+0xa8>
 8006d64:	4623      	mov	r3, r4
 8006d66:	6864      	ldr	r4, [r4, #4]
 8006d68:	e7ae      	b.n	8006cc8 <_malloc_r+0x34>
 8006d6a:	463c      	mov	r4, r7
 8006d6c:	687f      	ldr	r7, [r7, #4]
 8006d6e:	e7b6      	b.n	8006cde <_malloc_r+0x4a>
 8006d70:	461a      	mov	r2, r3
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	42a3      	cmp	r3, r4
 8006d76:	d1fb      	bne.n	8006d70 <_malloc_r+0xdc>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	6053      	str	r3, [r2, #4]
 8006d7c:	e7de      	b.n	8006d3c <_malloc_r+0xa8>
 8006d7e:	230c      	movs	r3, #12
 8006d80:	6033      	str	r3, [r6, #0]
 8006d82:	4630      	mov	r0, r6
 8006d84:	f000 f80c 	bl	8006da0 <__malloc_unlock>
 8006d88:	e794      	b.n	8006cb4 <_malloc_r+0x20>
 8006d8a:	6005      	str	r5, [r0, #0]
 8006d8c:	e7d6      	b.n	8006d3c <_malloc_r+0xa8>
 8006d8e:	bf00      	nop
 8006d90:	24000410 	.word	0x24000410

08006d94 <__malloc_lock>:
 8006d94:	4801      	ldr	r0, [pc, #4]	@ (8006d9c <__malloc_lock+0x8>)
 8006d96:	f7ff b926 	b.w	8005fe6 <__retarget_lock_acquire_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	24000408 	.word	0x24000408

08006da0 <__malloc_unlock>:
 8006da0:	4801      	ldr	r0, [pc, #4]	@ (8006da8 <__malloc_unlock+0x8>)
 8006da2:	f7ff b921 	b.w	8005fe8 <__retarget_lock_release_recursive>
 8006da6:	bf00      	nop
 8006da8:	24000408 	.word	0x24000408

08006dac <_Balloc>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	69c6      	ldr	r6, [r0, #28]
 8006db0:	4604      	mov	r4, r0
 8006db2:	460d      	mov	r5, r1
 8006db4:	b976      	cbnz	r6, 8006dd4 <_Balloc+0x28>
 8006db6:	2010      	movs	r0, #16
 8006db8:	f7ff ff42 	bl	8006c40 <malloc>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	61e0      	str	r0, [r4, #28]
 8006dc0:	b920      	cbnz	r0, 8006dcc <_Balloc+0x20>
 8006dc2:	4b18      	ldr	r3, [pc, #96]	@ (8006e24 <_Balloc+0x78>)
 8006dc4:	4818      	ldr	r0, [pc, #96]	@ (8006e28 <_Balloc+0x7c>)
 8006dc6:	216b      	movs	r1, #107	@ 0x6b
 8006dc8:	f000 fe02 	bl	80079d0 <__assert_func>
 8006dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dd0:	6006      	str	r6, [r0, #0]
 8006dd2:	60c6      	str	r6, [r0, #12]
 8006dd4:	69e6      	ldr	r6, [r4, #28]
 8006dd6:	68f3      	ldr	r3, [r6, #12]
 8006dd8:	b183      	cbz	r3, 8006dfc <_Balloc+0x50>
 8006dda:	69e3      	ldr	r3, [r4, #28]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006de2:	b9b8      	cbnz	r0, 8006e14 <_Balloc+0x68>
 8006de4:	2101      	movs	r1, #1
 8006de6:	fa01 f605 	lsl.w	r6, r1, r5
 8006dea:	1d72      	adds	r2, r6, #5
 8006dec:	0092      	lsls	r2, r2, #2
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 fe0c 	bl	8007a0c <_calloc_r>
 8006df4:	b160      	cbz	r0, 8006e10 <_Balloc+0x64>
 8006df6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dfa:	e00e      	b.n	8006e1a <_Balloc+0x6e>
 8006dfc:	2221      	movs	r2, #33	@ 0x21
 8006dfe:	2104      	movs	r1, #4
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 fe03 	bl	8007a0c <_calloc_r>
 8006e06:	69e3      	ldr	r3, [r4, #28]
 8006e08:	60f0      	str	r0, [r6, #12]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e4      	bne.n	8006dda <_Balloc+0x2e>
 8006e10:	2000      	movs	r0, #0
 8006e12:	bd70      	pop	{r4, r5, r6, pc}
 8006e14:	6802      	ldr	r2, [r0, #0]
 8006e16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e20:	e7f7      	b.n	8006e12 <_Balloc+0x66>
 8006e22:	bf00      	nop
 8006e24:	08007d41 	.word	0x08007d41
 8006e28:	08007dc1 	.word	0x08007dc1

08006e2c <_Bfree>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	69c6      	ldr	r6, [r0, #28]
 8006e30:	4605      	mov	r5, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	b976      	cbnz	r6, 8006e54 <_Bfree+0x28>
 8006e36:	2010      	movs	r0, #16
 8006e38:	f7ff ff02 	bl	8006c40 <malloc>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	61e8      	str	r0, [r5, #28]
 8006e40:	b920      	cbnz	r0, 8006e4c <_Bfree+0x20>
 8006e42:	4b09      	ldr	r3, [pc, #36]	@ (8006e68 <_Bfree+0x3c>)
 8006e44:	4809      	ldr	r0, [pc, #36]	@ (8006e6c <_Bfree+0x40>)
 8006e46:	218f      	movs	r1, #143	@ 0x8f
 8006e48:	f000 fdc2 	bl	80079d0 <__assert_func>
 8006e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e50:	6006      	str	r6, [r0, #0]
 8006e52:	60c6      	str	r6, [r0, #12]
 8006e54:	b13c      	cbz	r4, 8006e66 <_Bfree+0x3a>
 8006e56:	69eb      	ldr	r3, [r5, #28]
 8006e58:	6862      	ldr	r2, [r4, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e60:	6021      	str	r1, [r4, #0]
 8006e62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	08007d41 	.word	0x08007d41
 8006e6c:	08007dc1 	.word	0x08007dc1

08006e70 <__multadd>:
 8006e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e74:	690d      	ldr	r5, [r1, #16]
 8006e76:	4607      	mov	r7, r0
 8006e78:	460c      	mov	r4, r1
 8006e7a:	461e      	mov	r6, r3
 8006e7c:	f101 0c14 	add.w	ip, r1, #20
 8006e80:	2000      	movs	r0, #0
 8006e82:	f8dc 3000 	ldr.w	r3, [ip]
 8006e86:	b299      	uxth	r1, r3
 8006e88:	fb02 6101 	mla	r1, r2, r1, r6
 8006e8c:	0c1e      	lsrs	r6, r3, #16
 8006e8e:	0c0b      	lsrs	r3, r1, #16
 8006e90:	fb02 3306 	mla	r3, r2, r6, r3
 8006e94:	b289      	uxth	r1, r1
 8006e96:	3001      	adds	r0, #1
 8006e98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e9c:	4285      	cmp	r5, r0
 8006e9e:	f84c 1b04 	str.w	r1, [ip], #4
 8006ea2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ea6:	dcec      	bgt.n	8006e82 <__multadd+0x12>
 8006ea8:	b30e      	cbz	r6, 8006eee <__multadd+0x7e>
 8006eaa:	68a3      	ldr	r3, [r4, #8]
 8006eac:	42ab      	cmp	r3, r5
 8006eae:	dc19      	bgt.n	8006ee4 <__multadd+0x74>
 8006eb0:	6861      	ldr	r1, [r4, #4]
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	3101      	adds	r1, #1
 8006eb6:	f7ff ff79 	bl	8006dac <_Balloc>
 8006eba:	4680      	mov	r8, r0
 8006ebc:	b928      	cbnz	r0, 8006eca <__multadd+0x5a>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef4 <__multadd+0x84>)
 8006ec2:	480d      	ldr	r0, [pc, #52]	@ (8006ef8 <__multadd+0x88>)
 8006ec4:	21ba      	movs	r1, #186	@ 0xba
 8006ec6:	f000 fd83 	bl	80079d0 <__assert_func>
 8006eca:	6922      	ldr	r2, [r4, #16]
 8006ecc:	3202      	adds	r2, #2
 8006ece:	f104 010c 	add.w	r1, r4, #12
 8006ed2:	0092      	lsls	r2, r2, #2
 8006ed4:	300c      	adds	r0, #12
 8006ed6:	f000 fd6d 	bl	80079b4 <memcpy>
 8006eda:	4621      	mov	r1, r4
 8006edc:	4638      	mov	r0, r7
 8006ede:	f7ff ffa5 	bl	8006e2c <_Bfree>
 8006ee2:	4644      	mov	r4, r8
 8006ee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ee8:	3501      	adds	r5, #1
 8006eea:	615e      	str	r6, [r3, #20]
 8006eec:	6125      	str	r5, [r4, #16]
 8006eee:	4620      	mov	r0, r4
 8006ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef4:	08007db0 	.word	0x08007db0
 8006ef8:	08007dc1 	.word	0x08007dc1

08006efc <__hi0bits>:
 8006efc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006f00:	4603      	mov	r3, r0
 8006f02:	bf36      	itet	cc
 8006f04:	0403      	lslcc	r3, r0, #16
 8006f06:	2000      	movcs	r0, #0
 8006f08:	2010      	movcc	r0, #16
 8006f0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f0e:	bf3c      	itt	cc
 8006f10:	021b      	lslcc	r3, r3, #8
 8006f12:	3008      	addcc	r0, #8
 8006f14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f18:	bf3c      	itt	cc
 8006f1a:	011b      	lslcc	r3, r3, #4
 8006f1c:	3004      	addcc	r0, #4
 8006f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f22:	bf3c      	itt	cc
 8006f24:	009b      	lslcc	r3, r3, #2
 8006f26:	3002      	addcc	r0, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	db05      	blt.n	8006f38 <__hi0bits+0x3c>
 8006f2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006f30:	f100 0001 	add.w	r0, r0, #1
 8006f34:	bf08      	it	eq
 8006f36:	2020      	moveq	r0, #32
 8006f38:	4770      	bx	lr

08006f3a <__lo0bits>:
 8006f3a:	6803      	ldr	r3, [r0, #0]
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	f013 0007 	ands.w	r0, r3, #7
 8006f42:	d00b      	beq.n	8006f5c <__lo0bits+0x22>
 8006f44:	07d9      	lsls	r1, r3, #31
 8006f46:	d421      	bmi.n	8006f8c <__lo0bits+0x52>
 8006f48:	0798      	lsls	r0, r3, #30
 8006f4a:	bf49      	itett	mi
 8006f4c:	085b      	lsrmi	r3, r3, #1
 8006f4e:	089b      	lsrpl	r3, r3, #2
 8006f50:	2001      	movmi	r0, #1
 8006f52:	6013      	strmi	r3, [r2, #0]
 8006f54:	bf5c      	itt	pl
 8006f56:	6013      	strpl	r3, [r2, #0]
 8006f58:	2002      	movpl	r0, #2
 8006f5a:	4770      	bx	lr
 8006f5c:	b299      	uxth	r1, r3
 8006f5e:	b909      	cbnz	r1, 8006f64 <__lo0bits+0x2a>
 8006f60:	0c1b      	lsrs	r3, r3, #16
 8006f62:	2010      	movs	r0, #16
 8006f64:	b2d9      	uxtb	r1, r3
 8006f66:	b909      	cbnz	r1, 8006f6c <__lo0bits+0x32>
 8006f68:	3008      	adds	r0, #8
 8006f6a:	0a1b      	lsrs	r3, r3, #8
 8006f6c:	0719      	lsls	r1, r3, #28
 8006f6e:	bf04      	itt	eq
 8006f70:	091b      	lsreq	r3, r3, #4
 8006f72:	3004      	addeq	r0, #4
 8006f74:	0799      	lsls	r1, r3, #30
 8006f76:	bf04      	itt	eq
 8006f78:	089b      	lsreq	r3, r3, #2
 8006f7a:	3002      	addeq	r0, #2
 8006f7c:	07d9      	lsls	r1, r3, #31
 8006f7e:	d403      	bmi.n	8006f88 <__lo0bits+0x4e>
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	f100 0001 	add.w	r0, r0, #1
 8006f86:	d003      	beq.n	8006f90 <__lo0bits+0x56>
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	4770      	bx	lr
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	4770      	bx	lr
 8006f90:	2020      	movs	r0, #32
 8006f92:	4770      	bx	lr

08006f94 <__i2b>:
 8006f94:	b510      	push	{r4, lr}
 8006f96:	460c      	mov	r4, r1
 8006f98:	2101      	movs	r1, #1
 8006f9a:	f7ff ff07 	bl	8006dac <_Balloc>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	b928      	cbnz	r0, 8006fae <__i2b+0x1a>
 8006fa2:	4b05      	ldr	r3, [pc, #20]	@ (8006fb8 <__i2b+0x24>)
 8006fa4:	4805      	ldr	r0, [pc, #20]	@ (8006fbc <__i2b+0x28>)
 8006fa6:	f240 1145 	movw	r1, #325	@ 0x145
 8006faa:	f000 fd11 	bl	80079d0 <__assert_func>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	6144      	str	r4, [r0, #20]
 8006fb2:	6103      	str	r3, [r0, #16]
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	bf00      	nop
 8006fb8:	08007db0 	.word	0x08007db0
 8006fbc:	08007dc1 	.word	0x08007dc1

08006fc0 <__multiply>:
 8006fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	4614      	mov	r4, r2
 8006fc6:	690a      	ldr	r2, [r1, #16]
 8006fc8:	6923      	ldr	r3, [r4, #16]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	bfa8      	it	ge
 8006fce:	4623      	movge	r3, r4
 8006fd0:	460f      	mov	r7, r1
 8006fd2:	bfa4      	itt	ge
 8006fd4:	460c      	movge	r4, r1
 8006fd6:	461f      	movge	r7, r3
 8006fd8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006fdc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006fe0:	68a3      	ldr	r3, [r4, #8]
 8006fe2:	6861      	ldr	r1, [r4, #4]
 8006fe4:	eb0a 0609 	add.w	r6, sl, r9
 8006fe8:	42b3      	cmp	r3, r6
 8006fea:	b085      	sub	sp, #20
 8006fec:	bfb8      	it	lt
 8006fee:	3101      	addlt	r1, #1
 8006ff0:	f7ff fedc 	bl	8006dac <_Balloc>
 8006ff4:	b930      	cbnz	r0, 8007004 <__multiply+0x44>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	4b44      	ldr	r3, [pc, #272]	@ (800710c <__multiply+0x14c>)
 8006ffa:	4845      	ldr	r0, [pc, #276]	@ (8007110 <__multiply+0x150>)
 8006ffc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007000:	f000 fce6 	bl	80079d0 <__assert_func>
 8007004:	f100 0514 	add.w	r5, r0, #20
 8007008:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800700c:	462b      	mov	r3, r5
 800700e:	2200      	movs	r2, #0
 8007010:	4543      	cmp	r3, r8
 8007012:	d321      	bcc.n	8007058 <__multiply+0x98>
 8007014:	f107 0114 	add.w	r1, r7, #20
 8007018:	f104 0214 	add.w	r2, r4, #20
 800701c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007020:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007024:	9302      	str	r3, [sp, #8]
 8007026:	1b13      	subs	r3, r2, r4
 8007028:	3b15      	subs	r3, #21
 800702a:	f023 0303 	bic.w	r3, r3, #3
 800702e:	3304      	adds	r3, #4
 8007030:	f104 0715 	add.w	r7, r4, #21
 8007034:	42ba      	cmp	r2, r7
 8007036:	bf38      	it	cc
 8007038:	2304      	movcc	r3, #4
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	9b02      	ldr	r3, [sp, #8]
 800703e:	9103      	str	r1, [sp, #12]
 8007040:	428b      	cmp	r3, r1
 8007042:	d80c      	bhi.n	800705e <__multiply+0x9e>
 8007044:	2e00      	cmp	r6, #0
 8007046:	dd03      	ble.n	8007050 <__multiply+0x90>
 8007048:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800704c:	2b00      	cmp	r3, #0
 800704e:	d05b      	beq.n	8007108 <__multiply+0x148>
 8007050:	6106      	str	r6, [r0, #16]
 8007052:	b005      	add	sp, #20
 8007054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007058:	f843 2b04 	str.w	r2, [r3], #4
 800705c:	e7d8      	b.n	8007010 <__multiply+0x50>
 800705e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007062:	f1ba 0f00 	cmp.w	sl, #0
 8007066:	d024      	beq.n	80070b2 <__multiply+0xf2>
 8007068:	f104 0e14 	add.w	lr, r4, #20
 800706c:	46a9      	mov	r9, r5
 800706e:	f04f 0c00 	mov.w	ip, #0
 8007072:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007076:	f8d9 3000 	ldr.w	r3, [r9]
 800707a:	fa1f fb87 	uxth.w	fp, r7
 800707e:	b29b      	uxth	r3, r3
 8007080:	fb0a 330b 	mla	r3, sl, fp, r3
 8007084:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007088:	f8d9 7000 	ldr.w	r7, [r9]
 800708c:	4463      	add	r3, ip
 800708e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007092:	fb0a c70b 	mla	r7, sl, fp, ip
 8007096:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800709a:	b29b      	uxth	r3, r3
 800709c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80070a0:	4572      	cmp	r2, lr
 80070a2:	f849 3b04 	str.w	r3, [r9], #4
 80070a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80070aa:	d8e2      	bhi.n	8007072 <__multiply+0xb2>
 80070ac:	9b01      	ldr	r3, [sp, #4]
 80070ae:	f845 c003 	str.w	ip, [r5, r3]
 80070b2:	9b03      	ldr	r3, [sp, #12]
 80070b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80070b8:	3104      	adds	r1, #4
 80070ba:	f1b9 0f00 	cmp.w	r9, #0
 80070be:	d021      	beq.n	8007104 <__multiply+0x144>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	f104 0c14 	add.w	ip, r4, #20
 80070c6:	46ae      	mov	lr, r5
 80070c8:	f04f 0a00 	mov.w	sl, #0
 80070cc:	f8bc b000 	ldrh.w	fp, [ip]
 80070d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80070d4:	fb09 770b 	mla	r7, r9, fp, r7
 80070d8:	4457      	add	r7, sl
 80070da:	b29b      	uxth	r3, r3
 80070dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80070e0:	f84e 3b04 	str.w	r3, [lr], #4
 80070e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070ec:	f8be 3000 	ldrh.w	r3, [lr]
 80070f0:	fb09 330a 	mla	r3, r9, sl, r3
 80070f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80070f8:	4562      	cmp	r2, ip
 80070fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070fe:	d8e5      	bhi.n	80070cc <__multiply+0x10c>
 8007100:	9f01      	ldr	r7, [sp, #4]
 8007102:	51eb      	str	r3, [r5, r7]
 8007104:	3504      	adds	r5, #4
 8007106:	e799      	b.n	800703c <__multiply+0x7c>
 8007108:	3e01      	subs	r6, #1
 800710a:	e79b      	b.n	8007044 <__multiply+0x84>
 800710c:	08007db0 	.word	0x08007db0
 8007110:	08007dc1 	.word	0x08007dc1

08007114 <__pow5mult>:
 8007114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007118:	4615      	mov	r5, r2
 800711a:	f012 0203 	ands.w	r2, r2, #3
 800711e:	4607      	mov	r7, r0
 8007120:	460e      	mov	r6, r1
 8007122:	d007      	beq.n	8007134 <__pow5mult+0x20>
 8007124:	4c25      	ldr	r4, [pc, #148]	@ (80071bc <__pow5mult+0xa8>)
 8007126:	3a01      	subs	r2, #1
 8007128:	2300      	movs	r3, #0
 800712a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800712e:	f7ff fe9f 	bl	8006e70 <__multadd>
 8007132:	4606      	mov	r6, r0
 8007134:	10ad      	asrs	r5, r5, #2
 8007136:	d03d      	beq.n	80071b4 <__pow5mult+0xa0>
 8007138:	69fc      	ldr	r4, [r7, #28]
 800713a:	b97c      	cbnz	r4, 800715c <__pow5mult+0x48>
 800713c:	2010      	movs	r0, #16
 800713e:	f7ff fd7f 	bl	8006c40 <malloc>
 8007142:	4602      	mov	r2, r0
 8007144:	61f8      	str	r0, [r7, #28]
 8007146:	b928      	cbnz	r0, 8007154 <__pow5mult+0x40>
 8007148:	4b1d      	ldr	r3, [pc, #116]	@ (80071c0 <__pow5mult+0xac>)
 800714a:	481e      	ldr	r0, [pc, #120]	@ (80071c4 <__pow5mult+0xb0>)
 800714c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007150:	f000 fc3e 	bl	80079d0 <__assert_func>
 8007154:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007158:	6004      	str	r4, [r0, #0]
 800715a:	60c4      	str	r4, [r0, #12]
 800715c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007160:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007164:	b94c      	cbnz	r4, 800717a <__pow5mult+0x66>
 8007166:	f240 2171 	movw	r1, #625	@ 0x271
 800716a:	4638      	mov	r0, r7
 800716c:	f7ff ff12 	bl	8006f94 <__i2b>
 8007170:	2300      	movs	r3, #0
 8007172:	f8c8 0008 	str.w	r0, [r8, #8]
 8007176:	4604      	mov	r4, r0
 8007178:	6003      	str	r3, [r0, #0]
 800717a:	f04f 0900 	mov.w	r9, #0
 800717e:	07eb      	lsls	r3, r5, #31
 8007180:	d50a      	bpl.n	8007198 <__pow5mult+0x84>
 8007182:	4631      	mov	r1, r6
 8007184:	4622      	mov	r2, r4
 8007186:	4638      	mov	r0, r7
 8007188:	f7ff ff1a 	bl	8006fc0 <__multiply>
 800718c:	4631      	mov	r1, r6
 800718e:	4680      	mov	r8, r0
 8007190:	4638      	mov	r0, r7
 8007192:	f7ff fe4b 	bl	8006e2c <_Bfree>
 8007196:	4646      	mov	r6, r8
 8007198:	106d      	asrs	r5, r5, #1
 800719a:	d00b      	beq.n	80071b4 <__pow5mult+0xa0>
 800719c:	6820      	ldr	r0, [r4, #0]
 800719e:	b938      	cbnz	r0, 80071b0 <__pow5mult+0x9c>
 80071a0:	4622      	mov	r2, r4
 80071a2:	4621      	mov	r1, r4
 80071a4:	4638      	mov	r0, r7
 80071a6:	f7ff ff0b 	bl	8006fc0 <__multiply>
 80071aa:	6020      	str	r0, [r4, #0]
 80071ac:	f8c0 9000 	str.w	r9, [r0]
 80071b0:	4604      	mov	r4, r0
 80071b2:	e7e4      	b.n	800717e <__pow5mult+0x6a>
 80071b4:	4630      	mov	r0, r6
 80071b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ba:	bf00      	nop
 80071bc:	08007e1c 	.word	0x08007e1c
 80071c0:	08007d41 	.word	0x08007d41
 80071c4:	08007dc1 	.word	0x08007dc1

080071c8 <__lshift>:
 80071c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071cc:	460c      	mov	r4, r1
 80071ce:	6849      	ldr	r1, [r1, #4]
 80071d0:	6923      	ldr	r3, [r4, #16]
 80071d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071d6:	68a3      	ldr	r3, [r4, #8]
 80071d8:	4607      	mov	r7, r0
 80071da:	4691      	mov	r9, r2
 80071dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071e0:	f108 0601 	add.w	r6, r8, #1
 80071e4:	42b3      	cmp	r3, r6
 80071e6:	db0b      	blt.n	8007200 <__lshift+0x38>
 80071e8:	4638      	mov	r0, r7
 80071ea:	f7ff fddf 	bl	8006dac <_Balloc>
 80071ee:	4605      	mov	r5, r0
 80071f0:	b948      	cbnz	r0, 8007206 <__lshift+0x3e>
 80071f2:	4602      	mov	r2, r0
 80071f4:	4b28      	ldr	r3, [pc, #160]	@ (8007298 <__lshift+0xd0>)
 80071f6:	4829      	ldr	r0, [pc, #164]	@ (800729c <__lshift+0xd4>)
 80071f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80071fc:	f000 fbe8 	bl	80079d0 <__assert_func>
 8007200:	3101      	adds	r1, #1
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	e7ee      	b.n	80071e4 <__lshift+0x1c>
 8007206:	2300      	movs	r3, #0
 8007208:	f100 0114 	add.w	r1, r0, #20
 800720c:	f100 0210 	add.w	r2, r0, #16
 8007210:	4618      	mov	r0, r3
 8007212:	4553      	cmp	r3, sl
 8007214:	db33      	blt.n	800727e <__lshift+0xb6>
 8007216:	6920      	ldr	r0, [r4, #16]
 8007218:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800721c:	f104 0314 	add.w	r3, r4, #20
 8007220:	f019 091f 	ands.w	r9, r9, #31
 8007224:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007228:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800722c:	d02b      	beq.n	8007286 <__lshift+0xbe>
 800722e:	f1c9 0e20 	rsb	lr, r9, #32
 8007232:	468a      	mov	sl, r1
 8007234:	2200      	movs	r2, #0
 8007236:	6818      	ldr	r0, [r3, #0]
 8007238:	fa00 f009 	lsl.w	r0, r0, r9
 800723c:	4310      	orrs	r0, r2
 800723e:	f84a 0b04 	str.w	r0, [sl], #4
 8007242:	f853 2b04 	ldr.w	r2, [r3], #4
 8007246:	459c      	cmp	ip, r3
 8007248:	fa22 f20e 	lsr.w	r2, r2, lr
 800724c:	d8f3      	bhi.n	8007236 <__lshift+0x6e>
 800724e:	ebac 0304 	sub.w	r3, ip, r4
 8007252:	3b15      	subs	r3, #21
 8007254:	f023 0303 	bic.w	r3, r3, #3
 8007258:	3304      	adds	r3, #4
 800725a:	f104 0015 	add.w	r0, r4, #21
 800725e:	4584      	cmp	ip, r0
 8007260:	bf38      	it	cc
 8007262:	2304      	movcc	r3, #4
 8007264:	50ca      	str	r2, [r1, r3]
 8007266:	b10a      	cbz	r2, 800726c <__lshift+0xa4>
 8007268:	f108 0602 	add.w	r6, r8, #2
 800726c:	3e01      	subs	r6, #1
 800726e:	4638      	mov	r0, r7
 8007270:	612e      	str	r6, [r5, #16]
 8007272:	4621      	mov	r1, r4
 8007274:	f7ff fdda 	bl	8006e2c <_Bfree>
 8007278:	4628      	mov	r0, r5
 800727a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007282:	3301      	adds	r3, #1
 8007284:	e7c5      	b.n	8007212 <__lshift+0x4a>
 8007286:	3904      	subs	r1, #4
 8007288:	f853 2b04 	ldr.w	r2, [r3], #4
 800728c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007290:	459c      	cmp	ip, r3
 8007292:	d8f9      	bhi.n	8007288 <__lshift+0xc0>
 8007294:	e7ea      	b.n	800726c <__lshift+0xa4>
 8007296:	bf00      	nop
 8007298:	08007db0 	.word	0x08007db0
 800729c:	08007dc1 	.word	0x08007dc1

080072a0 <__mcmp>:
 80072a0:	690a      	ldr	r2, [r1, #16]
 80072a2:	4603      	mov	r3, r0
 80072a4:	6900      	ldr	r0, [r0, #16]
 80072a6:	1a80      	subs	r0, r0, r2
 80072a8:	b530      	push	{r4, r5, lr}
 80072aa:	d10e      	bne.n	80072ca <__mcmp+0x2a>
 80072ac:	3314      	adds	r3, #20
 80072ae:	3114      	adds	r1, #20
 80072b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80072b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80072b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072c0:	4295      	cmp	r5, r2
 80072c2:	d003      	beq.n	80072cc <__mcmp+0x2c>
 80072c4:	d205      	bcs.n	80072d2 <__mcmp+0x32>
 80072c6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ca:	bd30      	pop	{r4, r5, pc}
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	d3f3      	bcc.n	80072b8 <__mcmp+0x18>
 80072d0:	e7fb      	b.n	80072ca <__mcmp+0x2a>
 80072d2:	2001      	movs	r0, #1
 80072d4:	e7f9      	b.n	80072ca <__mcmp+0x2a>
	...

080072d8 <__mdiff>:
 80072d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	4689      	mov	r9, r1
 80072de:	4606      	mov	r6, r0
 80072e0:	4611      	mov	r1, r2
 80072e2:	4648      	mov	r0, r9
 80072e4:	4614      	mov	r4, r2
 80072e6:	f7ff ffdb 	bl	80072a0 <__mcmp>
 80072ea:	1e05      	subs	r5, r0, #0
 80072ec:	d112      	bne.n	8007314 <__mdiff+0x3c>
 80072ee:	4629      	mov	r1, r5
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7ff fd5b 	bl	8006dac <_Balloc>
 80072f6:	4602      	mov	r2, r0
 80072f8:	b928      	cbnz	r0, 8007306 <__mdiff+0x2e>
 80072fa:	4b3f      	ldr	r3, [pc, #252]	@ (80073f8 <__mdiff+0x120>)
 80072fc:	f240 2137 	movw	r1, #567	@ 0x237
 8007300:	483e      	ldr	r0, [pc, #248]	@ (80073fc <__mdiff+0x124>)
 8007302:	f000 fb65 	bl	80079d0 <__assert_func>
 8007306:	2301      	movs	r3, #1
 8007308:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800730c:	4610      	mov	r0, r2
 800730e:	b003      	add	sp, #12
 8007310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007314:	bfbc      	itt	lt
 8007316:	464b      	movlt	r3, r9
 8007318:	46a1      	movlt	r9, r4
 800731a:	4630      	mov	r0, r6
 800731c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007320:	bfba      	itte	lt
 8007322:	461c      	movlt	r4, r3
 8007324:	2501      	movlt	r5, #1
 8007326:	2500      	movge	r5, #0
 8007328:	f7ff fd40 	bl	8006dac <_Balloc>
 800732c:	4602      	mov	r2, r0
 800732e:	b918      	cbnz	r0, 8007338 <__mdiff+0x60>
 8007330:	4b31      	ldr	r3, [pc, #196]	@ (80073f8 <__mdiff+0x120>)
 8007332:	f240 2145 	movw	r1, #581	@ 0x245
 8007336:	e7e3      	b.n	8007300 <__mdiff+0x28>
 8007338:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800733c:	6926      	ldr	r6, [r4, #16]
 800733e:	60c5      	str	r5, [r0, #12]
 8007340:	f109 0310 	add.w	r3, r9, #16
 8007344:	f109 0514 	add.w	r5, r9, #20
 8007348:	f104 0e14 	add.w	lr, r4, #20
 800734c:	f100 0b14 	add.w	fp, r0, #20
 8007350:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007354:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	46d9      	mov	r9, fp
 800735c:	f04f 0c00 	mov.w	ip, #0
 8007360:	9b01      	ldr	r3, [sp, #4]
 8007362:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007366:	f853 af04 	ldr.w	sl, [r3, #4]!
 800736a:	9301      	str	r3, [sp, #4]
 800736c:	fa1f f38a 	uxth.w	r3, sl
 8007370:	4619      	mov	r1, r3
 8007372:	b283      	uxth	r3, r0
 8007374:	1acb      	subs	r3, r1, r3
 8007376:	0c00      	lsrs	r0, r0, #16
 8007378:	4463      	add	r3, ip
 800737a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800737e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007382:	b29b      	uxth	r3, r3
 8007384:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007388:	4576      	cmp	r6, lr
 800738a:	f849 3b04 	str.w	r3, [r9], #4
 800738e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007392:	d8e5      	bhi.n	8007360 <__mdiff+0x88>
 8007394:	1b33      	subs	r3, r6, r4
 8007396:	3b15      	subs	r3, #21
 8007398:	f023 0303 	bic.w	r3, r3, #3
 800739c:	3415      	adds	r4, #21
 800739e:	3304      	adds	r3, #4
 80073a0:	42a6      	cmp	r6, r4
 80073a2:	bf38      	it	cc
 80073a4:	2304      	movcc	r3, #4
 80073a6:	441d      	add	r5, r3
 80073a8:	445b      	add	r3, fp
 80073aa:	461e      	mov	r6, r3
 80073ac:	462c      	mov	r4, r5
 80073ae:	4544      	cmp	r4, r8
 80073b0:	d30e      	bcc.n	80073d0 <__mdiff+0xf8>
 80073b2:	f108 0103 	add.w	r1, r8, #3
 80073b6:	1b49      	subs	r1, r1, r5
 80073b8:	f021 0103 	bic.w	r1, r1, #3
 80073bc:	3d03      	subs	r5, #3
 80073be:	45a8      	cmp	r8, r5
 80073c0:	bf38      	it	cc
 80073c2:	2100      	movcc	r1, #0
 80073c4:	440b      	add	r3, r1
 80073c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073ca:	b191      	cbz	r1, 80073f2 <__mdiff+0x11a>
 80073cc:	6117      	str	r7, [r2, #16]
 80073ce:	e79d      	b.n	800730c <__mdiff+0x34>
 80073d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80073d4:	46e6      	mov	lr, ip
 80073d6:	0c08      	lsrs	r0, r1, #16
 80073d8:	fa1c fc81 	uxtah	ip, ip, r1
 80073dc:	4471      	add	r1, lr
 80073de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80073e2:	b289      	uxth	r1, r1
 80073e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073e8:	f846 1b04 	str.w	r1, [r6], #4
 80073ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073f0:	e7dd      	b.n	80073ae <__mdiff+0xd6>
 80073f2:	3f01      	subs	r7, #1
 80073f4:	e7e7      	b.n	80073c6 <__mdiff+0xee>
 80073f6:	bf00      	nop
 80073f8:	08007db0 	.word	0x08007db0
 80073fc:	08007dc1 	.word	0x08007dc1

08007400 <__d2b>:
 8007400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007404:	460f      	mov	r7, r1
 8007406:	2101      	movs	r1, #1
 8007408:	ec59 8b10 	vmov	r8, r9, d0
 800740c:	4616      	mov	r6, r2
 800740e:	f7ff fccd 	bl	8006dac <_Balloc>
 8007412:	4604      	mov	r4, r0
 8007414:	b930      	cbnz	r0, 8007424 <__d2b+0x24>
 8007416:	4602      	mov	r2, r0
 8007418:	4b23      	ldr	r3, [pc, #140]	@ (80074a8 <__d2b+0xa8>)
 800741a:	4824      	ldr	r0, [pc, #144]	@ (80074ac <__d2b+0xac>)
 800741c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007420:	f000 fad6 	bl	80079d0 <__assert_func>
 8007424:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007428:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800742c:	b10d      	cbz	r5, 8007432 <__d2b+0x32>
 800742e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007432:	9301      	str	r3, [sp, #4]
 8007434:	f1b8 0300 	subs.w	r3, r8, #0
 8007438:	d023      	beq.n	8007482 <__d2b+0x82>
 800743a:	4668      	mov	r0, sp
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	f7ff fd7c 	bl	8006f3a <__lo0bits>
 8007442:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007446:	b1d0      	cbz	r0, 800747e <__d2b+0x7e>
 8007448:	f1c0 0320 	rsb	r3, r0, #32
 800744c:	fa02 f303 	lsl.w	r3, r2, r3
 8007450:	430b      	orrs	r3, r1
 8007452:	40c2      	lsrs	r2, r0
 8007454:	6163      	str	r3, [r4, #20]
 8007456:	9201      	str	r2, [sp, #4]
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	61a3      	str	r3, [r4, #24]
 800745c:	2b00      	cmp	r3, #0
 800745e:	bf0c      	ite	eq
 8007460:	2201      	moveq	r2, #1
 8007462:	2202      	movne	r2, #2
 8007464:	6122      	str	r2, [r4, #16]
 8007466:	b1a5      	cbz	r5, 8007492 <__d2b+0x92>
 8007468:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800746c:	4405      	add	r5, r0
 800746e:	603d      	str	r5, [r7, #0]
 8007470:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007474:	6030      	str	r0, [r6, #0]
 8007476:	4620      	mov	r0, r4
 8007478:	b003      	add	sp, #12
 800747a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800747e:	6161      	str	r1, [r4, #20]
 8007480:	e7ea      	b.n	8007458 <__d2b+0x58>
 8007482:	a801      	add	r0, sp, #4
 8007484:	f7ff fd59 	bl	8006f3a <__lo0bits>
 8007488:	9b01      	ldr	r3, [sp, #4]
 800748a:	6163      	str	r3, [r4, #20]
 800748c:	3020      	adds	r0, #32
 800748e:	2201      	movs	r2, #1
 8007490:	e7e8      	b.n	8007464 <__d2b+0x64>
 8007492:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007496:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800749a:	6038      	str	r0, [r7, #0]
 800749c:	6918      	ldr	r0, [r3, #16]
 800749e:	f7ff fd2d 	bl	8006efc <__hi0bits>
 80074a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074a6:	e7e5      	b.n	8007474 <__d2b+0x74>
 80074a8:	08007db0 	.word	0x08007db0
 80074ac:	08007dc1 	.word	0x08007dc1

080074b0 <__sfputc_r>:
 80074b0:	6893      	ldr	r3, [r2, #8]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	b410      	push	{r4}
 80074b8:	6093      	str	r3, [r2, #8]
 80074ba:	da08      	bge.n	80074ce <__sfputc_r+0x1e>
 80074bc:	6994      	ldr	r4, [r2, #24]
 80074be:	42a3      	cmp	r3, r4
 80074c0:	db01      	blt.n	80074c6 <__sfputc_r+0x16>
 80074c2:	290a      	cmp	r1, #10
 80074c4:	d103      	bne.n	80074ce <__sfputc_r+0x1e>
 80074c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ca:	f7fe bc7a 	b.w	8005dc2 <__swbuf_r>
 80074ce:	6813      	ldr	r3, [r2, #0]
 80074d0:	1c58      	adds	r0, r3, #1
 80074d2:	6010      	str	r0, [r2, #0]
 80074d4:	7019      	strb	r1, [r3, #0]
 80074d6:	4608      	mov	r0, r1
 80074d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074dc:	4770      	bx	lr

080074de <__sfputs_r>:
 80074de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e0:	4606      	mov	r6, r0
 80074e2:	460f      	mov	r7, r1
 80074e4:	4614      	mov	r4, r2
 80074e6:	18d5      	adds	r5, r2, r3
 80074e8:	42ac      	cmp	r4, r5
 80074ea:	d101      	bne.n	80074f0 <__sfputs_r+0x12>
 80074ec:	2000      	movs	r0, #0
 80074ee:	e007      	b.n	8007500 <__sfputs_r+0x22>
 80074f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f4:	463a      	mov	r2, r7
 80074f6:	4630      	mov	r0, r6
 80074f8:	f7ff ffda 	bl	80074b0 <__sfputc_r>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d1f3      	bne.n	80074e8 <__sfputs_r+0xa>
 8007500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007504 <_vfiprintf_r>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	460d      	mov	r5, r1
 800750a:	b09d      	sub	sp, #116	@ 0x74
 800750c:	4614      	mov	r4, r2
 800750e:	4698      	mov	r8, r3
 8007510:	4606      	mov	r6, r0
 8007512:	b118      	cbz	r0, 800751c <_vfiprintf_r+0x18>
 8007514:	6a03      	ldr	r3, [r0, #32]
 8007516:	b90b      	cbnz	r3, 800751c <_vfiprintf_r+0x18>
 8007518:	f7fe fb6a 	bl	8005bf0 <__sinit>
 800751c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800751e:	07d9      	lsls	r1, r3, #31
 8007520:	d405      	bmi.n	800752e <_vfiprintf_r+0x2a>
 8007522:	89ab      	ldrh	r3, [r5, #12]
 8007524:	059a      	lsls	r2, r3, #22
 8007526:	d402      	bmi.n	800752e <_vfiprintf_r+0x2a>
 8007528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800752a:	f7fe fd5c 	bl	8005fe6 <__retarget_lock_acquire_recursive>
 800752e:	89ab      	ldrh	r3, [r5, #12]
 8007530:	071b      	lsls	r3, r3, #28
 8007532:	d501      	bpl.n	8007538 <_vfiprintf_r+0x34>
 8007534:	692b      	ldr	r3, [r5, #16]
 8007536:	b99b      	cbnz	r3, 8007560 <_vfiprintf_r+0x5c>
 8007538:	4629      	mov	r1, r5
 800753a:	4630      	mov	r0, r6
 800753c:	f7fe fc80 	bl	8005e40 <__swsetup_r>
 8007540:	b170      	cbz	r0, 8007560 <_vfiprintf_r+0x5c>
 8007542:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007544:	07dc      	lsls	r4, r3, #31
 8007546:	d504      	bpl.n	8007552 <_vfiprintf_r+0x4e>
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	b01d      	add	sp, #116	@ 0x74
 800754e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007552:	89ab      	ldrh	r3, [r5, #12]
 8007554:	0598      	lsls	r0, r3, #22
 8007556:	d4f7      	bmi.n	8007548 <_vfiprintf_r+0x44>
 8007558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800755a:	f7fe fd45 	bl	8005fe8 <__retarget_lock_release_recursive>
 800755e:	e7f3      	b.n	8007548 <_vfiprintf_r+0x44>
 8007560:	2300      	movs	r3, #0
 8007562:	9309      	str	r3, [sp, #36]	@ 0x24
 8007564:	2320      	movs	r3, #32
 8007566:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800756a:	f8cd 800c 	str.w	r8, [sp, #12]
 800756e:	2330      	movs	r3, #48	@ 0x30
 8007570:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007720 <_vfiprintf_r+0x21c>
 8007574:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007578:	f04f 0901 	mov.w	r9, #1
 800757c:	4623      	mov	r3, r4
 800757e:	469a      	mov	sl, r3
 8007580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007584:	b10a      	cbz	r2, 800758a <_vfiprintf_r+0x86>
 8007586:	2a25      	cmp	r2, #37	@ 0x25
 8007588:	d1f9      	bne.n	800757e <_vfiprintf_r+0x7a>
 800758a:	ebba 0b04 	subs.w	fp, sl, r4
 800758e:	d00b      	beq.n	80075a8 <_vfiprintf_r+0xa4>
 8007590:	465b      	mov	r3, fp
 8007592:	4622      	mov	r2, r4
 8007594:	4629      	mov	r1, r5
 8007596:	4630      	mov	r0, r6
 8007598:	f7ff ffa1 	bl	80074de <__sfputs_r>
 800759c:	3001      	adds	r0, #1
 800759e:	f000 80a7 	beq.w	80076f0 <_vfiprintf_r+0x1ec>
 80075a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a4:	445a      	add	r2, fp
 80075a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80075a8:	f89a 3000 	ldrb.w	r3, [sl]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 809f 	beq.w	80076f0 <_vfiprintf_r+0x1ec>
 80075b2:	2300      	movs	r3, #0
 80075b4:	f04f 32ff 	mov.w	r2, #4294967295
 80075b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075bc:	f10a 0a01 	add.w	sl, sl, #1
 80075c0:	9304      	str	r3, [sp, #16]
 80075c2:	9307      	str	r3, [sp, #28]
 80075c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80075ca:	4654      	mov	r4, sl
 80075cc:	2205      	movs	r2, #5
 80075ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d2:	4853      	ldr	r0, [pc, #332]	@ (8007720 <_vfiprintf_r+0x21c>)
 80075d4:	f7f8 fe84 	bl	80002e0 <memchr>
 80075d8:	9a04      	ldr	r2, [sp, #16]
 80075da:	b9d8      	cbnz	r0, 8007614 <_vfiprintf_r+0x110>
 80075dc:	06d1      	lsls	r1, r2, #27
 80075de:	bf44      	itt	mi
 80075e0:	2320      	movmi	r3, #32
 80075e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075e6:	0713      	lsls	r3, r2, #28
 80075e8:	bf44      	itt	mi
 80075ea:	232b      	movmi	r3, #43	@ 0x2b
 80075ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075f0:	f89a 3000 	ldrb.w	r3, [sl]
 80075f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80075f6:	d015      	beq.n	8007624 <_vfiprintf_r+0x120>
 80075f8:	9a07      	ldr	r2, [sp, #28]
 80075fa:	4654      	mov	r4, sl
 80075fc:	2000      	movs	r0, #0
 80075fe:	f04f 0c0a 	mov.w	ip, #10
 8007602:	4621      	mov	r1, r4
 8007604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007608:	3b30      	subs	r3, #48	@ 0x30
 800760a:	2b09      	cmp	r3, #9
 800760c:	d94b      	bls.n	80076a6 <_vfiprintf_r+0x1a2>
 800760e:	b1b0      	cbz	r0, 800763e <_vfiprintf_r+0x13a>
 8007610:	9207      	str	r2, [sp, #28]
 8007612:	e014      	b.n	800763e <_vfiprintf_r+0x13a>
 8007614:	eba0 0308 	sub.w	r3, r0, r8
 8007618:	fa09 f303 	lsl.w	r3, r9, r3
 800761c:	4313      	orrs	r3, r2
 800761e:	9304      	str	r3, [sp, #16]
 8007620:	46a2      	mov	sl, r4
 8007622:	e7d2      	b.n	80075ca <_vfiprintf_r+0xc6>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	1d19      	adds	r1, r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	9103      	str	r1, [sp, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	bfbb      	ittet	lt
 8007630:	425b      	neglt	r3, r3
 8007632:	f042 0202 	orrlt.w	r2, r2, #2
 8007636:	9307      	strge	r3, [sp, #28]
 8007638:	9307      	strlt	r3, [sp, #28]
 800763a:	bfb8      	it	lt
 800763c:	9204      	strlt	r2, [sp, #16]
 800763e:	7823      	ldrb	r3, [r4, #0]
 8007640:	2b2e      	cmp	r3, #46	@ 0x2e
 8007642:	d10a      	bne.n	800765a <_vfiprintf_r+0x156>
 8007644:	7863      	ldrb	r3, [r4, #1]
 8007646:	2b2a      	cmp	r3, #42	@ 0x2a
 8007648:	d132      	bne.n	80076b0 <_vfiprintf_r+0x1ac>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	1d1a      	adds	r2, r3, #4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	9203      	str	r2, [sp, #12]
 8007652:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007656:	3402      	adds	r4, #2
 8007658:	9305      	str	r3, [sp, #20]
 800765a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007730 <_vfiprintf_r+0x22c>
 800765e:	7821      	ldrb	r1, [r4, #0]
 8007660:	2203      	movs	r2, #3
 8007662:	4650      	mov	r0, sl
 8007664:	f7f8 fe3c 	bl	80002e0 <memchr>
 8007668:	b138      	cbz	r0, 800767a <_vfiprintf_r+0x176>
 800766a:	9b04      	ldr	r3, [sp, #16]
 800766c:	eba0 000a 	sub.w	r0, r0, sl
 8007670:	2240      	movs	r2, #64	@ 0x40
 8007672:	4082      	lsls	r2, r0
 8007674:	4313      	orrs	r3, r2
 8007676:	3401      	adds	r4, #1
 8007678:	9304      	str	r3, [sp, #16]
 800767a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767e:	4829      	ldr	r0, [pc, #164]	@ (8007724 <_vfiprintf_r+0x220>)
 8007680:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007684:	2206      	movs	r2, #6
 8007686:	f7f8 fe2b 	bl	80002e0 <memchr>
 800768a:	2800      	cmp	r0, #0
 800768c:	d03f      	beq.n	800770e <_vfiprintf_r+0x20a>
 800768e:	4b26      	ldr	r3, [pc, #152]	@ (8007728 <_vfiprintf_r+0x224>)
 8007690:	bb1b      	cbnz	r3, 80076da <_vfiprintf_r+0x1d6>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	3307      	adds	r3, #7
 8007696:	f023 0307 	bic.w	r3, r3, #7
 800769a:	3308      	adds	r3, #8
 800769c:	9303      	str	r3, [sp, #12]
 800769e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a0:	443b      	add	r3, r7
 80076a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a4:	e76a      	b.n	800757c <_vfiprintf_r+0x78>
 80076a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80076aa:	460c      	mov	r4, r1
 80076ac:	2001      	movs	r0, #1
 80076ae:	e7a8      	b.n	8007602 <_vfiprintf_r+0xfe>
 80076b0:	2300      	movs	r3, #0
 80076b2:	3401      	adds	r4, #1
 80076b4:	9305      	str	r3, [sp, #20]
 80076b6:	4619      	mov	r1, r3
 80076b8:	f04f 0c0a 	mov.w	ip, #10
 80076bc:	4620      	mov	r0, r4
 80076be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076c2:	3a30      	subs	r2, #48	@ 0x30
 80076c4:	2a09      	cmp	r2, #9
 80076c6:	d903      	bls.n	80076d0 <_vfiprintf_r+0x1cc>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0c6      	beq.n	800765a <_vfiprintf_r+0x156>
 80076cc:	9105      	str	r1, [sp, #20]
 80076ce:	e7c4      	b.n	800765a <_vfiprintf_r+0x156>
 80076d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80076d4:	4604      	mov	r4, r0
 80076d6:	2301      	movs	r3, #1
 80076d8:	e7f0      	b.n	80076bc <_vfiprintf_r+0x1b8>
 80076da:	ab03      	add	r3, sp, #12
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	462a      	mov	r2, r5
 80076e0:	4b12      	ldr	r3, [pc, #72]	@ (800772c <_vfiprintf_r+0x228>)
 80076e2:	a904      	add	r1, sp, #16
 80076e4:	4630      	mov	r0, r6
 80076e6:	f7fd fe4f 	bl	8005388 <_printf_float>
 80076ea:	4607      	mov	r7, r0
 80076ec:	1c78      	adds	r0, r7, #1
 80076ee:	d1d6      	bne.n	800769e <_vfiprintf_r+0x19a>
 80076f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076f2:	07d9      	lsls	r1, r3, #31
 80076f4:	d405      	bmi.n	8007702 <_vfiprintf_r+0x1fe>
 80076f6:	89ab      	ldrh	r3, [r5, #12]
 80076f8:	059a      	lsls	r2, r3, #22
 80076fa:	d402      	bmi.n	8007702 <_vfiprintf_r+0x1fe>
 80076fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076fe:	f7fe fc73 	bl	8005fe8 <__retarget_lock_release_recursive>
 8007702:	89ab      	ldrh	r3, [r5, #12]
 8007704:	065b      	lsls	r3, r3, #25
 8007706:	f53f af1f 	bmi.w	8007548 <_vfiprintf_r+0x44>
 800770a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800770c:	e71e      	b.n	800754c <_vfiprintf_r+0x48>
 800770e:	ab03      	add	r3, sp, #12
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	462a      	mov	r2, r5
 8007714:	4b05      	ldr	r3, [pc, #20]	@ (800772c <_vfiprintf_r+0x228>)
 8007716:	a904      	add	r1, sp, #16
 8007718:	4630      	mov	r0, r6
 800771a:	f7fe f8bd 	bl	8005898 <_printf_i>
 800771e:	e7e4      	b.n	80076ea <_vfiprintf_r+0x1e6>
 8007720:	08007f18 	.word	0x08007f18
 8007724:	08007f22 	.word	0x08007f22
 8007728:	08005389 	.word	0x08005389
 800772c:	080074df 	.word	0x080074df
 8007730:	08007f1e 	.word	0x08007f1e

08007734 <__sflush_r>:
 8007734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800773c:	0716      	lsls	r6, r2, #28
 800773e:	4605      	mov	r5, r0
 8007740:	460c      	mov	r4, r1
 8007742:	d454      	bmi.n	80077ee <__sflush_r+0xba>
 8007744:	684b      	ldr	r3, [r1, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	dc02      	bgt.n	8007750 <__sflush_r+0x1c>
 800774a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800774c:	2b00      	cmp	r3, #0
 800774e:	dd48      	ble.n	80077e2 <__sflush_r+0xae>
 8007750:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007752:	2e00      	cmp	r6, #0
 8007754:	d045      	beq.n	80077e2 <__sflush_r+0xae>
 8007756:	2300      	movs	r3, #0
 8007758:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800775c:	682f      	ldr	r7, [r5, #0]
 800775e:	6a21      	ldr	r1, [r4, #32]
 8007760:	602b      	str	r3, [r5, #0]
 8007762:	d030      	beq.n	80077c6 <__sflush_r+0x92>
 8007764:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	0759      	lsls	r1, r3, #29
 800776a:	d505      	bpl.n	8007778 <__sflush_r+0x44>
 800776c:	6863      	ldr	r3, [r4, #4]
 800776e:	1ad2      	subs	r2, r2, r3
 8007770:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007772:	b10b      	cbz	r3, 8007778 <__sflush_r+0x44>
 8007774:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007776:	1ad2      	subs	r2, r2, r3
 8007778:	2300      	movs	r3, #0
 800777a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800777c:	6a21      	ldr	r1, [r4, #32]
 800777e:	4628      	mov	r0, r5
 8007780:	47b0      	blx	r6
 8007782:	1c43      	adds	r3, r0, #1
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	d106      	bne.n	8007796 <__sflush_r+0x62>
 8007788:	6829      	ldr	r1, [r5, #0]
 800778a:	291d      	cmp	r1, #29
 800778c:	d82b      	bhi.n	80077e6 <__sflush_r+0xb2>
 800778e:	4a2a      	ldr	r2, [pc, #168]	@ (8007838 <__sflush_r+0x104>)
 8007790:	410a      	asrs	r2, r1
 8007792:	07d6      	lsls	r6, r2, #31
 8007794:	d427      	bmi.n	80077e6 <__sflush_r+0xb2>
 8007796:	2200      	movs	r2, #0
 8007798:	6062      	str	r2, [r4, #4]
 800779a:	04d9      	lsls	r1, r3, #19
 800779c:	6922      	ldr	r2, [r4, #16]
 800779e:	6022      	str	r2, [r4, #0]
 80077a0:	d504      	bpl.n	80077ac <__sflush_r+0x78>
 80077a2:	1c42      	adds	r2, r0, #1
 80077a4:	d101      	bne.n	80077aa <__sflush_r+0x76>
 80077a6:	682b      	ldr	r3, [r5, #0]
 80077a8:	b903      	cbnz	r3, 80077ac <__sflush_r+0x78>
 80077aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80077ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077ae:	602f      	str	r7, [r5, #0]
 80077b0:	b1b9      	cbz	r1, 80077e2 <__sflush_r+0xae>
 80077b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077b6:	4299      	cmp	r1, r3
 80077b8:	d002      	beq.n	80077c0 <__sflush_r+0x8c>
 80077ba:	4628      	mov	r0, r5
 80077bc:	f7ff f9f6 	bl	8006bac <_free_r>
 80077c0:	2300      	movs	r3, #0
 80077c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80077c4:	e00d      	b.n	80077e2 <__sflush_r+0xae>
 80077c6:	2301      	movs	r3, #1
 80077c8:	4628      	mov	r0, r5
 80077ca:	47b0      	blx	r6
 80077cc:	4602      	mov	r2, r0
 80077ce:	1c50      	adds	r0, r2, #1
 80077d0:	d1c9      	bne.n	8007766 <__sflush_r+0x32>
 80077d2:	682b      	ldr	r3, [r5, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0c6      	beq.n	8007766 <__sflush_r+0x32>
 80077d8:	2b1d      	cmp	r3, #29
 80077da:	d001      	beq.n	80077e0 <__sflush_r+0xac>
 80077dc:	2b16      	cmp	r3, #22
 80077de:	d11e      	bne.n	800781e <__sflush_r+0xea>
 80077e0:	602f      	str	r7, [r5, #0]
 80077e2:	2000      	movs	r0, #0
 80077e4:	e022      	b.n	800782c <__sflush_r+0xf8>
 80077e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ea:	b21b      	sxth	r3, r3
 80077ec:	e01b      	b.n	8007826 <__sflush_r+0xf2>
 80077ee:	690f      	ldr	r7, [r1, #16]
 80077f0:	2f00      	cmp	r7, #0
 80077f2:	d0f6      	beq.n	80077e2 <__sflush_r+0xae>
 80077f4:	0793      	lsls	r3, r2, #30
 80077f6:	680e      	ldr	r6, [r1, #0]
 80077f8:	bf08      	it	eq
 80077fa:	694b      	ldreq	r3, [r1, #20]
 80077fc:	600f      	str	r7, [r1, #0]
 80077fe:	bf18      	it	ne
 8007800:	2300      	movne	r3, #0
 8007802:	eba6 0807 	sub.w	r8, r6, r7
 8007806:	608b      	str	r3, [r1, #8]
 8007808:	f1b8 0f00 	cmp.w	r8, #0
 800780c:	dde9      	ble.n	80077e2 <__sflush_r+0xae>
 800780e:	6a21      	ldr	r1, [r4, #32]
 8007810:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007812:	4643      	mov	r3, r8
 8007814:	463a      	mov	r2, r7
 8007816:	4628      	mov	r0, r5
 8007818:	47b0      	blx	r6
 800781a:	2800      	cmp	r0, #0
 800781c:	dc08      	bgt.n	8007830 <__sflush_r+0xfc>
 800781e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007826:	81a3      	strh	r3, [r4, #12]
 8007828:	f04f 30ff 	mov.w	r0, #4294967295
 800782c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007830:	4407      	add	r7, r0
 8007832:	eba8 0800 	sub.w	r8, r8, r0
 8007836:	e7e7      	b.n	8007808 <__sflush_r+0xd4>
 8007838:	dfbffffe 	.word	0xdfbffffe

0800783c <_fflush_r>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	690b      	ldr	r3, [r1, #16]
 8007840:	4605      	mov	r5, r0
 8007842:	460c      	mov	r4, r1
 8007844:	b913      	cbnz	r3, 800784c <_fflush_r+0x10>
 8007846:	2500      	movs	r5, #0
 8007848:	4628      	mov	r0, r5
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	b118      	cbz	r0, 8007856 <_fflush_r+0x1a>
 800784e:	6a03      	ldr	r3, [r0, #32]
 8007850:	b90b      	cbnz	r3, 8007856 <_fflush_r+0x1a>
 8007852:	f7fe f9cd 	bl	8005bf0 <__sinit>
 8007856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0f3      	beq.n	8007846 <_fflush_r+0xa>
 800785e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007860:	07d0      	lsls	r0, r2, #31
 8007862:	d404      	bmi.n	800786e <_fflush_r+0x32>
 8007864:	0599      	lsls	r1, r3, #22
 8007866:	d402      	bmi.n	800786e <_fflush_r+0x32>
 8007868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800786a:	f7fe fbbc 	bl	8005fe6 <__retarget_lock_acquire_recursive>
 800786e:	4628      	mov	r0, r5
 8007870:	4621      	mov	r1, r4
 8007872:	f7ff ff5f 	bl	8007734 <__sflush_r>
 8007876:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007878:	07da      	lsls	r2, r3, #31
 800787a:	4605      	mov	r5, r0
 800787c:	d4e4      	bmi.n	8007848 <_fflush_r+0xc>
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	059b      	lsls	r3, r3, #22
 8007882:	d4e1      	bmi.n	8007848 <_fflush_r+0xc>
 8007884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007886:	f7fe fbaf 	bl	8005fe8 <__retarget_lock_release_recursive>
 800788a:	e7dd      	b.n	8007848 <_fflush_r+0xc>

0800788c <__swhatbuf_r>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	460c      	mov	r4, r1
 8007890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007894:	2900      	cmp	r1, #0
 8007896:	b096      	sub	sp, #88	@ 0x58
 8007898:	4615      	mov	r5, r2
 800789a:	461e      	mov	r6, r3
 800789c:	da0d      	bge.n	80078ba <__swhatbuf_r+0x2e>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078a4:	f04f 0100 	mov.w	r1, #0
 80078a8:	bf14      	ite	ne
 80078aa:	2340      	movne	r3, #64	@ 0x40
 80078ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078b0:	2000      	movs	r0, #0
 80078b2:	6031      	str	r1, [r6, #0]
 80078b4:	602b      	str	r3, [r5, #0]
 80078b6:	b016      	add	sp, #88	@ 0x58
 80078b8:	bd70      	pop	{r4, r5, r6, pc}
 80078ba:	466a      	mov	r2, sp
 80078bc:	f000 f848 	bl	8007950 <_fstat_r>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	dbec      	blt.n	800789e <__swhatbuf_r+0x12>
 80078c4:	9901      	ldr	r1, [sp, #4]
 80078c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80078ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80078ce:	4259      	negs	r1, r3
 80078d0:	4159      	adcs	r1, r3
 80078d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078d6:	e7eb      	b.n	80078b0 <__swhatbuf_r+0x24>

080078d8 <__smakebuf_r>:
 80078d8:	898b      	ldrh	r3, [r1, #12]
 80078da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078dc:	079d      	lsls	r5, r3, #30
 80078de:	4606      	mov	r6, r0
 80078e0:	460c      	mov	r4, r1
 80078e2:	d507      	bpl.n	80078f4 <__smakebuf_r+0x1c>
 80078e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	6123      	str	r3, [r4, #16]
 80078ec:	2301      	movs	r3, #1
 80078ee:	6163      	str	r3, [r4, #20]
 80078f0:	b003      	add	sp, #12
 80078f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078f4:	ab01      	add	r3, sp, #4
 80078f6:	466a      	mov	r2, sp
 80078f8:	f7ff ffc8 	bl	800788c <__swhatbuf_r>
 80078fc:	9f00      	ldr	r7, [sp, #0]
 80078fe:	4605      	mov	r5, r0
 8007900:	4639      	mov	r1, r7
 8007902:	4630      	mov	r0, r6
 8007904:	f7ff f9c6 	bl	8006c94 <_malloc_r>
 8007908:	b948      	cbnz	r0, 800791e <__smakebuf_r+0x46>
 800790a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800790e:	059a      	lsls	r2, r3, #22
 8007910:	d4ee      	bmi.n	80078f0 <__smakebuf_r+0x18>
 8007912:	f023 0303 	bic.w	r3, r3, #3
 8007916:	f043 0302 	orr.w	r3, r3, #2
 800791a:	81a3      	strh	r3, [r4, #12]
 800791c:	e7e2      	b.n	80078e4 <__smakebuf_r+0xc>
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	6020      	str	r0, [r4, #0]
 8007922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007926:	81a3      	strh	r3, [r4, #12]
 8007928:	9b01      	ldr	r3, [sp, #4]
 800792a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800792e:	b15b      	cbz	r3, 8007948 <__smakebuf_r+0x70>
 8007930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007934:	4630      	mov	r0, r6
 8007936:	f000 f81d 	bl	8007974 <_isatty_r>
 800793a:	b128      	cbz	r0, 8007948 <__smakebuf_r+0x70>
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	f023 0303 	bic.w	r3, r3, #3
 8007942:	f043 0301 	orr.w	r3, r3, #1
 8007946:	81a3      	strh	r3, [r4, #12]
 8007948:	89a3      	ldrh	r3, [r4, #12]
 800794a:	431d      	orrs	r5, r3
 800794c:	81a5      	strh	r5, [r4, #12]
 800794e:	e7cf      	b.n	80078f0 <__smakebuf_r+0x18>

08007950 <_fstat_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d07      	ldr	r5, [pc, #28]	@ (8007970 <_fstat_r+0x20>)
 8007954:	2300      	movs	r3, #0
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	4611      	mov	r1, r2
 800795c:	602b      	str	r3, [r5, #0]
 800795e:	f7f9 fdba 	bl	80014d6 <_fstat>
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	d102      	bne.n	800796c <_fstat_r+0x1c>
 8007966:	682b      	ldr	r3, [r5, #0]
 8007968:	b103      	cbz	r3, 800796c <_fstat_r+0x1c>
 800796a:	6023      	str	r3, [r4, #0]
 800796c:	bd38      	pop	{r3, r4, r5, pc}
 800796e:	bf00      	nop
 8007970:	24000404 	.word	0x24000404

08007974 <_isatty_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4d06      	ldr	r5, [pc, #24]	@ (8007990 <_isatty_r+0x1c>)
 8007978:	2300      	movs	r3, #0
 800797a:	4604      	mov	r4, r0
 800797c:	4608      	mov	r0, r1
 800797e:	602b      	str	r3, [r5, #0]
 8007980:	f7f9 fdb9 	bl	80014f6 <_isatty>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_isatty_r+0x1a>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_isatty_r+0x1a>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	24000404 	.word	0x24000404

08007994 <_sbrk_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4d06      	ldr	r5, [pc, #24]	@ (80079b0 <_sbrk_r+0x1c>)
 8007998:	2300      	movs	r3, #0
 800799a:	4604      	mov	r4, r0
 800799c:	4608      	mov	r0, r1
 800799e:	602b      	str	r3, [r5, #0]
 80079a0:	f7f9 fdc2 	bl	8001528 <_sbrk>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_sbrk_r+0x1a>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_sbrk_r+0x1a>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	24000404 	.word	0x24000404

080079b4 <memcpy>:
 80079b4:	440a      	add	r2, r1
 80079b6:	4291      	cmp	r1, r2
 80079b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80079bc:	d100      	bne.n	80079c0 <memcpy+0xc>
 80079be:	4770      	bx	lr
 80079c0:	b510      	push	{r4, lr}
 80079c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ca:	4291      	cmp	r1, r2
 80079cc:	d1f9      	bne.n	80079c2 <memcpy+0xe>
 80079ce:	bd10      	pop	{r4, pc}

080079d0 <__assert_func>:
 80079d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079d2:	4614      	mov	r4, r2
 80079d4:	461a      	mov	r2, r3
 80079d6:	4b09      	ldr	r3, [pc, #36]	@ (80079fc <__assert_func+0x2c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4605      	mov	r5, r0
 80079dc:	68d8      	ldr	r0, [r3, #12]
 80079de:	b954      	cbnz	r4, 80079f6 <__assert_func+0x26>
 80079e0:	4b07      	ldr	r3, [pc, #28]	@ (8007a00 <__assert_func+0x30>)
 80079e2:	461c      	mov	r4, r3
 80079e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079e8:	9100      	str	r1, [sp, #0]
 80079ea:	462b      	mov	r3, r5
 80079ec:	4905      	ldr	r1, [pc, #20]	@ (8007a04 <__assert_func+0x34>)
 80079ee:	f000 f841 	bl	8007a74 <fiprintf>
 80079f2:	f000 f851 	bl	8007a98 <abort>
 80079f6:	4b04      	ldr	r3, [pc, #16]	@ (8007a08 <__assert_func+0x38>)
 80079f8:	e7f4      	b.n	80079e4 <__assert_func+0x14>
 80079fa:	bf00      	nop
 80079fc:	24000024 	.word	0x24000024
 8007a00:	08007f6e 	.word	0x08007f6e
 8007a04:	08007f40 	.word	0x08007f40
 8007a08:	08007f33 	.word	0x08007f33

08007a0c <_calloc_r>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	fba1 5402 	umull	r5, r4, r1, r2
 8007a12:	b93c      	cbnz	r4, 8007a24 <_calloc_r+0x18>
 8007a14:	4629      	mov	r1, r5
 8007a16:	f7ff f93d 	bl	8006c94 <_malloc_r>
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	b928      	cbnz	r0, 8007a2a <_calloc_r+0x1e>
 8007a1e:	2600      	movs	r6, #0
 8007a20:	4630      	mov	r0, r6
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	220c      	movs	r2, #12
 8007a26:	6002      	str	r2, [r0, #0]
 8007a28:	e7f9      	b.n	8007a1e <_calloc_r+0x12>
 8007a2a:	462a      	mov	r2, r5
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	f7fe fa5d 	bl	8005eec <memset>
 8007a32:	e7f5      	b.n	8007a20 <_calloc_r+0x14>

08007a34 <__ascii_mbtowc>:
 8007a34:	b082      	sub	sp, #8
 8007a36:	b901      	cbnz	r1, 8007a3a <__ascii_mbtowc+0x6>
 8007a38:	a901      	add	r1, sp, #4
 8007a3a:	b142      	cbz	r2, 8007a4e <__ascii_mbtowc+0x1a>
 8007a3c:	b14b      	cbz	r3, 8007a52 <__ascii_mbtowc+0x1e>
 8007a3e:	7813      	ldrb	r3, [r2, #0]
 8007a40:	600b      	str	r3, [r1, #0]
 8007a42:	7812      	ldrb	r2, [r2, #0]
 8007a44:	1e10      	subs	r0, r2, #0
 8007a46:	bf18      	it	ne
 8007a48:	2001      	movne	r0, #1
 8007a4a:	b002      	add	sp, #8
 8007a4c:	4770      	bx	lr
 8007a4e:	4610      	mov	r0, r2
 8007a50:	e7fb      	b.n	8007a4a <__ascii_mbtowc+0x16>
 8007a52:	f06f 0001 	mvn.w	r0, #1
 8007a56:	e7f8      	b.n	8007a4a <__ascii_mbtowc+0x16>

08007a58 <__ascii_wctomb>:
 8007a58:	4603      	mov	r3, r0
 8007a5a:	4608      	mov	r0, r1
 8007a5c:	b141      	cbz	r1, 8007a70 <__ascii_wctomb+0x18>
 8007a5e:	2aff      	cmp	r2, #255	@ 0xff
 8007a60:	d904      	bls.n	8007a6c <__ascii_wctomb+0x14>
 8007a62:	228a      	movs	r2, #138	@ 0x8a
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6a:	4770      	bx	lr
 8007a6c:	700a      	strb	r2, [r1, #0]
 8007a6e:	2001      	movs	r0, #1
 8007a70:	4770      	bx	lr
	...

08007a74 <fiprintf>:
 8007a74:	b40e      	push	{r1, r2, r3}
 8007a76:	b503      	push	{r0, r1, lr}
 8007a78:	4601      	mov	r1, r0
 8007a7a:	ab03      	add	r3, sp, #12
 8007a7c:	4805      	ldr	r0, [pc, #20]	@ (8007a94 <fiprintf+0x20>)
 8007a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a82:	6800      	ldr	r0, [r0, #0]
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	f7ff fd3d 	bl	8007504 <_vfiprintf_r>
 8007a8a:	b002      	add	sp, #8
 8007a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a90:	b003      	add	sp, #12
 8007a92:	4770      	bx	lr
 8007a94:	24000024 	.word	0x24000024

08007a98 <abort>:
 8007a98:	b508      	push	{r3, lr}
 8007a9a:	2006      	movs	r0, #6
 8007a9c:	f000 f82c 	bl	8007af8 <raise>
 8007aa0:	2001      	movs	r0, #1
 8007aa2:	f7f9 fce4 	bl	800146e <_exit>

08007aa6 <_raise_r>:
 8007aa6:	291f      	cmp	r1, #31
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4605      	mov	r5, r0
 8007aac:	460c      	mov	r4, r1
 8007aae:	d904      	bls.n	8007aba <_raise_r+0x14>
 8007ab0:	2316      	movs	r3, #22
 8007ab2:	6003      	str	r3, [r0, #0]
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab8:	bd38      	pop	{r3, r4, r5, pc}
 8007aba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007abc:	b112      	cbz	r2, 8007ac4 <_raise_r+0x1e>
 8007abe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ac2:	b94b      	cbnz	r3, 8007ad8 <_raise_r+0x32>
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 f831 	bl	8007b2c <_getpid_r>
 8007aca:	4622      	mov	r2, r4
 8007acc:	4601      	mov	r1, r0
 8007ace:	4628      	mov	r0, r5
 8007ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ad4:	f000 b818 	b.w	8007b08 <_kill_r>
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d00a      	beq.n	8007af2 <_raise_r+0x4c>
 8007adc:	1c59      	adds	r1, r3, #1
 8007ade:	d103      	bne.n	8007ae8 <_raise_r+0x42>
 8007ae0:	2316      	movs	r3, #22
 8007ae2:	6003      	str	r3, [r0, #0]
 8007ae4:	2001      	movs	r0, #1
 8007ae6:	e7e7      	b.n	8007ab8 <_raise_r+0x12>
 8007ae8:	2100      	movs	r1, #0
 8007aea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007aee:	4620      	mov	r0, r4
 8007af0:	4798      	blx	r3
 8007af2:	2000      	movs	r0, #0
 8007af4:	e7e0      	b.n	8007ab8 <_raise_r+0x12>
	...

08007af8 <raise>:
 8007af8:	4b02      	ldr	r3, [pc, #8]	@ (8007b04 <raise+0xc>)
 8007afa:	4601      	mov	r1, r0
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	f7ff bfd2 	b.w	8007aa6 <_raise_r>
 8007b02:	bf00      	nop
 8007b04:	24000024 	.word	0x24000024

08007b08 <_kill_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	@ (8007b28 <_kill_r+0x20>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	4611      	mov	r1, r2
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	f7f9 fc9a 	bl	800144e <_kill>
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	d102      	bne.n	8007b24 <_kill_r+0x1c>
 8007b1e:	682b      	ldr	r3, [r5, #0]
 8007b20:	b103      	cbz	r3, 8007b24 <_kill_r+0x1c>
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	bd38      	pop	{r3, r4, r5, pc}
 8007b26:	bf00      	nop
 8007b28:	24000404 	.word	0x24000404

08007b2c <_getpid_r>:
 8007b2c:	f7f9 bc87 	b.w	800143e <_getpid>

08007b30 <_init>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	bf00      	nop
 8007b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b36:	bc08      	pop	{r3}
 8007b38:	469e      	mov	lr, r3
 8007b3a:	4770      	bx	lr

08007b3c <_fini>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	bf00      	nop
 8007b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b42:	bc08      	pop	{r3}
 8007b44:	469e      	mov	lr, r3
 8007b46:	4770      	bx	lr
