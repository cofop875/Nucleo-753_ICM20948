
Nucleo-753_ICM20948.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c58  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08007ef8  08007ef8  00008ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080083c8  080083c8  000093c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080083d0  080083d0  000093d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080083d4  080083d4  000093d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  080083d8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000234  240001e0  080085b8  0000a1e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000414  080085b8  0000a414  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c50f  00000000  00000000  0000a20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ee9  00000000  00000000  0001671d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a30  00000000  00000000  00018608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000792  00000000  00000000  00019038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037071  00000000  00000000  000197ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d43a  00000000  00000000  0005083b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00158c39  00000000  00000000  0005dc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b68ae  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000036f8  00000000  00000000  001b68f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  001b9fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007ee0 	.word	0x08007ee0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08007ee0 	.word	0x08007ee0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <ICM20948_CS_Select>:


/**
 * @brief Selects ICM-20948 SPI Chip Select (CS) pin (set to low).
 */
void ICM20948_CS_Select(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800039a:	4802      	ldr	r0, [pc, #8]	@ (80003a4 <ICM20948_CS_Select+0x14>)
 800039c:	f001 fc4a 	bl	8001c34 <HAL_GPIO_WritePin>
    // A small delay might be needed after CS assert for some devices/speeds
    // for (volatile int i = 0; i < 10; i++); // Basic short delay
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	58020400 	.word	0x58020400

080003a8 <ICM20948_CS_Deselect>:

/**
 * @brief Deselects ICM-20948 SPI Chip Select (CS) pin (set to high).
 */
void ICM20948_CS_Deselect(void) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003b2:	4802      	ldr	r0, [pc, #8]	@ (80003bc <ICM20948_CS_Deselect+0x14>)
 80003b4:	f001 fc3e 	bl	8001c34 <HAL_GPIO_WritePin>
    // A small delay might be needed after CS de-assert
    // for (volatile int i = 0; i < 10; i++);
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	58020400 	.word	0x58020400

080003c0 <ICM20948_WriteByte>:
 * @brief Writes a single byte to the specified register of ICM-20948 via SPI.
 * @param reg_addr: Target register address.
 * @param data: Data to be written.
 * @return HAL_StatusTypeDef: HAL operation status.
 */
HAL_StatusTypeDef ICM20948_WriteByte(uint8_t reg_addr, uint8_t data) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	460a      	mov	r2, r1
 80003ca:	71fb      	strb	r3, [r7, #7]
 80003cc:	4613      	mov	r3, r2
 80003ce:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2];
    tx_data[0] = reg_addr & 0x7F; // MSB=0 for write
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	733b      	strb	r3, [r7, #12]
    tx_data[1] = data;
 80003da:	79bb      	ldrb	r3, [r7, #6]
 80003dc:	737b      	strb	r3, [r7, #13]

    ICM20948_CS_Select();
 80003de:	f7ff ffd7 	bl	8000390 <ICM20948_CS_Select>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi1, tx_data, 2, SPI_TIMEOUT);
 80003e2:	f107 010c 	add.w	r1, r7, #12
 80003e6:	2364      	movs	r3, #100	@ 0x64
 80003e8:	2202      	movs	r2, #2
 80003ea:	4806      	ldr	r0, [pc, #24]	@ (8000404 <ICM20948_WriteByte+0x44>)
 80003ec:	f004 f892 	bl	8004514 <HAL_SPI_Transmit>
 80003f0:	4603      	mov	r3, r0
 80003f2:	73fb      	strb	r3, [r7, #15]
    ICM20948_CS_Deselect();
 80003f4:	f7ff ffd8 	bl	80003a8 <ICM20948_CS_Deselect>
    return status;
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	24000238 	.word	0x24000238

08000408 <ICM20948_ReadByte>:
 * @brief Reads a single byte from the specified register of ICM-20948 via SPI.
 * @param reg_addr: Target register address.
 * @param pData: Pointer to store the read data.
 * @return HAL_StatusTypeDef: HAL operation status.
 */
HAL_StatusTypeDef ICM20948_ReadByte(uint8_t reg_addr, uint8_t *pData) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af02      	add	r7, sp, #8
 800040e:	4603      	mov	r3, r0
 8000410:	6039      	str	r1, [r7, #0]
 8000412:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte = reg_addr | 0x80; // MSB=1 for read
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800041a:	b2db      	uxtb	r3, r3
 800041c:	73bb      	strb	r3, [r7, #14]
    uint8_t rx_byte;

    ICM20948_CS_Select();
 800041e:	f7ff ffb7 	bl	8000390 <ICM20948_CS_Select>
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi1, &tx_byte, &rx_byte, 1, SPI_TIMEOUT); // Send reg addr
 8000422:	f107 020d 	add.w	r2, r7, #13
 8000426:	f107 010e 	add.w	r1, r7, #14
 800042a:	2364      	movs	r3, #100	@ 0x64
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	2301      	movs	r3, #1
 8000430:	480b      	ldr	r0, [pc, #44]	@ (8000460 <ICM20948_ReadByte+0x58>)
 8000432:	f004 fccf 	bl	8004dd4 <HAL_SPI_TransmitReceive>
 8000436:	4603      	mov	r3, r0
 8000438:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d107      	bne.n	8000450 <ICM20948_ReadByte+0x48>
        status = HAL_SPI_Receive(&hspi1, pData, 1, SPI_TIMEOUT); // Receive data
 8000440:	2364      	movs	r3, #100	@ 0x64
 8000442:	2201      	movs	r2, #1
 8000444:	6839      	ldr	r1, [r7, #0]
 8000446:	4806      	ldr	r0, [pc, #24]	@ (8000460 <ICM20948_ReadByte+0x58>)
 8000448:	f004 fa52 	bl	80048f0 <HAL_SPI_Receive>
 800044c:	4603      	mov	r3, r0
 800044e:	73fb      	strb	r3, [r7, #15]
    }
    ICM20948_CS_Deselect();
 8000450:	f7ff ffaa 	bl	80003a8 <ICM20948_CS_Deselect>
    return status;
 8000454:	7bfb      	ldrb	r3, [r7, #15]
}
 8000456:	4618      	mov	r0, r3
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	24000238 	.word	0x24000238

08000464 <ICM20948_ReadBytes>:
 * @param reg_addr: Starting target register address.
 * @param pData: Pointer to buffer to store read data.
 * @param count: Number of bytes to read.
 * @return HAL_StatusTypeDef: HAL operation status.
 */
HAL_StatusTypeDef ICM20948_ReadBytes(uint8_t reg_addr, uint8_t *pData, uint16_t count) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	6039      	str	r1, [r7, #0]
 800046e:	71fb      	strb	r3, [r7, #7]
 8000470:	4613      	mov	r3, r2
 8000472:	80bb      	strh	r3, [r7, #4]
    uint8_t tx_byte = reg_addr | 0x80; // MSB=1 for read
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800047a:	b2db      	uxtb	r3, r3
 800047c:	73bb      	strb	r3, [r7, #14]

    ICM20948_CS_Select();
 800047e:	f7ff ff87 	bl	8000390 <ICM20948_CS_Select>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi1, &tx_byte, 1, SPI_TIMEOUT); // Send reg addr
 8000482:	f107 010e 	add.w	r1, r7, #14
 8000486:	2364      	movs	r3, #100	@ 0x64
 8000488:	2201      	movs	r2, #1
 800048a:	480b      	ldr	r0, [pc, #44]	@ (80004b8 <ICM20948_ReadBytes+0x54>)
 800048c:	f004 f842 	bl	8004514 <HAL_SPI_Transmit>
 8000490:	4603      	mov	r3, r0
 8000492:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d107      	bne.n	80004aa <ICM20948_ReadBytes+0x46>
        status = HAL_SPI_Receive(&hspi1, pData, count, SPI_TIMEOUT); // Receive data
 800049a:	88ba      	ldrh	r2, [r7, #4]
 800049c:	2364      	movs	r3, #100	@ 0x64
 800049e:	6839      	ldr	r1, [r7, #0]
 80004a0:	4805      	ldr	r0, [pc, #20]	@ (80004b8 <ICM20948_ReadBytes+0x54>)
 80004a2:	f004 fa25 	bl	80048f0 <HAL_SPI_Receive>
 80004a6:	4603      	mov	r3, r0
 80004a8:	73fb      	strb	r3, [r7, #15]
    }
    ICM20948_CS_Deselect();
 80004aa:	f7ff ff7d 	bl	80003a8 <ICM20948_CS_Deselect>
    return status;
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	24000238 	.word	0x24000238

080004bc <ICM20948_SelectUserBank>:
/**
 * @brief Selects the user bank on ICM-20948.
 * @param bank: User bank number (0, 1, 2, or 3).
 * @return HAL_StatusTypeDef: HAL operation status.
 */
HAL_StatusTypeDef ICM20948_SelectUserBank(uint8_t bank) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
    if (bank > 3) return HAL_ERROR;
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d901      	bls.n	80004d0 <ICM20948_SelectUserBank+0x14>
 80004cc:	2301      	movs	r3, #1
 80004ce:	e007      	b.n	80004e0 <ICM20948_SelectUserBank+0x24>
    return ICM20948_WriteByte(ICM20948_REG_BANK_SEL, (bank << 4));
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4619      	mov	r1, r3
 80004d8:	207f      	movs	r0, #127	@ 0x7f
 80004da:	f7ff ff71 	bl	80003c0 <ICM20948_WriteByte>
 80004de:	4603      	mov	r3, r0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <AK09916_WriteByteViaICM>:
 * @brief Writes a byte to AK09916 magnetometer via ICM-20948's I2C Master interface.
 * @param reg_addr: AK09916 target register address.
 * @param data: Data to write.
 * @return HAL_StatusTypeDef: HAL operation status.
 */
HAL_StatusTypeDef AK09916_WriteByteViaICM(uint8_t reg_addr, uint8_t data) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;

    status = ICM20948_SelectUserBank(3);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f7ff ffdf 	bl	80004bc <ICM20948_SelectUserBank>
 80004fe:	4603      	mov	r3, r0
 8000500:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <AK09916_WriteByteViaICM+0x24>
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	e042      	b.n	8000592 <AK09916_WriteByteViaICM+0xaa>

    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR); // Slave address for write
 800050c:	210c      	movs	r1, #12
 800050e:	2003      	movs	r0, #3
 8000510:	f7ff ff56 	bl	80003c0 <ICM20948_WriteByte>
 8000514:	4603      	mov	r3, r0
 8000516:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d004      	beq.n	8000528 <AK09916_WriteByteViaICM+0x40>
 800051e:	2000      	movs	r0, #0
 8000520:	f7ff ffcc 	bl	80004bc <ICM20948_SelectUserBank>
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	e034      	b.n	8000592 <AK09916_WriteByteViaICM+0xaa>

    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr); // Register to write to
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4619      	mov	r1, r3
 800052c:	2004      	movs	r0, #4
 800052e:	f7ff ff47 	bl	80003c0 <ICM20948_WriteByte>
 8000532:	4603      	mov	r3, r0
 8000534:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d004      	beq.n	8000546 <AK09916_WriteByteViaICM+0x5e>
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff ffbd 	bl	80004bc <ICM20948_SelectUserBank>
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	e025      	b.n	8000592 <AK09916_WriteByteViaICM+0xaa>

    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_DO, data); // Data to write
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	4619      	mov	r1, r3
 800054a:	2006      	movs	r0, #6
 800054c:	f7ff ff38 	bl	80003c0 <ICM20948_WriteByte>
 8000550:	4603      	mov	r3, r0
 8000552:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d004      	beq.n	8000564 <AK09916_WriteByteViaICM+0x7c>
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff ffae 	bl	80004bc <ICM20948_SelectUserBank>
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	e016      	b.n	8000592 <AK09916_WriteByteViaICM+0xaa>

    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x81); // Enable SLV0, 1 byte transfer
 8000564:	2181      	movs	r1, #129	@ 0x81
 8000566:	2005      	movs	r0, #5
 8000568:	f7ff ff2a 	bl	80003c0 <ICM20948_WriteByte>
 800056c:	4603      	mov	r3, r0
 800056e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d004      	beq.n	8000580 <AK09916_WriteByteViaICM+0x98>
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff ffa0 	bl	80004bc <ICM20948_SelectUserBank>
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	e008      	b.n	8000592 <AK09916_WriteByteViaICM+0xaa>

    HAL_Delay(1); // Wait for I2C transaction to complete.
 8000580:	2001      	movs	r0, #1
 8000582:	f001 f893 	bl	80016ac <HAL_Delay>
    // Check for NACK (optional, requires reading I2C_MST_STATUS)
    // uint8_t i2c_mst_status;
    // ICM20948_ReadByte(0x00, &i2c_mst_status); // I2C_MST_STATUS in UB3
    // if (i2c_mst_status & 0x10) status = HAL_ERROR; // I2C_SLV0_NACK

    status = ICM20948_SelectUserBank(0);
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff ff98 	bl	80004bc <ICM20948_SelectUserBank>
 800058c:	4603      	mov	r3, r0
 800058e:	73fb      	strb	r3, [r7, #15]
    return status;
 8000590:	7bfb      	ldrb	r3, [r7, #15]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <AK09916_ReadByteViaICM>:
 * @brief Reads a byte from AK09916 magnetometer via ICM-20948's I2C Master interface.
 * @param reg_addr: AK09916 target register address.
 * @param pData: Pointer to store read data.
 * @return HAL_StatusTypeDef: HAL operation status.
 */
HAL_StatusTypeDef AK09916_ReadByteViaICM(uint8_t reg_addr, uint8_t *pData) {
 800059a:	b580      	push	{r7, lr}
 800059c:	b084      	sub	sp, #16
 800059e:	af00      	add	r7, sp, #0
 80005a0:	4603      	mov	r3, r0
 80005a2:	6039      	str	r1, [r7, #0]
 80005a4:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;

    status = ICM20948_SelectUserBank(3);
 80005a6:	2003      	movs	r0, #3
 80005a8:	f7ff ff88 	bl	80004bc <ICM20948_SelectUserBank>
 80005ac:	4603      	mov	r3, r0
 80005ae:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <AK09916_ReadByteViaICM+0x20>
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	e03e      	b.n	8000638 <AK09916_ReadByteViaICM+0x9e>

    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR | 0x80); // Slave address for read
 80005ba:	218c      	movs	r1, #140	@ 0x8c
 80005bc:	2003      	movs	r0, #3
 80005be:	f7ff feff 	bl	80003c0 <ICM20948_WriteByte>
 80005c2:	4603      	mov	r3, r0
 80005c4:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d004      	beq.n	80005d6 <AK09916_ReadByteViaICM+0x3c>
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff ff75 	bl	80004bc <ICM20948_SelectUserBank>
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	e030      	b.n	8000638 <AK09916_ReadByteViaICM+0x9e>

    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr); // Register to read from
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4619      	mov	r1, r3
 80005da:	2004      	movs	r0, #4
 80005dc:	f7ff fef0 	bl	80003c0 <ICM20948_WriteByte>
 80005e0:	4603      	mov	r3, r0
 80005e2:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d004      	beq.n	80005f4 <AK09916_ReadByteViaICM+0x5a>
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ff66 	bl	80004bc <ICM20948_SelectUserBank>
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	e021      	b.n	8000638 <AK09916_ReadByteViaICM+0x9e>

    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x81); // Enable SLV0, 1 byte read
 80005f4:	2181      	movs	r1, #129	@ 0x81
 80005f6:	2005      	movs	r0, #5
 80005f8:	f7ff fee2 	bl	80003c0 <ICM20948_WriteByte>
 80005fc:	4603      	mov	r3, r0
 80005fe:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d004      	beq.n	8000610 <AK09916_ReadByteViaICM+0x76>
 8000606:	2000      	movs	r0, #0
 8000608:	f7ff ff58 	bl	80004bc <ICM20948_SelectUserBank>
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	e013      	b.n	8000638 <AK09916_ReadByteViaICM+0x9e>

    HAL_Delay(2); // Wait for I2C transaction and data to appear in EXT_SLV_SENS_DATA
 8000610:	2002      	movs	r0, #2
 8000612:	f001 f84b 	bl	80016ac <HAL_Delay>

    status = ICM20948_SelectUserBank(0); // Switch to UB0 to read EXT_SLV_SENS_DATA
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ff50 	bl	80004bc <ICM20948_SelectUserBank>
 800061c:	4603      	mov	r3, r0
 800061e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <AK09916_ReadByteViaICM+0x90>
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	e006      	b.n	8000638 <AK09916_ReadByteViaICM+0x9e>

    status = ICM20948_ReadByte(ICM20948_EXT_SLV_SENS_DATA_00, pData);
 800062a:	6839      	ldr	r1, [r7, #0]
 800062c:	203b      	movs	r0, #59	@ 0x3b
 800062e:	f7ff feeb 	bl	8000408 <ICM20948_ReadByte>
 8000632:	4603      	mov	r3, r0
 8000634:	73fb      	strb	r3, [r7, #15]
    return status;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <ICM20948_Init>:

/**
 * @brief Initializes the ICM-20948 sensor.
 * @return HAL_StatusTypeDef: HAL_OK if successful, HAL_ERROR otherwise.
 */
HAL_StatusTypeDef ICM20948_Init(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;
    uint8_t who_am_i_val;
    uint8_t ak09916_wia_val;

    // 0. Make sure CS is high initially
    ICM20948_CS_Deselect();
 8000646:	f7ff feaf 	bl	80003a8 <ICM20948_CS_Deselect>
    HAL_Delay(10); // Power-on delay
 800064a:	200a      	movs	r0, #10
 800064c:	f001 f82e 	bl	80016ac <HAL_Delay>

    // 1. Select User Bank 0
    status = ICM20948_SelectUserBank(0);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ff33 	bl	80004bc <ICM20948_SelectUserBank>
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <ICM20948_Init+0x24>
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	e149      	b.n	80008f8 <ICM20948_Init+0x2b8>

    // 2. Check WHO_AM_I
    status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 8000664:	1dbb      	adds	r3, r7, #6
 8000666:	4619      	mov	r1, r3
 8000668:	2000      	movs	r0, #0
 800066a:	f7ff fecd 	bl	8000408 <ICM20948_ReadByte>
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK || who_am_i_val != 0xEA) {
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <ICM20948_Init+0x3e>
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	2bea      	cmp	r3, #234	@ 0xea
 800067c:	d001      	beq.n	8000682 <ICM20948_Init+0x42>
        return HAL_ERROR; // WHO_AM_I check failed
 800067e:	2301      	movs	r3, #1
 8000680:	e13a      	b.n	80008f8 <ICM20948_Init+0x2b8>
    }

    // 3. Reset device
    status = ICM20948_WriteByte(ICM20948_PWR_MGMT_1, 0x80); // Set DEVICE_RESET bit
 8000682:	2180      	movs	r1, #128	@ 0x80
 8000684:	2006      	movs	r0, #6
 8000686:	f7ff fe9b 	bl	80003c0 <ICM20948_WriteByte>
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <ICM20948_Init+0x58>
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	e12f      	b.n	80008f8 <ICM20948_Init+0x2b8>
    HAL_Delay(100); // Wait for reset to complete
 8000698:	2064      	movs	r0, #100	@ 0x64
 800069a:	f001 f807 	bl	80016ac <HAL_Delay>

    // 4. Wake up sensor and set clock source to auto select
    status = ICM20948_WriteByte(ICM20948_PWR_MGMT_1, 0x01); // CLKSEL = 1 (Auto), SLEEP = 0
 800069e:	2101      	movs	r1, #1
 80006a0:	2006      	movs	r0, #6
 80006a2:	f7ff fe8d 	bl	80003c0 <ICM20948_WriteByte>
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <ICM20948_Init+0x74>
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	e121      	b.n	80008f8 <ICM20948_Init+0x2b8>
    HAL_Delay(50);
 80006b4:	2032      	movs	r0, #50	@ 0x32
 80006b6:	f000 fff9 	bl	80016ac <HAL_Delay>

    // 5. Disable I2C Master interface initially if not needed yet by AK09916 setup
    //    Enable SPI interface (done by default, this register can disable it for I2C only mode)
    //    Ensure DMP is disabled
    status = ICM20948_WriteByte(ICM20948_USER_CTRL, 0x00); // Clear I2C_MST_EN, DMP_EN etc.
 80006ba:	2100      	movs	r1, #0
 80006bc:	2003      	movs	r0, #3
 80006be:	f7ff fe7f 	bl	80003c0 <ICM20948_WriteByte>
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <ICM20948_Init+0x90>
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	e113      	b.n	80008f8 <ICM20948_Init+0x2b8>

    // --- Configure Accelerometer and Gyroscope (User Bank 2) ---
    status = ICM20948_SelectUserBank(2);
 80006d0:	2002      	movs	r0, #2
 80006d2:	f7ff fef3 	bl	80004bc <ICM20948_SelectUserBank>
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <ICM20948_Init+0xa4>
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	e109      	b.n	80008f8 <ICM20948_Init+0x2b8>

    // 6. Configure Gyroscope:
    //    FS_SEL = 0 (+/-250 dps), GYRO_DLPFCFG = 1 (196.6Hz BW, 1.1kHz Fs_internal)
    //    Update current_gyro_sensitivity accordingly
    current_gyro_sensitivity = GYRO_SENSITIVITY_250DPS;
 80006e4:	4b86      	ldr	r3, [pc, #536]	@ (8000900 <ICM20948_Init+0x2c0>)
 80006e6:	4a87      	ldr	r2, [pc, #540]	@ (8000904 <ICM20948_Init+0x2c4>)
 80006e8:	601a      	str	r2, [r3, #0]
    status = ICM20948_WriteByte(ICM20948_GYRO_CONFIG_1, (0x00 << 1) | (0x01 << 3)); // FS_SEL=0, DLPFCFG=1
 80006ea:	2108      	movs	r1, #8
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff fe67 	bl	80003c0 <ICM20948_WriteByte>
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d004      	beq.n	8000706 <ICM20948_Init+0xc6>
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff fedd 	bl	80004bc <ICM20948_SelectUserBank>
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	e0f8      	b.n	80008f8 <ICM20948_Init+0x2b8>
    //    Set Gyro Sample Rate Divider: ODR = 1.1kHz / (1 + GYRO_SMPLRT_DIV)
    //    For ~100Hz: 1100 / (1+DIV) = 100 => 1+DIV=11 => DIV=10 (0x0A)
    status = ICM20948_WriteByte(ICM20948_GYRO_SMPLRT_DIV, 0x0A);
 8000706:	210a      	movs	r1, #10
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff fe59 	bl	80003c0 <ICM20948_WriteByte>
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d004      	beq.n	8000722 <ICM20948_Init+0xe2>
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff fecf 	bl	80004bc <ICM20948_SelectUserBank>
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	e0ea      	b.n	80008f8 <ICM20948_Init+0x2b8>

    // 7. Configure Accelerometer:
    //    ACCEL_FS_SEL = 0 (+/-2g), ACCEL_DLPFCFG = 1 (246Hz BW, 1.125kHz Fs_internal)
    //    Update current_accel_sensitivity accordingly
    current_accel_sensitivity = ACCEL_SENSITIVITY_2G;
 8000722:	4b79      	ldr	r3, [pc, #484]	@ (8000908 <ICM20948_Init+0x2c8>)
 8000724:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8000728:	601a      	str	r2, [r3, #0]
    status = ICM20948_WriteByte(ICM20948_ACCEL_CONFIG, (0x00 << 1) | (0x01 << 3)); // ACCEL_FS_SEL=0, ACCEL_DLPFCFG=1
 800072a:	2108      	movs	r1, #8
 800072c:	2014      	movs	r0, #20
 800072e:	f7ff fe47 	bl	80003c0 <ICM20948_WriteByte>
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d004      	beq.n	8000746 <ICM20948_Init+0x106>
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff febd 	bl	80004bc <ICM20948_SelectUserBank>
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	e0d8      	b.n	80008f8 <ICM20948_Init+0x2b8>
    //    Set Accel Sample Rate Divider: ODR = 1.125kHz / (1 + ACCEL_SMPLRT_DIV)
    //    For ~100Hz: 1125 / (1+DIV) = 100 => 1+DIV=11.25 => DIV=10 (0x000A)
    status = ICM20948_WriteByte(ICM20948_ACCEL_SMPLRT_DIV_1, 0x00); // High byte
 8000746:	2100      	movs	r1, #0
 8000748:	2010      	movs	r0, #16
 800074a:	f7ff fe39 	bl	80003c0 <ICM20948_WriteByte>
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d004      	beq.n	8000762 <ICM20948_Init+0x122>
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff feaf 	bl	80004bc <ICM20948_SelectUserBank>
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	e0ca      	b.n	80008f8 <ICM20948_Init+0x2b8>
    status = ICM20948_WriteByte(ICM20948_ACCEL_SMPLRT_DIV_2, 0x0A); // Low byte
 8000762:	210a      	movs	r1, #10
 8000764:	2011      	movs	r0, #17
 8000766:	f7ff fe2b 	bl	80003c0 <ICM20948_WriteByte>
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d004      	beq.n	800077e <ICM20948_Init+0x13e>
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff fea1 	bl	80004bc <ICM20948_SelectUserBank>
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	e0bc      	b.n	80008f8 <ICM20948_Init+0x2b8>

    // Return to User Bank 0
    status = ICM20948_SelectUserBank(0);
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff fe9c 	bl	80004bc <ICM20948_SelectUserBank>
 8000784:	4603      	mov	r3, r0
 8000786:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <ICM20948_Init+0x152>
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	e0b2      	b.n	80008f8 <ICM20948_Init+0x2b8>

    // --- Initialize AK09916 Magnetometer ---
    // 8. Enable I2C Master interface on ICM20948
    uint8_t user_ctrl_val;
    status = ICM20948_ReadByte(ICM20948_USER_CTRL, &user_ctrl_val);
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	2003      	movs	r0, #3
 8000798:	f7ff fe36 	bl	8000408 <ICM20948_ReadByte>
 800079c:	4603      	mov	r3, r0
 800079e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <ICM20948_Init+0x16a>
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	e0a6      	b.n	80008f8 <ICM20948_Init+0x2b8>
    status = ICM20948_WriteByte(ICM20948_USER_CTRL, user_ctrl_val | 0x20); // Set I2C_MST_EN
 80007aa:	793b      	ldrb	r3, [r7, #4]
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	4619      	mov	r1, r3
 80007b4:	2003      	movs	r0, #3
 80007b6:	f7ff fe03 	bl	80003c0 <ICM20948_WriteByte>
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <ICM20948_Init+0x188>
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	e097      	b.n	80008f8 <ICM20948_Init+0x2b8>
    HAL_Delay(10);
 80007c8:	200a      	movs	r0, #10
 80007ca:	f000 ff6f 	bl	80016ac <HAL_Delay>

    // 9. Configure I2C Master Clock Speed (User Bank 3)
    status = ICM20948_SelectUserBank(3);
 80007ce:	2003      	movs	r0, #3
 80007d0:	f7ff fe74 	bl	80004bc <ICM20948_SelectUserBank>
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d004      	beq.n	80007e8 <ICM20948_Init+0x1a8>
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff fe6c 	bl	80004bc <ICM20948_SelectUserBank>
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	e087      	b.n	80008f8 <ICM20948_Init+0x2b8>
    //    Set I2C_MST_CLK to ~400 kHz. Value 0x07 -> 345.6 kHz, 50% duty cycle
    status = ICM20948_WriteByte(ICM20948_I2C_MST_CTRL, 0x07);
 80007e8:	2107      	movs	r1, #7
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff fde8 	bl	80003c0 <ICM20948_WriteByte>
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d004      	beq.n	8000804 <ICM20948_Init+0x1c4>
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff fe5e 	bl	80004bc <ICM20948_SelectUserBank>
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	e079      	b.n	80008f8 <ICM20948_Init+0x2b8>
    // Return to User Bank 0 for AK09916 communication functions which handle bank switching
    status = ICM20948_SelectUserBank(0);
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff fe59 	bl	80004bc <ICM20948_SelectUserBank>
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <ICM20948_Init+0x1d8>
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	e06f      	b.n	80008f8 <ICM20948_Init+0x2b8>

    // 10. Reset AK09916
    status = AK09916_WriteByteViaICM(AK09916_CNTL3, 0x01); // Soft Reset
 8000818:	2101      	movs	r1, #1
 800081a:	2032      	movs	r0, #50	@ 0x32
 800081c:	f7ff fe64 	bl	80004e8 <AK09916_WriteByteViaICM>
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <ICM20948_Init+0x1ee>
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	e064      	b.n	80008f8 <ICM20948_Init+0x2b8>
    HAL_Delay(100); // Wait for AK09916 reset
 800082e:	2064      	movs	r0, #100	@ 0x64
 8000830:	f000 ff3c 	bl	80016ac <HAL_Delay>

    // 11. Check AK09916 WIA2 (Who I Am / Company ID)
    status = AK09916_ReadByteViaICM(AK09916_WIA2, &ak09916_wia_val);
 8000834:	1d7b      	adds	r3, r7, #5
 8000836:	4619      	mov	r1, r3
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff feae 	bl	800059a <AK09916_ReadByteViaICM>
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK || ak09916_wia_val != 0x09) { // Expected 0x48 for ID1, 0x09 for ID2
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <ICM20948_Init+0x20e>
 8000848:	797b      	ldrb	r3, [r7, #5]
 800084a:	2b09      	cmp	r3, #9
 800084c:	d001      	beq.n	8000852 <ICM20948_Init+0x212>
        return HAL_ERROR; // AK09916 WIA2 check failed
 800084e:	2301      	movs	r3, #1
 8000850:	e052      	b.n	80008f8 <ICM20948_Init+0x2b8>
    }

    // 12. Set AK09916 to Continuous Measurement Mode
    //     Mode 4: 100Hz (0x08)
    status = AK09916_WriteByteViaICM(AK09916_CNTL2, 0x08);
 8000852:	2108      	movs	r1, #8
 8000854:	2031      	movs	r0, #49	@ 0x31
 8000856:	f7ff fe47 	bl	80004e8 <AK09916_WriteByteViaICM>
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <ICM20948_Init+0x228>
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	e047      	b.n	80008f8 <ICM20948_Init+0x2b8>
    HAL_Delay(10); // Delay after mode set
 8000868:	200a      	movs	r0, #10
 800086a:	f000 ff1f 	bl	80016ac <HAL_Delay>

    // 13. Configure SLV0 to continuously read magnetometer data
    status = ICM20948_SelectUserBank(3);
 800086e:	2003      	movs	r0, #3
 8000870:	f7ff fe24 	bl	80004bc <ICM20948_SelectUserBank>
 8000874:	4603      	mov	r3, r0
 8000876:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d004      	beq.n	8000888 <ICM20948_Init+0x248>
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff fe1c 	bl	80004bc <ICM20948_SelectUserBank>
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	e037      	b.n	80008f8 <ICM20948_Init+0x2b8>

    //    Set SLV0 address to AK09916 for reading
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR | 0x80);
 8000888:	218c      	movs	r1, #140	@ 0x8c
 800088a:	2003      	movs	r0, #3
 800088c:	f7ff fd98 	bl	80003c0 <ICM20948_WriteByte>
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d004      	beq.n	80008a4 <ICM20948_Init+0x264>
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fe0e 	bl	80004bc <ICM20948_SelectUserBank>
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	e029      	b.n	80008f8 <ICM20948_Init+0x2b8>
    //    Set SLV0 register to start reading from AK09916_HXL
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, AK09916_HXL);
 80008a4:	2111      	movs	r1, #17
 80008a6:	2004      	movs	r0, #4
 80008a8:	f7ff fd8a 	bl	80003c0 <ICM20948_WriteByte>
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d004      	beq.n	80008c0 <ICM20948_Init+0x280>
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff fe00 	bl	80004bc <ICM20948_SelectUserBank>
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	e01b      	b.n	80008f8 <ICM20948_Init+0x2b8>
    //    Enable SLV0 to read 7 bytes (HXL to HZH, plus ST2)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | 7); // I2C_SLV0_EN | 7 bytes (0x87)
 80008c0:	2187      	movs	r1, #135	@ 0x87
 80008c2:	2005      	movs	r0, #5
 80008c4:	f7ff fd7c 	bl	80003c0 <ICM20948_WriteByte>
 80008c8:	4603      	mov	r3, r0
 80008ca:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return status; }
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d004      	beq.n	80008dc <ICM20948_Init+0x29c>
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff fdf2 	bl	80004bc <ICM20948_SelectUserBank>
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	e00d      	b.n	80008f8 <ICM20948_Init+0x2b8>

    // Return to User Bank 0
    status = ICM20948_SelectUserBank(0);
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff fded 	bl	80004bc <ICM20948_SelectUserBank>
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <ICM20948_Init+0x2b0>
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	e003      	b.n	80008f8 <ICM20948_Init+0x2b8>

    HAL_Delay(50); // Allow I2C master to make its first read.
 80008f0:	2032      	movs	r0, #50	@ 0x32
 80008f2:	f000 fedb 	bl	80016ac <HAL_Delay>

    return HAL_OK;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	24000004 	.word	0x24000004
 8000904:	43030000 	.word	0x43030000
 8000908:	24000000 	.word	0x24000000

0800090c <ICM20948_ReadAccelGyroRaw>:
 * @brief Reads raw accelerometer and gyroscope data from ICM-20948.
 * @param pAccel: Pointer to array to store raw accelerometer data (int16_t[3]).
 * @param pGyro:  Pointer to array to store raw gyroscope data (int16_t[3]).
 * @return HAL_StatusTypeDef: HAL operation status.
 */
HAL_StatusTypeDef ICM20948_ReadAccelGyroRaw(int16_t* pAccel, int16_t* pGyro) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
    uint8_t data_buf[12]; // 6 bytes for accel, 6 bytes for gyro
    HAL_StatusTypeDef status;

    status = ICM20948_SelectUserBank(0); // Data is in User Bank 0
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff fdd0 	bl	80004bc <ICM20948_SelectUserBank>
 800091c:	4603      	mov	r3, r0
 800091e:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000920:	7dfb      	ldrb	r3, [r7, #23]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <ICM20948_ReadAccelGyroRaw+0x1e>
 8000926:	7dfb      	ldrb	r3, [r7, #23]
 8000928:	e048      	b.n	80009bc <ICM20948_ReadAccelGyroRaw+0xb0>

    // Read ACCEL_XOUT_H to GYRO_ZOUT_L (12 bytes)
    status = ICM20948_ReadBytes(ICM20948_ACCEL_XOUT_H, data_buf, 12);
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	220c      	movs	r2, #12
 8000930:	4619      	mov	r1, r3
 8000932:	202d      	movs	r0, #45	@ 0x2d
 8000934:	f7ff fd96 	bl	8000464 <ICM20948_ReadBytes>
 8000938:	4603      	mov	r3, r0
 800093a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <ICM20948_ReadAccelGyroRaw+0x3a>
 8000942:	7dfb      	ldrb	r3, [r7, #23]
 8000944:	e03a      	b.n	80009bc <ICM20948_ReadAccelGyroRaw+0xb0>

    // Parse accelerometer data
    pAccel[0] = (int16_t)((data_buf[0] << 8) | data_buf[1]);  // Accel X
 8000946:	7a3b      	ldrb	r3, [r7, #8]
 8000948:	021b      	lsls	r3, r3, #8
 800094a:	b21a      	sxth	r2, r3
 800094c:	7a7b      	ldrb	r3, [r7, #9]
 800094e:	b21b      	sxth	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	b21a      	sxth	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	801a      	strh	r2, [r3, #0]
    pAccel[1] = (int16_t)((data_buf[2] << 8) | data_buf[3]);  // Accel Y
 8000958:	7abb      	ldrb	r3, [r7, #10]
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b219      	sxth	r1, r3
 800095e:	7afb      	ldrb	r3, [r7, #11]
 8000960:	b21a      	sxth	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3302      	adds	r3, #2
 8000966:	430a      	orrs	r2, r1
 8000968:	b212      	sxth	r2, r2
 800096a:	801a      	strh	r2, [r3, #0]
    pAccel[2] = (int16_t)((data_buf[4] << 8) | data_buf[5]);  // Accel Z
 800096c:	7b3b      	ldrb	r3, [r7, #12]
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b219      	sxth	r1, r3
 8000972:	7b7b      	ldrb	r3, [r7, #13]
 8000974:	b21a      	sxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3304      	adds	r3, #4
 800097a:	430a      	orrs	r2, r1
 800097c:	b212      	sxth	r2, r2
 800097e:	801a      	strh	r2, [r3, #0]

    // Parse gyroscope data
    pGyro[0] = (int16_t)((data_buf[6] << 8) | data_buf[7]);   // Gyro X
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	b21a      	sxth	r2, r3
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	b21b      	sxth	r3, r3
 800098a:	4313      	orrs	r3, r2
 800098c:	b21a      	sxth	r2, r3
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	801a      	strh	r2, [r3, #0]
    pGyro[1] = (int16_t)((data_buf[8] << 8) | data_buf[9]);   // Gyro Y
 8000992:	7c3b      	ldrb	r3, [r7, #16]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b219      	sxth	r1, r3
 8000998:	7c7b      	ldrb	r3, [r7, #17]
 800099a:	b21a      	sxth	r2, r3
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	3302      	adds	r3, #2
 80009a0:	430a      	orrs	r2, r1
 80009a2:	b212      	sxth	r2, r2
 80009a4:	801a      	strh	r2, [r3, #0]
    pGyro[2] = (int16_t)((data_buf[10] << 8) | data_buf[11]); // Gyro Z
 80009a6:	7cbb      	ldrb	r3, [r7, #18]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	b219      	sxth	r1, r3
 80009ac:	7cfb      	ldrb	r3, [r7, #19]
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	3304      	adds	r3, #4
 80009b4:	430a      	orrs	r2, r1
 80009b6:	b212      	sxth	r2, r2
 80009b8:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <ICM20948_ReadMagRaw>:
/**
 * @brief Reads raw magnetometer data from AK09916 (via ICM-20948 I2C Master).
 * @param pMag:   Pointer to array to store raw magnetometer data (int16_t[3]).
 * @return HAL_StatusTypeDef: HAL operation status.
 */
HAL_StatusTypeDef ICM20948_ReadMagRaw(int16_t* pMag) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
    // Optional: Check DRDY bit in AK09916_ST1 register before reading from EXT_SLV_SENS_DATA.
    // This would require an explicit single read via AK09916_ReadByteViaICM(AK09916_ST1, &st1_val);
    // For simplicity with continuous polling by SLV0, we read directly.
    // The ST2 register is read as the last byte to ensure AK09916 continues measurements.

    status = ICM20948_SelectUserBank(0); // Data is in User Bank 0
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff fd75 	bl	80004bc <ICM20948_SelectUserBank>
 80009d2:	4603      	mov	r3, r0
 80009d4:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <ICM20948_ReadMagRaw+0x1c>
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	e02b      	b.n	8000a38 <ICM20948_ReadMagRaw+0x74>

    status = ICM20948_ReadBytes(ICM20948_EXT_SLV_SENS_DATA_00, mag_data_buf, 7);
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	2207      	movs	r2, #7
 80009e6:	4619      	mov	r1, r3
 80009e8:	203b      	movs	r0, #59	@ 0x3b
 80009ea:	f7ff fd3b 	bl	8000464 <ICM20948_ReadBytes>
 80009ee:	4603      	mov	r3, r0
 80009f0:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <ICM20948_ReadMagRaw+0x38>
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	e01d      	b.n	8000a38 <ICM20948_ReadMagRaw+0x74>
    // A robust way for continuous mode is to ensure ST2 is read.
    // If mag_data_buf[6] (ST2) shows overflow (HOFL bit), data might be compromised.

    // Parse magnetometer data (Little Endian from AK09916)
    // HXL (LSB), HXH (MSB)
    pMag[0] = (int16_t)((mag_data_buf[1] << 8) | mag_data_buf[0]); // Mag X
 80009fc:	7a7b      	ldrb	r3, [r7, #9]
 80009fe:	021b      	lsls	r3, r3, #8
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	7a3b      	ldrb	r3, [r7, #8]
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	801a      	strh	r2, [r3, #0]
    pMag[1] = (int16_t)((mag_data_buf[3] << 8) | mag_data_buf[2]); // Mag Y
 8000a0e:	7afb      	ldrb	r3, [r7, #11]
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	b219      	sxth	r1, r3
 8000a14:	7abb      	ldrb	r3, [r7, #10]
 8000a16:	b21a      	sxth	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	b212      	sxth	r2, r2
 8000a20:	801a      	strh	r2, [r3, #0]
    pMag[2] = (int16_t)((mag_data_buf[5] << 8) | mag_data_buf[4]); // Mag Z
 8000a22:	7b7b      	ldrb	r3, [r7, #13]
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	b219      	sxth	r1, r3
 8000a28:	7b3b      	ldrb	r3, [r7, #12]
 8000a2a:	b21a      	sxth	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3304      	adds	r3, #4
 8000a30:	430a      	orrs	r2, r1
 8000a32:	b212      	sxth	r2, r2
 8000a34:	801a      	strh	r2, [r3, #0]

    // The 7th byte read (mag_data_buf[6]) is AK09916_ST2. Reading it is necessary
    // for continuous measurement modes of AK09916.

    return HAL_OK;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <ICM20948_ConvertAccelRawToG>:

/**
 * @brief Converts raw accelerometer data to g.
 */
void ICM20948_ConvertAccelRawToG(void) {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	e015      	b.n	8000a78 <ICM20948_ConvertAccelRawToG+0x38>
        accel_g[i] = (float)accel_raw[i] / current_accel_sensitivity;
 8000a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a8c <ICM20948_ConvertAccelRawToG+0x4c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a54:	ee07 3a90 	vmov	s15, r3
 8000a58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <ICM20948_ConvertAccelRawToG+0x50>)
 8000a5e:	ed93 7a00 	vldr	s14, [r3]
 8000a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a66:	4a0b      	ldr	r2, [pc, #44]	@ (8000a94 <ICM20948_ConvertAccelRawToG+0x54>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3301      	adds	r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	dde6      	ble.n	8000a4c <ICM20948_ConvertAccelRawToG+0xc>
    }
}
 8000a7e:	bf00      	nop
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	240001fc 	.word	0x240001fc
 8000a90:	24000000 	.word	0x24000000
 8000a94:	24000214 	.word	0x24000214

08000a98 <ICM20948_ConvertGyroRawToDps>:

/**
 * @brief Converts raw gyroscope data to dps.
 */
void ICM20948_ConvertGyroRawToDps(void) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	e015      	b.n	8000ad0 <ICM20948_ConvertGyroRawToDps+0x38>
        gyro_dps[i] = (float)gyro_raw[i] / current_gyro_sensitivity;
 8000aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae4 <ICM20948_ConvertGyroRawToDps+0x4c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <ICM20948_ConvertGyroRawToDps+0x50>)
 8000ab6:	ed93 7a00 	vldr	s14, [r3]
 8000aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000abe:	4a0b      	ldr	r2, [pc, #44]	@ (8000aec <ICM20948_ConvertGyroRawToDps+0x54>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4413      	add	r3, r2
 8000ac6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3301      	adds	r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	dde6      	ble.n	8000aa4 <ICM20948_ConvertGyroRawToDps+0xc>
    }
}
 8000ad6:	bf00      	nop
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	24000204 	.word	0x24000204
 8000ae8:	24000004 	.word	0x24000004
 8000aec:	24000220 	.word	0x24000220

08000af0 <ICM20948_ConvertMagRawToUT>:

/**
 * @brief Converts raw magnetometer data to microTesla.
 */
void ICM20948_ConvertMagRawToUT(void) {
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	e014      	b.n	8000b26 <ICM20948_ConvertMagRawToUT+0x36>
        mag_uT[i] = (float)mag_raw[i] * CURRENT_MAG_SENSITIVITY;
 8000afc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b3c <ICM20948_ConvertMagRawToUT+0x4c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000b04:	ee07 3a90 	vmov	s15, r3
 8000b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b0c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000b40 <ICM20948_ConvertMagRawToUT+0x50>
 8000b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b14:	4a0b      	ldr	r2, [pc, #44]	@ (8000b44 <ICM20948_ConvertMagRawToUT+0x54>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3301      	adds	r3, #1
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	dde7      	ble.n	8000afc <ICM20948_ConvertMagRawToUT+0xc>
    }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	2400020c 	.word	0x2400020c
 8000b40:	3e19999a 	.word	0x3e19999a
 8000b44:	2400022c 	.word	0x2400022c

08000b48 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b54:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d013      	beq.n	8000b88 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b64:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000b68:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00b      	beq.n	8000b88 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b70:	e000      	b.n	8000b74 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b72:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b74:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f9      	beq.n	8000b72 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b7e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af04      	add	r7, sp, #16
  //MPU_Config();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9e:	f000 fcf3 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba2:	f000 f8bb 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba6:	f000 f98b 	bl	8000ec0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000baa:	f000 f933 	bl	8000e14 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int WWE = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  printf("ICM-20948 Test Program\r\n");
 8000bb2:	4849      	ldr	r0, [pc, #292]	@ (8000cd8 <main+0x140>)
 8000bb4:	f005 fa92 	bl	80060dc <puts>

    // Initialize ICM-20948
    if (ICM20948_Init() == HAL_OK) {
 8000bb8:	f7ff fd42 	bl	8000640 <ICM20948_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d103      	bne.n	8000bca <main+0x32>
      printf("ICM-20948 Initialization OK\r\n");
 8000bc2:	4846      	ldr	r0, [pc, #280]	@ (8000cdc <main+0x144>)
 8000bc4:	f005 fa8a 	bl	80060dc <puts>
 8000bc8:	e004      	b.n	8000bd4 <main+0x3c>
    } else {
      printf("ICM-20948 Initialization FAILED\r\n");
 8000bca:	4845      	ldr	r0, [pc, #276]	@ (8000ce0 <main+0x148>)
 8000bcc:	f005 fa86 	bl	80060dc <puts>
      Error_Handler();
 8000bd0:	f000 fa46 	bl	8001060 <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Read raw sensor data
	      if (ICM20948_ReadAccelGyroRaw(accel_raw, gyro_raw) == HAL_OK) {
 8000bd4:	4943      	ldr	r1, [pc, #268]	@ (8000ce4 <main+0x14c>)
 8000bd6:	4844      	ldr	r0, [pc, #272]	@ (8000ce8 <main+0x150>)
 8000bd8:	f7ff fe98 	bl	800090c <ICM20948_ReadAccelGyroRaw>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d134      	bne.n	8000c4c <main+0xb4>
	          // Accelerometer and Gyroscope data is now in accel_raw and gyro_raw
	          ICM20948_ConvertAccelRawToG();
 8000be2:	f7ff ff2d 	bl	8000a40 <ICM20948_ConvertAccelRawToG>
	          ICM20948_ConvertGyroRawToDps();
 8000be6:	f7ff ff57 	bl	8000a98 <ICM20948_ConvertGyroRawToDps>

	          printf("Accel (g):  X=%.2f, Y=%.2f, Z=%.2f\r\n", accel_g[0], accel_g[1], accel_g[2]);
 8000bea:	4b40      	ldr	r3, [pc, #256]	@ (8000cec <main+0x154>)
 8000bec:	edd3 7a00 	vldr	s15, [r3]
 8000bf0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8000cec <main+0x154>)
 8000bf6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8000cec <main+0x154>)
 8000c00:	edd3 6a02 	vldr	s13, [r3, #8]
 8000c04:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c08:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c0c:	ed8d 7b00 	vstr	d7, [sp]
 8000c10:	ec53 2b15 	vmov	r2, r3, d5
 8000c14:	4836      	ldr	r0, [pc, #216]	@ (8000cf0 <main+0x158>)
 8000c16:	f005 f9f9 	bl	800600c <iprintf>
	          // printf("Accel RAW:  X=%d, Y=%d, Z=%d\r\n", accel_raw[0], accel_raw[1], accel_raw[2]);
	          printf("Gyro (dps): X=%.2f, Y=%.2f, Z=%.2f\r\n", gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8000c1a:	4b36      	ldr	r3, [pc, #216]	@ (8000cf4 <main+0x15c>)
 8000c1c:	edd3 7a00 	vldr	s15, [r3]
 8000c20:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000c24:	4b33      	ldr	r3, [pc, #204]	@ (8000cf4 <main+0x15c>)
 8000c26:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c2e:	4b31      	ldr	r3, [pc, #196]	@ (8000cf4 <main+0x15c>)
 8000c30:	edd3 6a02 	vldr	s13, [r3, #8]
 8000c34:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c38:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c3c:	ed8d 7b00 	vstr	d7, [sp]
 8000c40:	ec53 2b15 	vmov	r2, r3, d5
 8000c44:	482c      	ldr	r0, [pc, #176]	@ (8000cf8 <main+0x160>)
 8000c46:	f005 f9e1 	bl	800600c <iprintf>
 8000c4a:	e002      	b.n	8000c52 <main+0xba>
	          // printf("Gyro RAW:   X=%d, Y=%d, Z=%d\r\n", gyro_raw[0], gyro_raw[1], gyro_raw[2]);

	      } else {
	          printf("Failed to read Accel/Gyro data\r\n");
 8000c4c:	482b      	ldr	r0, [pc, #172]	@ (8000cfc <main+0x164>)
 8000c4e:	f005 fa45 	bl	80060dc <puts>
	      }

	      if (ICM20948_ReadMagRaw(mag_raw) == HAL_OK) {
 8000c52:	482b      	ldr	r0, [pc, #172]	@ (8000d00 <main+0x168>)
 8000c54:	f7ff feb6 	bl	80009c4 <ICM20948_ReadMagRaw>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d11a      	bne.n	8000c94 <main+0xfc>
	          // Magnetometer data is now in mag_raw
	          ICM20948_ConvertMagRawToUT();
 8000c5e:	f7ff ff47 	bl	8000af0 <ICM20948_ConvertMagRawToUT>

	          printf("Mag (uT):   X=%.2f, Y=%.2f, Z=%.2f\r\n", mag_uT[0], mag_uT[1], mag_uT[2]);
 8000c62:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <main+0x16c>)
 8000c64:	edd3 7a00 	vldr	s15, [r3]
 8000c68:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000c6c:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <main+0x16c>)
 8000c6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c76:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <main+0x16c>)
 8000c78:	edd3 6a02 	vldr	s13, [r3, #8]
 8000c7c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c80:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c84:	ed8d 7b00 	vstr	d7, [sp]
 8000c88:	ec53 2b15 	vmov	r2, r3, d5
 8000c8c:	481e      	ldr	r0, [pc, #120]	@ (8000d08 <main+0x170>)
 8000c8e:	f005 f9bd 	bl	800600c <iprintf>
 8000c92:	e002      	b.n	8000c9a <main+0x102>
	          // printf("Mag RAW:    X=%d, Y=%d, Z=%d\r\n", mag_raw[0], mag_raw[1], mag_raw[2]);

	      } else {
	          printf("Failed to read Magnetometer data\r\n");
 8000c94:	481d      	ldr	r0, [pc, #116]	@ (8000d0c <main+0x174>)
 8000c96:	f005 fa21 	bl	80060dc <puts>
	      }

	      printf("-------------------------------------\r\n");
 8000c9a:	481d      	ldr	r0, [pc, #116]	@ (8000d10 <main+0x178>)
 8000c9c:	f005 fa1e 	bl	80060dc <puts>
	      HAL_Delay(500); // Read and print data every 500ms
 8000ca0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ca4:	f000 fd02 	bl	80016ac <HAL_Delay>





	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2102      	movs	r1, #2
 8000cac:	4819      	ldr	r0, [pc, #100]	@ (8000d14 <main+0x17c>)
 8000cae:	f000 ffc1 	bl	8001c34 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000cb2:	2064      	movs	r0, #100	@ 0x64
 8000cb4:	f000 fcfa 	bl	80016ac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2102      	movs	r1, #2
 8000cbc:	4815      	ldr	r0, [pc, #84]	@ (8000d14 <main+0x17c>)
 8000cbe:	f000 ffb9 	bl	8001c34 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000cc2:	2064      	movs	r0, #100	@ 0x64
 8000cc4:	f000 fcf2 	bl	80016ac <HAL_Delay>
	  printf("archer %d \n",WWE);
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	4813      	ldr	r0, [pc, #76]	@ (8000d18 <main+0x180>)
 8000ccc:	f005 f99e 	bl	800600c <iprintf>
	  	  WWE++;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	607b      	str	r3, [r7, #4]
	      if (ICM20948_ReadAccelGyroRaw(accel_raw, gyro_raw) == HAL_OK) {
 8000cd6:	e77d      	b.n	8000bd4 <main+0x3c>
 8000cd8:	08007ef8 	.word	0x08007ef8
 8000cdc:	08007f10 	.word	0x08007f10
 8000ce0:	08007f30 	.word	0x08007f30
 8000ce4:	24000204 	.word	0x24000204
 8000ce8:	240001fc 	.word	0x240001fc
 8000cec:	24000214 	.word	0x24000214
 8000cf0:	08007f54 	.word	0x08007f54
 8000cf4:	24000220 	.word	0x24000220
 8000cf8:	08007f7c 	.word	0x08007f7c
 8000cfc:	08007fa4 	.word	0x08007fa4
 8000d00:	2400020c 	.word	0x2400020c
 8000d04:	2400022c 	.word	0x2400022c
 8000d08:	08007fc4 	.word	0x08007fc4
 8000d0c:	08007fec 	.word	0x08007fec
 8000d10:	08008010 	.word	0x08008010
 8000d14:	58021000 	.word	0x58021000
 8000d18:	08008038 	.word	0x08008038

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b09c      	sub	sp, #112	@ 0x70
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d26:	224c      	movs	r2, #76	@ 0x4c
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f005 fab6 	bl	800629c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2220      	movs	r2, #32
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f005 fab0 	bl	800629c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f000 ff93 	bl	8001c68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b31      	ldr	r3, [pc, #196]	@ (8000e0c <SystemClock_Config+0xf0>)
 8000d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d4a:	4a30      	ldr	r2, [pc, #192]	@ (8000e0c <SystemClock_Config+0xf0>)
 8000d4c:	f023 0301 	bic.w	r3, r3, #1
 8000d50:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d52:	4b2e      	ldr	r3, [pc, #184]	@ (8000e0c <SystemClock_Config+0xf0>)
 8000d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <SystemClock_Config+0xf4>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d64:	4a2a      	ldr	r2, [pc, #168]	@ (8000e10 <SystemClock_Config+0xf4>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b28      	ldr	r3, [pc, #160]	@ (8000e10 <SystemClock_Config+0xf4>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d78:	bf00      	nop
 8000d7a:	4b25      	ldr	r3, [pc, #148]	@ (8000e10 <SystemClock_Config+0xf4>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d86:	d1f8      	bne.n	8000d7a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d90:	2340      	movs	r3, #64	@ 0x40
 8000d92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d94:	2302      	movs	r3, #2
 8000d96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000da0:	230a      	movs	r3, #10
 8000da2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000db0:	230c      	movs	r3, #12
 8000db2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000db4:	2302      	movs	r3, #2
 8000db6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 ff8b 	bl	8001cdc <HAL_RCC_OscConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dcc:	f000 f948 	bl	8001060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	233f      	movs	r3, #63	@ 0x3f
 8000dd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2101      	movs	r1, #1
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fbcb 	bl	8002590 <HAL_RCC_ClockConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000e00:	f000 f92e 	bl	8001060 <Error_Handler>
  }
}
 8000e04:	bf00      	nop
 8000e06:	3770      	adds	r7, #112	@ 0x70
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	58000400 	.word	0x58000400
 8000e10:	58024800 	.word	0x58024800

08000e14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e18:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e1a:	4a28      	ldr	r2, [pc, #160]	@ (8000ebc <MX_SPI1_Init+0xa8>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e20:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e26:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e2c:	4b22      	ldr	r3, [pc, #136]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e2e:	2207      	movs	r2, #7
 8000e30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e74:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e86:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e92:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	@ (8000eb8 <MX_SPI1_Init+0xa4>)
 8000ea6:	f003 fa11 	bl	80042cc <HAL_SPI_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000eb0:	f000 f8d6 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	24000238 	.word	0x24000238
 8000ebc:	40013000 	.word	0x40013000

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	@ 0x30
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed6:	4b50      	ldr	r3, [pc, #320]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000edc:	4a4e      	ldr	r2, [pc, #312]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000ede:	f043 0320 	orr.w	r3, r3, #32
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eec:	f003 0320 	and.w	r3, r3, #32
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef4:	4b48      	ldr	r3, [pc, #288]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efa:	4a47      	ldr	r2, [pc, #284]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f04:	4b44      	ldr	r3, [pc, #272]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b41      	ldr	r3, [pc, #260]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f18:	4a3f      	ldr	r2, [pc, #252]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f22:	4b3d      	ldr	r3, [pc, #244]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f30:	4b39      	ldr	r3, [pc, #228]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f36:	4a38      	ldr	r2, [pc, #224]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f40:	4b35      	ldr	r3, [pc, #212]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f4e:	4b32      	ldr	r3, [pc, #200]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f54:	4a30      	ldr	r2, [pc, #192]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f72:	4a29      	ldr	r2, [pc, #164]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7c:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	4a21      	ldr	r2, [pc, #132]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <MX_GPIO_Init+0x158>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fae:	481b      	ldr	r0, [pc, #108]	@ (800101c <MX_GPIO_Init+0x15c>)
 8000fb0:	f000 fe40 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4819      	ldr	r0, [pc, #100]	@ (8001020 <MX_GPIO_Init+0x160>)
 8000fba:	f000 fe3b 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ICM20948_DRDY_Pin */
  GPIO_InitStruct.Pin = ICM20948_DRDY_Pin;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ICM20948_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4814      	ldr	r0, [pc, #80]	@ (8001024 <MX_GPIO_Init+0x164>)
 8000fd2:	f000 fc7f 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ICM20948_CS_Pin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 8000fd6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	480b      	ldr	r0, [pc, #44]	@ (800101c <MX_GPIO_Init+0x15c>)
 8000ff0:	f000 fc70 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_GPIO_Init+0x160>)
 800100c:	f000 fc62 	bl	80018d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001010:	bf00      	nop
 8001012:	3730      	adds	r7, #48	@ 0x30
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	58024400 	.word	0x58024400
 800101c:	58020c00 	.word	0x58020c00
 8001020:	58021000 	.word	0x58021000
 8001024:	58021400 	.word	0x58021400

08001028 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e009      	b.n	800104e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	60ba      	str	r2, [r7, #8]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fd80 	bl	8000b48 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3301      	adds	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	429a      	cmp	r2, r3
 8001054:	dbf1      	blt.n	800103a <_write+0x12>
  }
  return len;
 8001056:	687b      	ldr	r3, [r7, #4]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <Error_Handler+0x8>

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <HAL_MspInit+0x30>)
 8001074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001078:	4a08      	ldr	r2, [pc, #32]	@ (800109c <HAL_MspInit+0x30>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_MspInit+0x30>)
 8001084:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	58024400 	.word	0x58024400

080010a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0bc      	sub	sp, #240	@ 0xf0
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 0318 	add.w	r3, r7, #24
 80010bc:	22c0      	movs	r2, #192	@ 0xc0
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 f8eb 	bl	800629c <memset>
  if(hspi->Instance==SPI1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a4b      	ldr	r2, [pc, #300]	@ (80011f8 <HAL_SPI_MspInit+0x158>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	f040 808e 	bne.w	80011ee <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80010de:	2300      	movs	r3, #0
 80010e0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fd82 	bl	8002bf0 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80010f2:	f7ff ffb5 	bl	8001060 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f6:	4b41      	ldr	r3, [pc, #260]	@ (80011fc <HAL_SPI_MspInit+0x15c>)
 80010f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010fc:	4a3f      	ldr	r2, [pc, #252]	@ (80011fc <HAL_SPI_MspInit+0x15c>)
 80010fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001102:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001106:	4b3d      	ldr	r3, [pc, #244]	@ (80011fc <HAL_SPI_MspInit+0x15c>)
 8001108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800110c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b39      	ldr	r3, [pc, #228]	@ (80011fc <HAL_SPI_MspInit+0x15c>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	4a38      	ldr	r2, [pc, #224]	@ (80011fc <HAL_SPI_MspInit+0x15c>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001124:	4b35      	ldr	r3, [pc, #212]	@ (80011fc <HAL_SPI_MspInit+0x15c>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001132:	4b32      	ldr	r3, [pc, #200]	@ (80011fc <HAL_SPI_MspInit+0x15c>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001138:	4a30      	ldr	r2, [pc, #192]	@ (80011fc <HAL_SPI_MspInit+0x15c>)
 800113a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001142:	4b2e      	ldr	r3, [pc, #184]	@ (80011fc <HAL_SPI_MspInit+0x15c>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b2a      	ldr	r3, [pc, #168]	@ (80011fc <HAL_SPI_MspInit+0x15c>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001156:	4a29      	ldr	r2, [pc, #164]	@ (80011fc <HAL_SPI_MspInit+0x15c>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001160:	4b26      	ldr	r3, [pc, #152]	@ (80011fc <HAL_SPI_MspInit+0x15c>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin;
 800116e:	2320      	movs	r3, #32
 8001170:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001186:	2305      	movs	r3, #5
 8001188:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ICM20948_SCK_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001190:	4619      	mov	r1, r3
 8001192:	481b      	ldr	r0, [pc, #108]	@ (8001200 <HAL_SPI_MspInit+0x160>)
 8001194:	f000 fb9e 	bl	80018d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ICM20948_MISO_Pin;
 8001198:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800119c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b2:	2305      	movs	r3, #5
 80011b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ICM20948_MISO_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011bc:	4619      	mov	r1, r3
 80011be:	4811      	ldr	r0, [pc, #68]	@ (8001204 <HAL_SPI_MspInit+0x164>)
 80011c0:	f000 fb88 	bl	80018d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ICM20948_MOSI_Pin;
 80011c4:	2320      	movs	r3, #32
 80011c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011dc:	2305      	movs	r3, #5
 80011de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ICM20948_MOSI_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011e6:	4619      	mov	r1, r3
 80011e8:	4807      	ldr	r0, [pc, #28]	@ (8001208 <HAL_SPI_MspInit+0x168>)
 80011ea:	f000 fb73 	bl	80018d4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011ee:	bf00      	nop
 80011f0:	37f0      	adds	r7, #240	@ 0xf0
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40013000 	.word	0x40013000
 80011fc:	58024400 	.word	0x58024400
 8001200:	58020000 	.word	0x58020000
 8001204:	58021800 	.word	0x58021800
 8001208:	58020400 	.word	0x58020400

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <NMI_Handler+0x4>

08001214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <MemManage_Handler+0x4>

08001224 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <UsageFault_Handler+0x4>

08001234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001262:	f000 fa03 	bl	800166c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}

0800126a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  return 1;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_kill>:

int _kill(int pid, int sig)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001284:	f005 f85c 	bl	8006340 <__errno>
 8001288:	4603      	mov	r3, r0
 800128a:	2216      	movs	r2, #22
 800128c:	601a      	str	r2, [r3, #0]
  return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_exit>:

void _exit (int status)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012a2:	f04f 31ff 	mov.w	r1, #4294967295
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffe7 	bl	800127a <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <_exit+0x12>

080012b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e00a      	b.n	80012d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012c2:	f3af 8000 	nop.w
 80012c6:	4601      	mov	r1, r0
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	60ba      	str	r2, [r7, #8]
 80012ce:	b2ca      	uxtb	r2, r1
 80012d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3301      	adds	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	429a      	cmp	r2, r3
 80012de:	dbf0      	blt.n	80012c2 <_read+0x12>
  }

  return len;
 80012e0:	687b      	ldr	r3, [r7, #4]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001312:	605a      	str	r2, [r3, #4]
  return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_isatty>:

int _isatty(int file)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800135c:	4a14      	ldr	r2, [pc, #80]	@ (80013b0 <_sbrk+0x5c>)
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <_sbrk+0x60>)
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001368:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001370:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <_sbrk+0x64>)
 8001372:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <_sbrk+0x68>)
 8001374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	429a      	cmp	r2, r3
 8001382:	d207      	bcs.n	8001394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001384:	f004 ffdc 	bl	8006340 <__errno>
 8001388:	4603      	mov	r3, r0
 800138a:	220c      	movs	r2, #12
 800138c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e009      	b.n	80013a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139a:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	4a05      	ldr	r2, [pc, #20]	@ (80013b8 <_sbrk+0x64>)
 80013a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	24080000 	.word	0x24080000
 80013b4:	00000400 	.word	0x00000400
 80013b8:	240002c0 	.word	0x240002c0
 80013bc:	24000418 	.word	0x24000418

080013c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013c4:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <SystemInit+0x114>)
 80013c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ca:	4a42      	ldr	r2, [pc, #264]	@ (80014d4 <SystemInit+0x114>)
 80013cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013d4:	4b40      	ldr	r3, [pc, #256]	@ (80014d8 <SystemInit+0x118>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 030f 	and.w	r3, r3, #15
 80013dc:	2b06      	cmp	r3, #6
 80013de:	d807      	bhi.n	80013f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013e0:	4b3d      	ldr	r3, [pc, #244]	@ (80014d8 <SystemInit+0x118>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 030f 	bic.w	r3, r3, #15
 80013e8:	4a3b      	ldr	r2, [pc, #236]	@ (80014d8 <SystemInit+0x118>)
 80013ea:	f043 0307 	orr.w	r3, r3, #7
 80013ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013f0:	4b3a      	ldr	r3, [pc, #232]	@ (80014dc <SystemInit+0x11c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a39      	ldr	r2, [pc, #228]	@ (80014dc <SystemInit+0x11c>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013fc:	4b37      	ldr	r3, [pc, #220]	@ (80014dc <SystemInit+0x11c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001402:	4b36      	ldr	r3, [pc, #216]	@ (80014dc <SystemInit+0x11c>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4935      	ldr	r1, [pc, #212]	@ (80014dc <SystemInit+0x11c>)
 8001408:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <SystemInit+0x120>)
 800140a:	4013      	ands	r3, r2
 800140c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800140e:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <SystemInit+0x118>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800141a:	4b2f      	ldr	r3, [pc, #188]	@ (80014d8 <SystemInit+0x118>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 030f 	bic.w	r3, r3, #15
 8001422:	4a2d      	ldr	r2, [pc, #180]	@ (80014d8 <SystemInit+0x118>)
 8001424:	f043 0307 	orr.w	r3, r3, #7
 8001428:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800142a:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <SystemInit+0x11c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <SystemInit+0x11c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001436:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <SystemInit+0x11c>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800143c:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <SystemInit+0x11c>)
 800143e:	4a29      	ldr	r2, [pc, #164]	@ (80014e4 <SystemInit+0x124>)
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001442:	4b26      	ldr	r3, [pc, #152]	@ (80014dc <SystemInit+0x11c>)
 8001444:	4a28      	ldr	r2, [pc, #160]	@ (80014e8 <SystemInit+0x128>)
 8001446:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001448:	4b24      	ldr	r3, [pc, #144]	@ (80014dc <SystemInit+0x11c>)
 800144a:	4a28      	ldr	r2, [pc, #160]	@ (80014ec <SystemInit+0x12c>)
 800144c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800144e:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <SystemInit+0x11c>)
 8001450:	2200      	movs	r2, #0
 8001452:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001454:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <SystemInit+0x11c>)
 8001456:	4a25      	ldr	r2, [pc, #148]	@ (80014ec <SystemInit+0x12c>)
 8001458:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <SystemInit+0x11c>)
 800145c:	2200      	movs	r2, #0
 800145e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001460:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <SystemInit+0x11c>)
 8001462:	4a22      	ldr	r2, [pc, #136]	@ (80014ec <SystemInit+0x12c>)
 8001464:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001466:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <SystemInit+0x11c>)
 8001468:	2200      	movs	r2, #0
 800146a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <SystemInit+0x11c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a1a      	ldr	r2, [pc, #104]	@ (80014dc <SystemInit+0x11c>)
 8001472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001476:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001478:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <SystemInit+0x11c>)
 800147a:	2200      	movs	r2, #0
 800147c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <SystemInit+0x130>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <SystemInit+0x134>)
 8001484:	4013      	ands	r3, r2
 8001486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800148a:	d202      	bcs.n	8001492 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800148c:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <SystemInit+0x138>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <SystemInit+0x11c>)
 8001494:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d113      	bne.n	80014c8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <SystemInit+0x11c>)
 80014a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014a6:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <SystemInit+0x11c>)
 80014a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <SystemInit+0x13c>)
 80014b2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014b6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <SystemInit+0x11c>)
 80014ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014be:	4a07      	ldr	r2, [pc, #28]	@ (80014dc <SystemInit+0x11c>)
 80014c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00
 80014d8:	52002000 	.word	0x52002000
 80014dc:	58024400 	.word	0x58024400
 80014e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80014e4:	02020200 	.word	0x02020200
 80014e8:	01ff0000 	.word	0x01ff0000
 80014ec:	01010280 	.word	0x01010280
 80014f0:	5c001000 	.word	0x5c001000
 80014f4:	ffff0000 	.word	0xffff0000
 80014f8:	51008108 	.word	0x51008108
 80014fc:	52004000 	.word	0x52004000

08001500 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <ExitRun0Mode+0x2c>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4a08      	ldr	r2, [pc, #32]	@ (800152c <ExitRun0Mode+0x2c>)
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001510:	bf00      	nop
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <ExitRun0Mode+0x2c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f9      	beq.n	8001512 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	58024800 	.word	0x58024800

08001530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001530:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800156c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001534:	f7ff ffe4 	bl	8001500 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001538:	f7ff ff42 	bl	80013c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800153e:	490d      	ldr	r1, [pc, #52]	@ (8001574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001554:	4c0a      	ldr	r4, [pc, #40]	@ (8001580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001562:	f004 fef3 	bl	800634c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff fb17 	bl	8000b98 <main>
  bx  lr
 800156a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800156c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001570:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001574:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001578:	080083d8 	.word	0x080083d8
  ldr r2, =_sbss
 800157c:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001580:	24000414 	.word	0x24000414

08001584 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC3_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158e:	2003      	movs	r0, #3
 8001590:	f000 f96e 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001594:	f001 f9b2 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8001598:	4602      	mov	r2, r0
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <HAL_Init+0x68>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	0a1b      	lsrs	r3, r3, #8
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	4913      	ldr	r1, [pc, #76]	@ (80015f4 <HAL_Init+0x6c>)
 80015a6:	5ccb      	ldrb	r3, [r1, r3]
 80015a8:	f003 031f 	and.w	r3, r3, #31
 80015ac:	fa22 f303 	lsr.w	r3, r2, r3
 80015b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_Init+0x68>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	4a0e      	ldr	r2, [pc, #56]	@ (80015f4 <HAL_Init+0x6c>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
 80015c8:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <HAL_Init+0x70>)
 80015ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015cc:	4a0b      	ldr	r2, [pc, #44]	@ (80015fc <HAL_Init+0x74>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015d2:	200f      	movs	r0, #15
 80015d4:	f000 f814 	bl	8001600 <HAL_InitTick>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e002      	b.n	80015e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015e2:	f7ff fd43 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	58024400 	.word	0x58024400
 80015f4:	08008044 	.word	0x08008044
 80015f8:	2400000c 	.word	0x2400000c
 80015fc:	24000008 	.word	0x24000008

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_InitTick+0x60>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e021      	b.n	8001658 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001614:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <HAL_InitTick+0x64>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_InitTick+0x60>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f945 	bl	80018ba <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00e      	b.n	8001658 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d80a      	bhi.n	8001656 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f000 f91d 	bl	8001886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800164c:	4a06      	ldr	r2, [pc, #24]	@ (8001668 <HAL_InitTick+0x68>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	24000014 	.word	0x24000014
 8001664:	24000008 	.word	0x24000008
 8001668:	24000010 	.word	0x24000010

0800166c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_IncTick+0x20>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_IncTick+0x24>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a04      	ldr	r2, [pc, #16]	@ (8001690 <HAL_IncTick+0x24>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	24000014 	.word	0x24000014
 8001690:	240002c4 	.word	0x240002c4

08001694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b03      	ldr	r3, [pc, #12]	@ (80016a8 <HAL_GetTick+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	240002c4 	.word	0x240002c4

080016ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b4:	f7ff ffee 	bl	8001694 <HAL_GetTick>
 80016b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c4:	d005      	beq.n	80016d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <HAL_Delay+0x44>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016d2:	bf00      	nop
 80016d4:	f7ff ffde 	bl	8001694 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d8f7      	bhi.n	80016d4 <HAL_Delay+0x28>
  {
  }
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	24000014 	.word	0x24000014

080016f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <HAL_GetREVID+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0c1b      	lsrs	r3, r3, #16
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	5c001000 	.word	0x5c001000

0800170c <__NVIC_SetPriorityGrouping>:
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <__NVIC_SetPriorityGrouping+0x40>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001736:	4313      	orrs	r3, r2
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	@ (800174c <__NVIC_SetPriorityGrouping+0x40>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00
 8001750:	05fa0000 	.word	0x05fa0000

08001754 <__NVIC_GetPriorityGrouping>:
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	@ (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_SetPriority>:
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	@ (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	@ (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	@ 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	@ 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <SysTick_Config>:
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800183c:	d301      	bcc.n	8001842 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800183e:	2301      	movs	r3, #1
 8001840:	e00f      	b.n	8001862 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001842:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <SysTick_Config+0x40>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184a:	210f      	movs	r1, #15
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f7ff ff8e 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <SysTick_Config+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	@ (800186c <SysTick_Config+0x40>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff47 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff5e 	bl	8001754 <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff90 	bl	80017c4 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5f 	bl	8001770 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffb2 	bl	800182c <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	@ 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80018e2:	4b89      	ldr	r3, [pc, #548]	@ (8001b08 <HAL_GPIO_Init+0x234>)
 80018e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018e6:	e194      	b.n	8001c12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8186 	beq.w	8001c0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b01      	cmp	r3, #1
 800190a:	d005      	beq.n	8001918 <HAL_GPIO_Init+0x44>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d130      	bne.n	800197a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800194e:	2201      	movs	r2, #1
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	f003 0201 	and.w	r2, r3, #1
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b03      	cmp	r3, #3
 8001984:	d017      	beq.n	80019b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d123      	bne.n	8001a0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	691a      	ldr	r2, [r3, #16]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	08da      	lsrs	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3208      	adds	r2, #8
 8001a04:	69b9      	ldr	r1, [r7, #24]
 8001a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0203 	and.w	r2, r3, #3
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 80e0 	beq.w	8001c0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b0c <HAL_GPIO_Init+0x238>)
 8001a4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a52:	4a2e      	ldr	r2, [pc, #184]	@ (8001b0c <HAL_GPIO_Init+0x238>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b0c <HAL_GPIO_Init+0x238>)
 8001a5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a6a:	4a29      	ldr	r2, [pc, #164]	@ (8001b10 <HAL_GPIO_Init+0x23c>)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a20      	ldr	r2, [pc, #128]	@ (8001b14 <HAL_GPIO_Init+0x240>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d052      	beq.n	8001b3c <HAL_GPIO_Init+0x268>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a1f      	ldr	r2, [pc, #124]	@ (8001b18 <HAL_GPIO_Init+0x244>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <HAL_GPIO_Init+0x22e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b1c <HAL_GPIO_Init+0x248>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d02b      	beq.n	8001afe <HAL_GPIO_Init+0x22a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b20 <HAL_GPIO_Init+0x24c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d025      	beq.n	8001afa <HAL_GPIO_Init+0x226>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b24 <HAL_GPIO_Init+0x250>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01f      	beq.n	8001af6 <HAL_GPIO_Init+0x222>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b28 <HAL_GPIO_Init+0x254>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d019      	beq.n	8001af2 <HAL_GPIO_Init+0x21e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b2c <HAL_GPIO_Init+0x258>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_GPIO_Init+0x21a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a19      	ldr	r2, [pc, #100]	@ (8001b30 <HAL_GPIO_Init+0x25c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00d      	beq.n	8001aea <HAL_GPIO_Init+0x216>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a18      	ldr	r2, [pc, #96]	@ (8001b34 <HAL_GPIO_Init+0x260>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d007      	beq.n	8001ae6 <HAL_GPIO_Init+0x212>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a17      	ldr	r2, [pc, #92]	@ (8001b38 <HAL_GPIO_Init+0x264>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <HAL_GPIO_Init+0x20e>
 8001ade:	2309      	movs	r3, #9
 8001ae0:	e02d      	b.n	8001b3e <HAL_GPIO_Init+0x26a>
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	e02b      	b.n	8001b3e <HAL_GPIO_Init+0x26a>
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	e029      	b.n	8001b3e <HAL_GPIO_Init+0x26a>
 8001aea:	2307      	movs	r3, #7
 8001aec:	e027      	b.n	8001b3e <HAL_GPIO_Init+0x26a>
 8001aee:	2306      	movs	r3, #6
 8001af0:	e025      	b.n	8001b3e <HAL_GPIO_Init+0x26a>
 8001af2:	2305      	movs	r3, #5
 8001af4:	e023      	b.n	8001b3e <HAL_GPIO_Init+0x26a>
 8001af6:	2304      	movs	r3, #4
 8001af8:	e021      	b.n	8001b3e <HAL_GPIO_Init+0x26a>
 8001afa:	2303      	movs	r3, #3
 8001afc:	e01f      	b.n	8001b3e <HAL_GPIO_Init+0x26a>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e01d      	b.n	8001b3e <HAL_GPIO_Init+0x26a>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e01b      	b.n	8001b3e <HAL_GPIO_Init+0x26a>
 8001b06:	bf00      	nop
 8001b08:	58000080 	.word	0x58000080
 8001b0c:	58024400 	.word	0x58024400
 8001b10:	58000400 	.word	0x58000400
 8001b14:	58020000 	.word	0x58020000
 8001b18:	58020400 	.word	0x58020400
 8001b1c:	58020800 	.word	0x58020800
 8001b20:	58020c00 	.word	0x58020c00
 8001b24:	58021000 	.word	0x58021000
 8001b28:	58021400 	.word	0x58021400
 8001b2c:	58021800 	.word	0x58021800
 8001b30:	58021c00 	.word	0x58021c00
 8001b34:	58022000 	.word	0x58022000
 8001b38:	58022400 	.word	0x58022400
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	f002 0203 	and.w	r2, r2, #3
 8001b44:	0092      	lsls	r2, r2, #2
 8001b46:	4093      	lsls	r3, r2
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b4e:	4938      	ldr	r1, [pc, #224]	@ (8001c30 <HAL_GPIO_Init+0x35c>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001bb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f47f ae63 	bne.w	80018e8 <HAL_GPIO_Init+0x14>
  }
}
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
 8001c26:	3724      	adds	r7, #36	@ 0x24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	58000400 	.word	0x58000400

08001c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c50:	e003      	b.n	8001c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	041a      	lsls	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c70:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d00a      	beq.n	8001c92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c7c:	4b16      	ldr	r3, [pc, #88]	@ (8001cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e01f      	b.n	8001cce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e01d      	b.n	8001cce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c92:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f023 0207 	bic.w	r2, r3, #7
 8001c9a:	490f      	ldr	r1, [pc, #60]	@ (8001cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ca2:	f7ff fcf7 	bl	8001694 <HAL_GetTick>
 8001ca6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ca8:	e009      	b.n	8001cbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001caa:	f7ff fcf3 	bl	8001694 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cb8:	d901      	bls.n	8001cbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e007      	b.n	8001cce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cca:	d1ee      	bne.n	8001caa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	58024800 	.word	0x58024800

08001cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	@ 0x30
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f000 bc48 	b.w	8002580 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 8088 	beq.w	8001e0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfe:	4b99      	ldr	r3, [pc, #612]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d08:	4b96      	ldr	r3, [pc, #600]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d007      	beq.n	8001d24 <HAL_RCC_OscConfig+0x48>
 8001d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d16:	2b18      	cmp	r3, #24
 8001d18:	d111      	bne.n	8001d3e <HAL_RCC_OscConfig+0x62>
 8001d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d10c      	bne.n	8001d3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	4b8f      	ldr	r3, [pc, #572]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d06d      	beq.n	8001e0c <HAL_RCC_OscConfig+0x130>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d169      	bne.n	8001e0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f000 bc21 	b.w	8002580 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x7a>
 8001d48:	4b86      	ldr	r3, [pc, #536]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a85      	ldr	r2, [pc, #532]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e02e      	b.n	8001db4 <HAL_RCC_OscConfig+0xd8>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x9c>
 8001d5e:	4b81      	ldr	r3, [pc, #516]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a80      	ldr	r2, [pc, #512]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b7e      	ldr	r3, [pc, #504]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a7d      	ldr	r2, [pc, #500]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xd8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0xc0>
 8001d82:	4b78      	ldr	r3, [pc, #480]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a77      	ldr	r2, [pc, #476]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b75      	ldr	r3, [pc, #468]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a74      	ldr	r2, [pc, #464]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xd8>
 8001d9c:	4b71      	ldr	r3, [pc, #452]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a70      	ldr	r2, [pc, #448]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b6e      	ldr	r3, [pc, #440]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a6d      	ldr	r2, [pc, #436]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fc6a 	bl	8001694 <HAL_GetTick>
 8001dc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fc66 	bl	8001694 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e3d4      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dd6:	4b63      	ldr	r3, [pc, #396]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe8>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fc56 	bl	8001694 <HAL_GetTick>
 8001de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff fc52 	bl	8001694 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	@ 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e3c0      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dfe:	4b59      	ldr	r3, [pc, #356]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x110>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80ca 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e1c:	4b51      	ldr	r3, [pc, #324]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e26:	4b4f      	ldr	r3, [pc, #316]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_RCC_OscConfig+0x166>
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	2b18      	cmp	r3, #24
 8001e36:	d156      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x20a>
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d151      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e42:	4b48      	ldr	r3, [pc, #288]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x17e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e392      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e5a:	4b42      	ldr	r3, [pc, #264]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 0219 	bic.w	r2, r3, #25
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	493f      	ldr	r1, [pc, #252]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fc12 	bl	8001694 <HAL_GetTick>
 8001e70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e74:	f7ff fc0e 	bl	8001694 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e37c      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e86:	4b37      	ldr	r3, [pc, #220]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	f7ff fc2f 	bl	80016f4 <HAL_GetREVID>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d817      	bhi.n	8001ed0 <HAL_RCC_OscConfig+0x1f4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	2b40      	cmp	r3, #64	@ 0x40
 8001ea6:	d108      	bne.n	8001eba <HAL_RCC_OscConfig+0x1de>
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	e07a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b2a      	ldr	r3, [pc, #168]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	031b      	lsls	r3, r3, #12
 8001ec8:	4926      	ldr	r1, [pc, #152]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ece:	e06f      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed0:	4b24      	ldr	r3, [pc, #144]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	061b      	lsls	r3, r3, #24
 8001ede:	4921      	ldr	r1, [pc, #132]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee4:	e064      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d047      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001eee:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 0219 	bic.w	r2, r3, #25
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	491a      	ldr	r1, [pc, #104]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff fbc8 	bl	8001694 <HAL_GetTick>
 8001f04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f08:	f7ff fbc4 	bl	8001694 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e332      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f1a:	4b12      	ldr	r3, [pc, #72]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f26:	f7ff fbe5 	bl	80016f4 <HAL_GetREVID>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d819      	bhi.n	8001f68 <HAL_RCC_OscConfig+0x28c>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b40      	cmp	r3, #64	@ 0x40
 8001f3a:	d108      	bne.n	8001f4e <HAL_RCC_OscConfig+0x272>
 8001f3c:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f44:	4a07      	ldr	r2, [pc, #28]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f4a:	6053      	str	r3, [r2, #4]
 8001f4c:	e030      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2d4>
 8001f4e:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	031b      	lsls	r3, r3, #12
 8001f5c:	4901      	ldr	r1, [pc, #4]	@ (8001f64 <HAL_RCC_OscConfig+0x288>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
 8001f62:	e025      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2d4>
 8001f64:	58024400 	.word	0x58024400
 8001f68:	4b9a      	ldr	r3, [pc, #616]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	061b      	lsls	r3, r3, #24
 8001f76:	4997      	ldr	r1, [pc, #604]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
 8001f7c:	e018      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b95      	ldr	r3, [pc, #596]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a94      	ldr	r2, [pc, #592]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7ff fb83 	bl	8001694 <HAL_GetTick>
 8001f8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f92:	f7ff fb7f 	bl	8001694 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e2ed      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fa4:	4b8b      	ldr	r3, [pc, #556]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f0      	bne.n	8001f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80a9 	beq.w	8002110 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fbe:	4b85      	ldr	r3, [pc, #532]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fc8:	4b82      	ldr	r3, [pc, #520]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fcc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d007      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x308>
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2b18      	cmp	r3, #24
 8001fd8:	d13a      	bne.n	8002050 <HAL_RCC_OscConfig+0x374>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d135      	bne.n	8002050 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_OscConfig+0x320>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	2b80      	cmp	r3, #128	@ 0x80
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e2c1      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ffc:	f7ff fb7a 	bl	80016f4 <HAL_GetREVID>
 8002000:	4603      	mov	r3, r0
 8002002:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002006:	4293      	cmp	r3, r2
 8002008:	d817      	bhi.n	800203a <HAL_RCC_OscConfig+0x35e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	2b20      	cmp	r3, #32
 8002010:	d108      	bne.n	8002024 <HAL_RCC_OscConfig+0x348>
 8002012:	4b70      	ldr	r3, [pc, #448]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800201a:	4a6e      	ldr	r2, [pc, #440]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 800201c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002020:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002022:	e075      	b.n	8002110 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002024:	4b6b      	ldr	r3, [pc, #428]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	069b      	lsls	r3, r3, #26
 8002032:	4968      	ldr	r1, [pc, #416]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002038:	e06a      	b.n	8002110 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800203a:	4b66      	ldr	r3, [pc, #408]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	061b      	lsls	r3, r3, #24
 8002048:	4962      	ldr	r1, [pc, #392]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800204e:	e05f      	b.n	8002110 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d042      	beq.n	80020de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002058:	4b5e      	ldr	r3, [pc, #376]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a5d      	ldr	r2, [pc, #372]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 800205e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff fb16 	bl	8001694 <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800206c:	f7ff fb12 	bl	8001694 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e280      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800207e:	4b55      	ldr	r3, [pc, #340]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800208a:	f7ff fb33 	bl	80016f4 <HAL_GetREVID>
 800208e:	4603      	mov	r3, r0
 8002090:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002094:	4293      	cmp	r3, r2
 8002096:	d817      	bhi.n	80020c8 <HAL_RCC_OscConfig+0x3ec>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	2b20      	cmp	r3, #32
 800209e:	d108      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3d6>
 80020a0:	4b4c      	ldr	r3, [pc, #304]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80020a8:	4a4a      	ldr	r2, [pc, #296]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 80020aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80020ae:	6053      	str	r3, [r2, #4]
 80020b0:	e02e      	b.n	8002110 <HAL_RCC_OscConfig+0x434>
 80020b2:	4b48      	ldr	r3, [pc, #288]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	069b      	lsls	r3, r3, #26
 80020c0:	4944      	ldr	r1, [pc, #272]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
 80020c6:	e023      	b.n	8002110 <HAL_RCC_OscConfig+0x434>
 80020c8:	4b42      	ldr	r3, [pc, #264]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	493f      	ldr	r1, [pc, #252]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
 80020dc:	e018      	b.n	8002110 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020de:	4b3d      	ldr	r3, [pc, #244]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a3c      	ldr	r2, [pc, #240]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 80020e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7ff fad3 	bl	8001694 <HAL_GetTick>
 80020ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020f2:	f7ff facf 	bl	8001694 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e23d      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002104:	4b33      	ldr	r3, [pc, #204]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f0      	bne.n	80020f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d036      	beq.n	800218a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d019      	beq.n	8002158 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002124:	4b2b      	ldr	r3, [pc, #172]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8002126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002128:	4a2a      	ldr	r2, [pc, #168]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7ff fab0 	bl	8001694 <HAL_GetTick>
 8002134:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002138:	f7ff faac 	bl	8001694 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e21a      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800214a:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 800214c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x45c>
 8002156:	e018      	b.n	800218a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002158:	4b1e      	ldr	r3, [pc, #120]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 800215a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800215c:	4a1d      	ldr	r2, [pc, #116]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7ff fa96 	bl	8001694 <HAL_GetTick>
 8002168:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7ff fa92 	bl	8001694 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e200      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 8002180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d039      	beq.n	800220a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d01c      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800219e:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a0c      	ldr	r2, [pc, #48]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 80021a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021aa:	f7ff fa73 	bl	8001694 <HAL_GetTick>
 80021ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b2:	f7ff fa6f 	bl	8001694 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e1dd      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021c4:	4b03      	ldr	r3, [pc, #12]	@ (80021d4 <HAL_RCC_OscConfig+0x4f8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x4d6>
 80021d0:	e01b      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
 80021d2:	bf00      	nop
 80021d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021d8:	4b9b      	ldr	r3, [pc, #620]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a9a      	ldr	r2, [pc, #616]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80021de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021e4:	f7ff fa56 	bl	8001694 <HAL_GetTick>
 80021e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ec:	f7ff fa52 	bl	8001694 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e1c0      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021fe:	4b92      	ldr	r3, [pc, #584]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8081 	beq.w	800231a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002218:	4b8c      	ldr	r3, [pc, #560]	@ (800244c <HAL_RCC_OscConfig+0x770>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a8b      	ldr	r2, [pc, #556]	@ (800244c <HAL_RCC_OscConfig+0x770>)
 800221e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002224:	f7ff fa36 	bl	8001694 <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222c:	f7ff fa32 	bl	8001694 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	@ 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e1a0      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800223e:	4b83      	ldr	r3, [pc, #524]	@ (800244c <HAL_RCC_OscConfig+0x770>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d106      	bne.n	8002260 <HAL_RCC_OscConfig+0x584>
 8002252:	4b7d      	ldr	r3, [pc, #500]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002256:	4a7c      	ldr	r2, [pc, #496]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6713      	str	r3, [r2, #112]	@ 0x70
 800225e:	e02d      	b.n	80022bc <HAL_RCC_OscConfig+0x5e0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x5a6>
 8002268:	4b77      	ldr	r3, [pc, #476]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226c:	4a76      	ldr	r2, [pc, #472]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6713      	str	r3, [r2, #112]	@ 0x70
 8002274:	4b74      	ldr	r3, [pc, #464]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002278:	4a73      	ldr	r2, [pc, #460]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 800227a:	f023 0304 	bic.w	r3, r3, #4
 800227e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002280:	e01c      	b.n	80022bc <HAL_RCC_OscConfig+0x5e0>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5c8>
 800228a:	4b6f      	ldr	r3, [pc, #444]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228e:	4a6e      	ldr	r2, [pc, #440]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	6713      	str	r3, [r2, #112]	@ 0x70
 8002296:	4b6c      	ldr	r3, [pc, #432]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229a:	4a6b      	ldr	r2, [pc, #428]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a2:	e00b      	b.n	80022bc <HAL_RCC_OscConfig+0x5e0>
 80022a4:	4b68      	ldr	r3, [pc, #416]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a8:	4a67      	ldr	r2, [pc, #412]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80022b0:	4b65      	ldr	r3, [pc, #404]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b4:	4a64      	ldr	r2, [pc, #400]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80022b6:	f023 0304 	bic.w	r3, r3, #4
 80022ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d015      	beq.n	80022f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7ff f9e6 	bl	8001694 <HAL_GetTick>
 80022c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7ff f9e2 	bl	8001694 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e14e      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022e2:	4b59      	ldr	r3, [pc, #356]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0ee      	beq.n	80022cc <HAL_RCC_OscConfig+0x5f0>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7ff f9d0 	bl	8001694 <HAL_GetTick>
 80022f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022f6:	e00a      	b.n	800230e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7ff f9cc 	bl	8001694 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e138      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800230e:	4b4e      	ldr	r3, [pc, #312]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1ee      	bne.n	80022f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 812d 	beq.w	800257e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002324:	4b48      	ldr	r3, [pc, #288]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800232c:	2b18      	cmp	r3, #24
 800232e:	f000 80bd 	beq.w	80024ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002336:	2b02      	cmp	r3, #2
 8002338:	f040 809e 	bne.w	8002478 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233c:	4b42      	ldr	r3, [pc, #264]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a41      	ldr	r2, [pc, #260]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff f9a4 	bl	8001694 <HAL_GetTick>
 800234c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff f9a0 	bl	8001694 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e10e      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002362:	4b39      	ldr	r3, [pc, #228]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236e:	4b36      	ldr	r3, [pc, #216]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002370:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002372:	4b37      	ldr	r3, [pc, #220]	@ (8002450 <HAL_RCC_OscConfig+0x774>)
 8002374:	4013      	ands	r3, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800237e:	0112      	lsls	r2, r2, #4
 8002380:	430a      	orrs	r2, r1
 8002382:	4931      	ldr	r1, [pc, #196]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	628b      	str	r3, [r1, #40]	@ 0x28
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	3b01      	subs	r3, #1
 800238e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002396:	3b01      	subs	r3, #1
 8002398:	025b      	lsls	r3, r3, #9
 800239a:	b29b      	uxth	r3, r3
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a2:	3b01      	subs	r3, #1
 80023a4:	041b      	lsls	r3, r3, #16
 80023a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b0:	3b01      	subs	r3, #1
 80023b2:	061b      	lsls	r3, r3, #24
 80023b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80023b8:	4923      	ldr	r1, [pc, #140]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023be:	4b22      	ldr	r3, [pc, #136]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	4a21      	ldr	r2, [pc, #132]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80023cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023ce:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <HAL_RCC_OscConfig+0x778>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023d6:	00d2      	lsls	r2, r2, #3
 80023d8:	491b      	ldr	r1, [pc, #108]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023de:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80023e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e2:	f023 020c 	bic.w	r2, r3, #12
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	4917      	ldr	r1, [pc, #92]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023f0:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f4:	f023 0202 	bic.w	r2, r3, #2
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fc:	4912      	ldr	r1, [pc, #72]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002402:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002406:	4a10      	ldr	r2, [pc, #64]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800240c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002412:	4a0d      	ldr	r2, [pc, #52]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002418:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800241a:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	4a0a      	ldr	r2, [pc, #40]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	4a07      	ldr	r2, [pc, #28]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002432:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <HAL_RCC_OscConfig+0x76c>)
 8002438:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800243c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7ff f929 	bl	8001694 <HAL_GetTick>
 8002442:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002444:	e011      	b.n	800246a <HAL_RCC_OscConfig+0x78e>
 8002446:	bf00      	nop
 8002448:	58024400 	.word	0x58024400
 800244c:	58024800 	.word	0x58024800
 8002450:	fffffc0c 	.word	0xfffffc0c
 8002454:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff f91c 	bl	8001694 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e08a      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800246a:	4b47      	ldr	r3, [pc, #284]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x77c>
 8002476:	e082      	b.n	800257e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b43      	ldr	r3, [pc, #268]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a42      	ldr	r2, [pc, #264]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 800247e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff f906 	bl	8001694 <HAL_GetTick>
 8002488:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7ff f902 	bl	8001694 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e070      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800249e:	4b3a      	ldr	r3, [pc, #232]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x7b0>
 80024aa:	e068      	b.n	800257e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024ac:	4b36      	ldr	r3, [pc, #216]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024b2:	4b35      	ldr	r3, [pc, #212]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d031      	beq.n	8002524 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f003 0203 	and.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d12a      	bne.n	8002524 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d122      	bne.n	8002524 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d11a      	bne.n	8002524 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	0a5b      	lsrs	r3, r3, #9
 80024f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d111      	bne.n	8002524 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	0c1b      	lsrs	r3, r3, #16
 8002504:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d108      	bne.n	8002524 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	0e1b      	lsrs	r3, r3, #24
 8002516:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e02b      	b.n	8002580 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002528:	4b17      	ldr	r3, [pc, #92]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 800252a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252c:	08db      	lsrs	r3, r3, #3
 800252e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002532:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	429a      	cmp	r2, r3
 800253c:	d01f      	beq.n	800257e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800253e:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 8002540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002542:	4a11      	ldr	r2, [pc, #68]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800254a:	f7ff f8a3 	bl	8001694 <HAL_GetTick>
 800254e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002550:	bf00      	nop
 8002552:	f7ff f89f 	bl	8001694 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	4293      	cmp	r3, r2
 800255c:	d0f9      	beq.n	8002552 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800255e:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 8002560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <HAL_RCC_OscConfig+0x8b0>)
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800256a:	00d2      	lsls	r2, r2, #3
 800256c:	4906      	ldr	r1, [pc, #24]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 800256e:	4313      	orrs	r3, r2
 8002570:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002572:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 8002574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002576:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <HAL_RCC_OscConfig+0x8ac>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3730      	adds	r7, #48	@ 0x30
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	58024400 	.word	0x58024400
 800258c:	ffff0007 	.word	0xffff0007

08002590 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e19c      	b.n	80028de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4b8a      	ldr	r3, [pc, #552]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d910      	bls.n	80025d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b87      	ldr	r3, [pc, #540]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 020f 	bic.w	r2, r3, #15
 80025ba:	4985      	ldr	r1, [pc, #532]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b83      	ldr	r3, [pc, #524]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e184      	b.n	80028de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d010      	beq.n	8002602 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	4b7b      	ldr	r3, [pc, #492]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d908      	bls.n	8002602 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025f0:	4b78      	ldr	r3, [pc, #480]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	4975      	ldr	r1, [pc, #468]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d010      	beq.n	8002630 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	4b70      	ldr	r3, [pc, #448]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800261a:	429a      	cmp	r2, r3
 800261c:	d908      	bls.n	8002630 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800261e:	4b6d      	ldr	r3, [pc, #436]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	496a      	ldr	r1, [pc, #424]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800262c:	4313      	orrs	r3, r2
 800262e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	d010      	beq.n	800265e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	4b64      	ldr	r3, [pc, #400]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002648:	429a      	cmp	r2, r3
 800264a:	d908      	bls.n	800265e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800264c:	4b61      	ldr	r3, [pc, #388]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	495e      	ldr	r1, [pc, #376]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800265a:	4313      	orrs	r3, r2
 800265c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d010      	beq.n	800268c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	4b59      	ldr	r3, [pc, #356]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002676:	429a      	cmp	r2, r3
 8002678:	d908      	bls.n	800268c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800267a:	4b56      	ldr	r3, [pc, #344]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4953      	ldr	r1, [pc, #332]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002688:	4313      	orrs	r3, r2
 800268a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d010      	beq.n	80026ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	4b4d      	ldr	r3, [pc, #308]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d908      	bls.n	80026ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b4a      	ldr	r3, [pc, #296]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f023 020f 	bic.w	r2, r3, #15
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4947      	ldr	r1, [pc, #284]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d055      	beq.n	8002772 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026c6:	4b43      	ldr	r3, [pc, #268]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4940      	ldr	r1, [pc, #256]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026e0:	4b3c      	ldr	r3, [pc, #240]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d121      	bne.n	8002730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0f6      	b.n	80028de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026f8:	4b36      	ldr	r3, [pc, #216]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d115      	bne.n	8002730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0ea      	b.n	80028de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002710:	4b30      	ldr	r3, [pc, #192]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0de      	b.n	80028de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002720:	4b2c      	ldr	r3, [pc, #176]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0d6      	b.n	80028de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002730:	4b28      	ldr	r3, [pc, #160]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f023 0207 	bic.w	r2, r3, #7
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4925      	ldr	r1, [pc, #148]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800273e:	4313      	orrs	r3, r2
 8002740:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002742:	f7fe ffa7 	bl	8001694 <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002748:	e00a      	b.n	8002760 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274a:	f7fe ffa3 	bl	8001694 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e0be      	b.n	80028de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002760:	4b1c      	ldr	r3, [pc, #112]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	429a      	cmp	r2, r3
 8002770:	d1eb      	bne.n	800274a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d010      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	429a      	cmp	r2, r3
 800278c:	d208      	bcs.n	80027a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f023 020f 	bic.w	r2, r3, #15
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	490e      	ldr	r1, [pc, #56]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800279c:	4313      	orrs	r3, r2
 800279e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d214      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 020f 	bic.w	r2, r3, #15
 80027b6:	4906      	ldr	r1, [pc, #24]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e086      	b.n	80028de <HAL_RCC_ClockConfig+0x34e>
 80027d0:	52002000 	.word	0x52002000
 80027d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d010      	beq.n	8002806 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	4b3f      	ldr	r3, [pc, #252]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d208      	bcs.n	8002806 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027f4:	4b3c      	ldr	r3, [pc, #240]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	4939      	ldr	r1, [pc, #228]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 8002802:	4313      	orrs	r3, r2
 8002804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d010      	beq.n	8002834 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	4b34      	ldr	r3, [pc, #208]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800281e:	429a      	cmp	r2, r3
 8002820:	d208      	bcs.n	8002834 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002822:	4b31      	ldr	r3, [pc, #196]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	492e      	ldr	r1, [pc, #184]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 8002830:	4313      	orrs	r3, r2
 8002832:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d010      	beq.n	8002862 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	4b28      	ldr	r3, [pc, #160]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800284c:	429a      	cmp	r2, r3
 800284e:	d208      	bcs.n	8002862 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002850:	4b25      	ldr	r3, [pc, #148]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4922      	ldr	r1, [pc, #136]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 800285e:	4313      	orrs	r3, r2
 8002860:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b00      	cmp	r3, #0
 800286c:	d010      	beq.n	8002890 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800287a:	429a      	cmp	r2, r3
 800287c:	d208      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800287e:	4b1a      	ldr	r3, [pc, #104]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4917      	ldr	r1, [pc, #92]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 800288c:	4313      	orrs	r3, r2
 800288e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002890:	f000 f834 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b14      	ldr	r3, [pc, #80]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	4912      	ldr	r1, [pc, #72]	@ (80028ec <HAL_RCC_ClockConfig+0x35c>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028ae:	4b0e      	ldr	r3, [pc, #56]	@ (80028e8 <HAL_RCC_ClockConfig+0x358>)
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	4a0d      	ldr	r2, [pc, #52]	@ (80028ec <HAL_RCC_ClockConfig+0x35c>)
 80028b8:	5cd3      	ldrb	r3, [r2, r3]
 80028ba:	f003 031f 	and.w	r3, r3, #31
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	4a0a      	ldr	r2, [pc, #40]	@ (80028f0 <HAL_RCC_ClockConfig+0x360>)
 80028c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028c8:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <HAL_RCC_ClockConfig+0x364>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028ce:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <HAL_RCC_ClockConfig+0x368>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fe94 	bl	8001600 <HAL_InitTick>
 80028d8:	4603      	mov	r3, r0
 80028da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	58024400 	.word	0x58024400
 80028ec:	08008044 	.word	0x08008044
 80028f0:	2400000c 	.word	0x2400000c
 80028f4:	24000008 	.word	0x24000008
 80028f8:	24000010 	.word	0x24000010

080028fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	@ 0x24
 8002900:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002902:	4bb3      	ldr	r3, [pc, #716]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800290a:	2b18      	cmp	r3, #24
 800290c:	f200 8155 	bhi.w	8002bba <HAL_RCC_GetSysClockFreq+0x2be>
 8002910:	a201      	add	r2, pc, #4	@ (adr r2, 8002918 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002916:	bf00      	nop
 8002918:	0800297d 	.word	0x0800297d
 800291c:	08002bbb 	.word	0x08002bbb
 8002920:	08002bbb 	.word	0x08002bbb
 8002924:	08002bbb 	.word	0x08002bbb
 8002928:	08002bbb 	.word	0x08002bbb
 800292c:	08002bbb 	.word	0x08002bbb
 8002930:	08002bbb 	.word	0x08002bbb
 8002934:	08002bbb 	.word	0x08002bbb
 8002938:	080029a3 	.word	0x080029a3
 800293c:	08002bbb 	.word	0x08002bbb
 8002940:	08002bbb 	.word	0x08002bbb
 8002944:	08002bbb 	.word	0x08002bbb
 8002948:	08002bbb 	.word	0x08002bbb
 800294c:	08002bbb 	.word	0x08002bbb
 8002950:	08002bbb 	.word	0x08002bbb
 8002954:	08002bbb 	.word	0x08002bbb
 8002958:	080029a9 	.word	0x080029a9
 800295c:	08002bbb 	.word	0x08002bbb
 8002960:	08002bbb 	.word	0x08002bbb
 8002964:	08002bbb 	.word	0x08002bbb
 8002968:	08002bbb 	.word	0x08002bbb
 800296c:	08002bbb 	.word	0x08002bbb
 8002970:	08002bbb 	.word	0x08002bbb
 8002974:	08002bbb 	.word	0x08002bbb
 8002978:	080029af 	.word	0x080029af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800297c:	4b94      	ldr	r3, [pc, #592]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d009      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002988:	4b91      	ldr	r3, [pc, #580]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	08db      	lsrs	r3, r3, #3
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	4a90      	ldr	r2, [pc, #576]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
 8002998:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800299a:	e111      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800299c:	4b8d      	ldr	r3, [pc, #564]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800299e:	61bb      	str	r3, [r7, #24]
      break;
 80029a0:	e10e      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80029a2:	4b8d      	ldr	r3, [pc, #564]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029a4:	61bb      	str	r3, [r7, #24]
      break;
 80029a6:	e10b      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80029a8:	4b8c      	ldr	r3, [pc, #560]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80029aa:	61bb      	str	r3, [r7, #24]
      break;
 80029ac:	e108      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029ae:	4b88      	ldr	r3, [pc, #544]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029b8:	4b85      	ldr	r3, [pc, #532]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029c4:	4b82      	ldr	r3, [pc, #520]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029ce:	4b80      	ldr	r3, [pc, #512]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d2:	08db      	lsrs	r3, r3, #3
 80029d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80e1 	beq.w	8002bb4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	f000 8083 	beq.w	8002b00 <HAL_RCC_GetSysClockFreq+0x204>
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	f200 80a1 	bhi.w	8002b44 <HAL_RCC_GetSysClockFreq+0x248>
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x114>
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d056      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a0e:	e099      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a10:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d02d      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a1c:	4b6c      	ldr	r3, [pc, #432]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	08db      	lsrs	r3, r3, #3
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	4a6b      	ldr	r2, [pc, #428]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a46:	4b62      	ldr	r3, [pc, #392]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a5a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a76:	e087      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002be4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a8a:	4b51      	ldr	r3, [pc, #324]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a9e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aba:	e065      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002be8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ace:	4b40      	ldr	r3, [pc, #256]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ae2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002afe:	e043      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002bec <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b12:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b42:	e021      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002be8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b56:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b88:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8c:	0a5b      	lsrs	r3, r3, #9
 8002b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b92:	3301      	adds	r3, #1
 8002b94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	ee07 3a90 	vmov	s15, r3
 8002b9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ba0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bac:	ee17 3a90 	vmov	r3, s15
 8002bb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
      break;
 8002bb8:	e002      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002bba:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bbc:	61bb      	str	r3, [r7, #24]
      break;
 8002bbe:	bf00      	nop
  }

  return sysclockfreq;
 8002bc0:	69bb      	ldr	r3, [r7, #24]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	@ 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	58024400 	.word	0x58024400
 8002bd4:	03d09000 	.word	0x03d09000
 8002bd8:	003d0900 	.word	0x003d0900
 8002bdc:	017d7840 	.word	0x017d7840
 8002be0:	46000000 	.word	0x46000000
 8002be4:	4c742400 	.word	0x4c742400
 8002be8:	4a742400 	.word	0x4a742400
 8002bec:	4bbebc20 	.word	0x4bbebc20

08002bf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf4:	b0ca      	sub	sp, #296	@ 0x128
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c02:	2300      	movs	r3, #0
 8002c04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002c14:	2500      	movs	r5, #0
 8002c16:	ea54 0305 	orrs.w	r3, r4, r5
 8002c1a:	d049      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c26:	d02f      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002c28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c2c:	d828      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c32:	d01a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c38:	d822      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c42:	d007      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c44:	e01c      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c46:	4bb8      	ldr	r3, [pc, #736]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	4ab7      	ldr	r2, [pc, #732]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c52:	e01a      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c58:	3308      	adds	r3, #8
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 f9d1 	bl	8004004 <RCCEx_PLL2_Config>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c68:	e00f      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6e:	3328      	adds	r3, #40	@ 0x28
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 fa78 	bl	8004168 <RCCEx_PLL3_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c7e:	e004      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c86:	e000      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10a      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c92:	4ba5      	ldr	r3, [pc, #660]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ca0:	4aa1      	ldr	r2, [pc, #644]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ca6:	e003      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002cbc:	f04f 0900 	mov.w	r9, #0
 8002cc0:	ea58 0309 	orrs.w	r3, r8, r9
 8002cc4:	d047      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d82a      	bhi.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002ced 	.word	0x08002ced
 8002cdc:	08002cfb 	.word	0x08002cfb
 8002ce0:	08002d11 	.word	0x08002d11
 8002ce4:	08002d2f 	.word	0x08002d2f
 8002ce8:	08002d2f 	.word	0x08002d2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cec:	4b8e      	ldr	r3, [pc, #568]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	4a8d      	ldr	r2, [pc, #564]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cf8:	e01a      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cfe:	3308      	adds	r3, #8
 8002d00:	2100      	movs	r1, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 f97e 	bl	8004004 <RCCEx_PLL2_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d0e:	e00f      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d14:	3328      	adds	r3, #40	@ 0x28
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 fa25 	bl	8004168 <RCCEx_PLL3_Config>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d24:	e004      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d2c:	e000      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002d2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d38:	4b7b      	ldr	r3, [pc, #492]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d3c:	f023 0107 	bic.w	r1, r3, #7
 8002d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d46:	4a78      	ldr	r2, [pc, #480]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d4c:	e003      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002d62:	f04f 0b00 	mov.w	fp, #0
 8002d66:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d6a:	d04c      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d76:	d030      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002d78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d7c:	d829      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d80:	d02d      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d82:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d84:	d825      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d86:	2b80      	cmp	r3, #128	@ 0x80
 8002d88:	d018      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d8a:	2b80      	cmp	r3, #128	@ 0x80
 8002d8c:	d821      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002d92:	2b40      	cmp	r3, #64	@ 0x40
 8002d94:	d007      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002d96:	e01c      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d98:	4b63      	ldr	r3, [pc, #396]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	4a62      	ldr	r2, [pc, #392]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002da4:	e01c      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002daa:	3308      	adds	r3, #8
 8002dac:	2100      	movs	r1, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 f928 	bl	8004004 <RCCEx_PLL2_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002dba:	e011      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc0:	3328      	adds	r3, #40	@ 0x28
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 f9cf 	bl	8004168 <RCCEx_PLL3_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002dd0:	e006      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dd8:	e002      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002dda:	bf00      	nop
 8002ddc:	e000      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002de8:	4b4f      	ldr	r3, [pc, #316]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df6:	4a4c      	ldr	r2, [pc, #304]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8002dfc:	e003      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002e12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002e1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002e20:	460b      	mov	r3, r1
 8002e22:	4313      	orrs	r3, r2
 8002e24:	d053      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e32:	d035      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002e34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e38:	d82e      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002e3e:	d031      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002e40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002e44:	d828      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e4a:	d01a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002e4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e50:	d822      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002e56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e5a:	d007      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002e5c:	e01c      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e5e:	4b32      	ldr	r3, [pc, #200]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e62:	4a31      	ldr	r2, [pc, #196]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e6a:	e01c      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e70:	3308      	adds	r3, #8
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 f8c5 	bl	8004004 <RCCEx_PLL2_Config>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e80:	e011      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e86:	3328      	adds	r3, #40	@ 0x28
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 f96c 	bl	8004168 <RCCEx_PLL3_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e96:	e006      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ea0:	bf00      	nop
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10b      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002eae:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ec4:	e003      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002eda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ee4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4313      	orrs	r3, r2
 8002eec:	d056      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ef6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002efa:	d038      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002efc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f00:	d831      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f06:	d034      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002f08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f0c:	d82b      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f12:	d01d      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f18:	d825      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002f1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002f24:	e01f      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f26:	bf00      	nop
 8002f28:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f2c:	4ba2      	ldr	r3, [pc, #648]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f30:	4aa1      	ldr	r2, [pc, #644]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f38:	e01c      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f3e:	3308      	adds	r3, #8
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 f85e 	bl	8004004 <RCCEx_PLL2_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f4e:	e011      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f54:	3328      	adds	r3, #40	@ 0x28
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 f905 	bl	8004168 <RCCEx_PLL3_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f64:	e006      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f6c:	e002      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f6e:	bf00      	nop
 8002f70:	e000      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f7c:	4b8e      	ldr	r3, [pc, #568]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f80:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f8c:	4a8a      	ldr	r2, [pc, #552]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f92:	e003      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002fb2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	d03a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc2:	2b30      	cmp	r3, #48	@ 0x30
 8002fc4:	d01f      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002fc6:	2b30      	cmp	r3, #48	@ 0x30
 8002fc8:	d819      	bhi.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d815      	bhi.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d019      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d111      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fda:	4b77      	ldr	r3, [pc, #476]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	4a76      	ldr	r2, [pc, #472]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002fe6:	e011      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fec:	3308      	adds	r3, #8
 8002fee:	2102      	movs	r1, #2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f001 f807 	bl	8004004 <RCCEx_PLL2_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ffc:	e006      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003004:	e002      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003006:	bf00      	nop
 8003008:	e000      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800300a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003014:	4b68      	ldr	r3, [pc, #416]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003018:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800301c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003022:	4a65      	ldr	r2, [pc, #404]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003024:	430b      	orrs	r3, r1
 8003026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003028:	e003      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800302e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800303e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003048:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800304c:	460b      	mov	r3, r1
 800304e:	4313      	orrs	r3, r2
 8003050:	d051      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800305c:	d035      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800305e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003062:	d82e      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003064:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003068:	d031      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800306a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800306e:	d828      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003074:	d01a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800307a:	d822      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003084:	d007      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003086:	e01c      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003088:	4b4b      	ldr	r3, [pc, #300]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	4a4a      	ldr	r2, [pc, #296]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800308e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003094:	e01c      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309a:	3308      	adds	r3, #8
 800309c:	2100      	movs	r1, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 ffb0 	bl	8004004 <RCCEx_PLL2_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030aa:	e011      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b0:	3328      	adds	r3, #40	@ 0x28
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f001 f857 	bl	8004168 <RCCEx_PLL3_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030c0:	e006      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030c8:	e002      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80030ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030d8:	4b37      	ldr	r3, [pc, #220]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80030e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e6:	4a34      	ldr	r2, [pc, #208]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80030ec:	e003      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80030f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003102:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800310c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003110:	460b      	mov	r3, r1
 8003112:	4313      	orrs	r3, r2
 8003114:	d056      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003120:	d033      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003122:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003126:	d82c      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003128:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800312c:	d02f      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800312e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003132:	d826      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003134:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003138:	d02b      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800313a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800313e:	d820      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003144:	d012      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800314a:	d81a      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d022      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003154:	d115      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315a:	3308      	adds	r3, #8
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f000 ff50 	bl	8004004 <RCCEx_PLL2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800316a:	e015      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800316c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003170:	3328      	adds	r3, #40	@ 0x28
 8003172:	2101      	movs	r1, #1
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fff7 	bl	8004168 <RCCEx_PLL3_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003180:	e00a      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003188:	e006      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800318a:	bf00      	nop
 800318c:	e004      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800318e:	bf00      	nop
 8003190:	e002      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10d      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80031a0:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80031a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031ae:	4a02      	ldr	r2, [pc, #8]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80031b4:	e006      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80031b6:	bf00      	nop
 80031b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80031c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80031d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80031de:	460b      	mov	r3, r1
 80031e0:	4313      	orrs	r3, r2
 80031e2:	d055      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80031e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031f0:	d033      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80031f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031f6:	d82c      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fc:	d02f      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80031fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003202:	d826      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003204:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003208:	d02b      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800320a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800320e:	d820      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003214:	d012      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800321a:	d81a      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d022      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003220:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003224:	d115      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322a:	3308      	adds	r3, #8
 800322c:	2101      	movs	r1, #1
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fee8 	bl	8004004 <RCCEx_PLL2_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800323a:	e015      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800323c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003240:	3328      	adds	r3, #40	@ 0x28
 8003242:	2101      	movs	r1, #1
 8003244:	4618      	mov	r0, r3
 8003246:	f000 ff8f 	bl	8004168 <RCCEx_PLL3_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003250:	e00a      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003258:	e006      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800325a:	bf00      	nop
 800325c:	e004      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800325e:	bf00      	nop
 8003260:	e002      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003262:	bf00      	nop
 8003264:	e000      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003270:	4ba3      	ldr	r3, [pc, #652]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003280:	4a9f      	ldr	r2, [pc, #636]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003282:	430b      	orrs	r3, r1
 8003284:	6593      	str	r3, [r2, #88]	@ 0x58
 8003286:	e003      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800328c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800329c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80032a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032aa:	460b      	mov	r3, r1
 80032ac:	4313      	orrs	r3, r2
 80032ae:	d037      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80032b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ba:	d00e      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80032bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032c0:	d816      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d018      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80032c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032ca:	d111      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	4a8b      	ldr	r2, [pc, #556]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032d8:	e00f      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032de:	3308      	adds	r3, #8
 80032e0:	2101      	movs	r1, #1
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fe8e 	bl	8004004 <RCCEx_PLL2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032ee:	e004      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80032f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003302:	4b7f      	ldr	r3, [pc, #508]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003306:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800330a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003310:	4a7b      	ldr	r2, [pc, #492]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003312:	430b      	orrs	r3, r1
 8003314:	6513      	str	r3, [r2, #80]	@ 0x50
 8003316:	e003      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800331c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800332c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003336:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800333a:	460b      	mov	r3, r1
 800333c:	4313      	orrs	r3, r2
 800333e:	d039      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003346:	2b03      	cmp	r3, #3
 8003348:	d81c      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800334a:	a201      	add	r2, pc, #4	@ (adr r2, 8003350 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	0800338d 	.word	0x0800338d
 8003354:	08003361 	.word	0x08003361
 8003358:	0800336f 	.word	0x0800336f
 800335c:	0800338d 	.word	0x0800338d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003360:	4b67      	ldr	r3, [pc, #412]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	4a66      	ldr	r2, [pc, #408]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800336c:	e00f      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800336e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003372:	3308      	adds	r3, #8
 8003374:	2102      	movs	r1, #2
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fe44 	bl	8004004 <RCCEx_PLL2_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003382:	e004      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800338a:	e000      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800338c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800338e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003396:	4b5a      	ldr	r3, [pc, #360]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339a:	f023 0103 	bic.w	r1, r3, #3
 800339e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a4:	4a56      	ldr	r2, [pc, #344]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a6:	430b      	orrs	r3, r1
 80033a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033aa:	e003      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80033c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80033ce:	460b      	mov	r3, r1
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f000 809f 	beq.w	8003514 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a4a      	ldr	r2, [pc, #296]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e2:	f7fe f957 	bl	8001694 <HAL_GetTick>
 80033e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ea:	e00b      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ec:	f7fe f952 	bl	8001694 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	@ 0x64
 80033fa:	d903      	bls.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003402:	e005      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003404:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ed      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003414:	2b00      	cmp	r3, #0
 8003416:	d179      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003418:	4b39      	ldr	r3, [pc, #228]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800341a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800341c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003420:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003424:	4053      	eors	r3, r2
 8003426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800342a:	2b00      	cmp	r3, #0
 800342c:	d015      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800342e:	4b34      	ldr	r3, [pc, #208]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003436:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800343a:	4b31      	ldr	r3, [pc, #196]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	4a30      	ldr	r2, [pc, #192]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003444:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003446:	4b2e      	ldr	r3, [pc, #184]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344a:	4a2d      	ldr	r2, [pc, #180]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800344c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003450:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003452:	4a2b      	ldr	r2, [pc, #172]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003454:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003458:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800345a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003466:	d118      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe f914 	bl	8001694 <HAL_GetTick>
 800346c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003470:	e00d      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fe f90f 	bl	8001694 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800347c:	1ad2      	subs	r2, r2, r3
 800347e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003482:	429a      	cmp	r2, r3
 8003484:	d903      	bls.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800348c:	e005      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800348e:	4b1c      	ldr	r3, [pc, #112]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0eb      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800349a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d129      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034b2:	d10e      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80034b4:	4b12      	ldr	r3, [pc, #72]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034c4:	091a      	lsrs	r2, r3, #4
 80034c6:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6113      	str	r3, [r2, #16]
 80034d0:	e005      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80034d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034dc:	6113      	str	r3, [r2, #16]
 80034de:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80034e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ee:	4a04      	ldr	r2, [pc, #16]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f4:	e00e      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80034fe:	e009      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003500:	58024400 	.word	0x58024400
 8003504:	58024800 	.word	0x58024800
 8003508:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003510:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f002 0301 	and.w	r3, r2, #1
 8003520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003524:	2300      	movs	r3, #0
 8003526:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800352a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800352e:	460b      	mov	r3, r1
 8003530:	4313      	orrs	r3, r2
 8003532:	f000 8089 	beq.w	8003648 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800353c:	2b28      	cmp	r3, #40	@ 0x28
 800353e:	d86b      	bhi.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003540:	a201      	add	r2, pc, #4	@ (adr r2, 8003548 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	08003621 	.word	0x08003621
 800354c:	08003619 	.word	0x08003619
 8003550:	08003619 	.word	0x08003619
 8003554:	08003619 	.word	0x08003619
 8003558:	08003619 	.word	0x08003619
 800355c:	08003619 	.word	0x08003619
 8003560:	08003619 	.word	0x08003619
 8003564:	08003619 	.word	0x08003619
 8003568:	080035ed 	.word	0x080035ed
 800356c:	08003619 	.word	0x08003619
 8003570:	08003619 	.word	0x08003619
 8003574:	08003619 	.word	0x08003619
 8003578:	08003619 	.word	0x08003619
 800357c:	08003619 	.word	0x08003619
 8003580:	08003619 	.word	0x08003619
 8003584:	08003619 	.word	0x08003619
 8003588:	08003603 	.word	0x08003603
 800358c:	08003619 	.word	0x08003619
 8003590:	08003619 	.word	0x08003619
 8003594:	08003619 	.word	0x08003619
 8003598:	08003619 	.word	0x08003619
 800359c:	08003619 	.word	0x08003619
 80035a0:	08003619 	.word	0x08003619
 80035a4:	08003619 	.word	0x08003619
 80035a8:	08003621 	.word	0x08003621
 80035ac:	08003619 	.word	0x08003619
 80035b0:	08003619 	.word	0x08003619
 80035b4:	08003619 	.word	0x08003619
 80035b8:	08003619 	.word	0x08003619
 80035bc:	08003619 	.word	0x08003619
 80035c0:	08003619 	.word	0x08003619
 80035c4:	08003619 	.word	0x08003619
 80035c8:	08003621 	.word	0x08003621
 80035cc:	08003619 	.word	0x08003619
 80035d0:	08003619 	.word	0x08003619
 80035d4:	08003619 	.word	0x08003619
 80035d8:	08003619 	.word	0x08003619
 80035dc:	08003619 	.word	0x08003619
 80035e0:	08003619 	.word	0x08003619
 80035e4:	08003619 	.word	0x08003619
 80035e8:	08003621 	.word	0x08003621
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f0:	3308      	adds	r3, #8
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fd05 	bl	8004004 <RCCEx_PLL2_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003600:	e00f      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003606:	3328      	adds	r3, #40	@ 0x28
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fdac 	bl	8004168 <RCCEx_PLL3_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003616:	e004      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800361e:	e000      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800362a:	4bbf      	ldr	r3, [pc, #764]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800362c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003638:	4abb      	ldr	r2, [pc, #748]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800363a:	430b      	orrs	r3, r1
 800363c:	6553      	str	r3, [r2, #84]	@ 0x54
 800363e:	e003      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	f002 0302 	and.w	r3, r2, #2
 8003654:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003658:	2300      	movs	r3, #0
 800365a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800365e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003662:	460b      	mov	r3, r1
 8003664:	4313      	orrs	r3, r2
 8003666:	d041      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800366e:	2b05      	cmp	r3, #5
 8003670:	d824      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003672:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	080036c5 	.word	0x080036c5
 800367c:	08003691 	.word	0x08003691
 8003680:	080036a7 	.word	0x080036a7
 8003684:	080036c5 	.word	0x080036c5
 8003688:	080036c5 	.word	0x080036c5
 800368c:	080036c5 	.word	0x080036c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003694:	3308      	adds	r3, #8
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fcb3 	bl	8004004 <RCCEx_PLL2_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036a4:	e00f      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	3328      	adds	r3, #40	@ 0x28
 80036ac:	2101      	movs	r1, #1
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fd5a 	bl	8004168 <RCCEx_PLL3_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036ba:	e004      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80036c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036ce:	4b96      	ldr	r3, [pc, #600]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d2:	f023 0107 	bic.w	r1, r3, #7
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036dc:	4a92      	ldr	r2, [pc, #584]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036de:	430b      	orrs	r3, r1
 80036e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80036e2:	e003      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f002 0304 	and.w	r3, r2, #4
 80036f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003702:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003706:	460b      	mov	r3, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	d044      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800370c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003714:	2b05      	cmp	r3, #5
 8003716:	d825      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003718:	a201      	add	r2, pc, #4	@ (adr r2, 8003720 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	0800376d 	.word	0x0800376d
 8003724:	08003739 	.word	0x08003739
 8003728:	0800374f 	.word	0x0800374f
 800372c:	0800376d 	.word	0x0800376d
 8003730:	0800376d 	.word	0x0800376d
 8003734:	0800376d 	.word	0x0800376d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373c:	3308      	adds	r3, #8
 800373e:	2101      	movs	r1, #1
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fc5f 	bl	8004004 <RCCEx_PLL2_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800374c:	e00f      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	3328      	adds	r3, #40	@ 0x28
 8003754:	2101      	movs	r1, #1
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fd06 	bl	8004168 <RCCEx_PLL3_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003762:	e004      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800376a:	e000      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800376c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003776:	4b6c      	ldr	r3, [pc, #432]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377a:	f023 0107 	bic.w	r1, r3, #7
 800377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003786:	4a68      	ldr	r2, [pc, #416]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003788:	430b      	orrs	r3, r1
 800378a:	6593      	str	r3, [r2, #88]	@ 0x58
 800378c:	e003      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f002 0320 	and.w	r3, r2, #32
 80037a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d055      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c2:	d033      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80037c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c8:	d82c      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ce:	d02f      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d4:	d826      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037da:	d02b      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80037dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037e0:	d820      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037e6:	d012      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80037e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037ec:	d81a      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d022      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80037f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037f6:	d115      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fc:	3308      	adds	r3, #8
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fbff 	bl	8004004 <RCCEx_PLL2_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800380c:	e015      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	3328      	adds	r3, #40	@ 0x28
 8003814:	2102      	movs	r1, #2
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fca6 	bl	8004168 <RCCEx_PLL3_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003822:	e00a      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800382a:	e006      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800382c:	bf00      	nop
 800382e:	e004      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003830:	bf00      	nop
 8003832:	e002      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003834:	bf00      	nop
 8003836:	e000      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10b      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003842:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003852:	4a35      	ldr	r2, [pc, #212]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003854:	430b      	orrs	r3, r1
 8003856:	6553      	str	r3, [r2, #84]	@ 0x54
 8003858:	e003      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800385e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800386e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003872:	2300      	movs	r3, #0
 8003874:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003878:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800387c:	460b      	mov	r3, r1
 800387e:	4313      	orrs	r3, r2
 8003880:	d058      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800388a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800388e:	d033      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003890:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003894:	d82c      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800389a:	d02f      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a0:	d826      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038a6:	d02b      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80038a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038ac:	d820      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b2:	d012      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80038b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b8:	d81a      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d022      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c2:	d115      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c8:	3308      	adds	r3, #8
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fb99 	bl	8004004 <RCCEx_PLL2_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038d8:	e015      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	3328      	adds	r3, #40	@ 0x28
 80038e0:	2102      	movs	r1, #2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fc40 	bl	8004168 <RCCEx_PLL3_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038ee:	e00a      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038f6:	e006      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80038f8:	bf00      	nop
 80038fa:	e004      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80038fc:	bf00      	nop
 80038fe:	e002      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003900:	bf00      	nop
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10e      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003912:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800391e:	4a02      	ldr	r2, [pc, #8]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003920:	430b      	orrs	r3, r1
 8003922:	6593      	str	r3, [r2, #88]	@ 0x58
 8003924:	e006      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003926:	bf00      	nop
 8003928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003930:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800394a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800394e:	460b      	mov	r3, r1
 8003950:	4313      	orrs	r3, r2
 8003952:	d055      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003958:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800395c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003960:	d033      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003962:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003966:	d82c      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800396c:	d02f      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800396e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003972:	d826      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003974:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003978:	d02b      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800397a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800397e:	d820      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003984:	d012      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003986:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800398a:	d81a      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d022      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003994:	d115      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399a:	3308      	adds	r3, #8
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fb30 	bl	8004004 <RCCEx_PLL2_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039aa:	e015      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b0:	3328      	adds	r3, #40	@ 0x28
 80039b2:	2102      	movs	r1, #2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fbd7 	bl	8004168 <RCCEx_PLL3_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039c0:	e00a      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039c8:	e006      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80039ca:	bf00      	nop
 80039cc:	e004      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80039ce:	bf00      	nop
 80039d0:	e002      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80039d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80039e0:	4ba1      	ldr	r3, [pc, #644]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80039f0:	4a9d      	ldr	r2, [pc, #628]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039f2:	430b      	orrs	r3, r1
 80039f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80039f6:	e003      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f002 0308 	and.w	r3, r2, #8
 8003a0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	d01e      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a32:	3328      	adds	r3, #40	@ 0x28
 8003a34:	2102      	movs	r1, #2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fb96 	bl	8004168 <RCCEx_PLL3_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a48:	4b87      	ldr	r3, [pc, #540]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a58:	4a83      	ldr	r2, [pc, #524]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f002 0310 	and.w	r3, r2, #16
 8003a6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d01e      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8a:	d10c      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a90:	3328      	adds	r3, #40	@ 0x28
 8003a92:	2102      	movs	r1, #2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fb67 	bl	8004168 <RCCEx_PLL3_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aa6:	4b70      	ldr	r3, [pc, #448]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ab6:	4a6c      	ldr	r2, [pc, #432]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ad2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	d03e      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ae8:	d022      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003aea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aee:	d81b      	bhi.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003afa:	e015      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b00:	3308      	adds	r3, #8
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fa7d 	bl	8004004 <RCCEx_PLL2_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b10:	e00f      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b16:	3328      	adds	r3, #40	@ 0x28
 8003b18:	2102      	movs	r1, #2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fb24 	bl	8004168 <RCCEx_PLL3_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b26:	e004      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b2e:	e000      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b4a:	4a47      	ldr	r2, [pc, #284]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b50:	e003      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003b66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b68:	2300      	movs	r3, #0
 8003b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b70:	460b      	mov	r3, r1
 8003b72:	4313      	orrs	r3, r2
 8003b74:	d03b      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b82:	d01f      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003b84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b88:	d818      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b8e:	d003      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003b90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b94:	d007      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003b96:	e011      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b98:	4b33      	ldr	r3, [pc, #204]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	4a32      	ldr	r2, [pc, #200]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ba4:	e00f      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003baa:	3328      	adds	r3, #40	@ 0x28
 8003bac:	2101      	movs	r1, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fada 	bl	8004168 <RCCEx_PLL3_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bba:	e004      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bce:	4b26      	ldr	r3, [pc, #152]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bde:	4a22      	ldr	r2, [pc, #136]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003be4:	e003      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003bfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003c04:	460b      	mov	r3, r1
 8003c06:	4313      	orrs	r3, r2
 8003c08:	d034      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c18:	d007      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003c1a:	e011      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c1c:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	4a11      	ldr	r2, [pc, #68]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c28:	e00e      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2e:	3308      	adds	r3, #8
 8003c30:	2102      	movs	r1, #2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f9e6 	bl	8004004 <RCCEx_PLL2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c3e:	e003      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10d      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c50:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5e:	4a02      	ldr	r2, [pc, #8]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c60:	430b      	orrs	r3, r1
 8003c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c64:	e006      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003c66:	bf00      	nop
 8003c68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c82:	2300      	movs	r3, #0
 8003c84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	d00c      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	3328      	adds	r3, #40	@ 0x28
 8003c96:	2102      	movs	r1, #2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fa65 	bl	8004168 <RCCEx_PLL3_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003cb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cb8:	2300      	movs	r3, #0
 8003cba:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	d038      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cd2:	d018      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cd8:	d811      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cde:	d014      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ce4:	d80b      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d011      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cee:	d106      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf0:	4bc3      	ldr	r3, [pc, #780]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	4ac2      	ldr	r2, [pc, #776]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003cfc:	e008      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d04:	e004      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d06:	bf00      	nop
 8003d08:	e002      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d0a:	bf00      	nop
 8003d0c:	e000      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d18:	4bb9      	ldr	r3, [pc, #740]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d28:	4ab5      	ldr	r2, [pc, #724]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d2e:	e003      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003d44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d46:	2300      	movs	r3, #0
 8003d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d54:	4baa      	ldr	r3, [pc, #680]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d62:	4aa7      	ldr	r2, [pc, #668]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003d74:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d76:	2300      	movs	r3, #0
 8003d78:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d84:	4b9e      	ldr	r3, [pc, #632]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d94:	4a9a      	ldr	r2, [pc, #616]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d96:	430b      	orrs	r3, r1
 8003d98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003da6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003da8:	2300      	movs	r3, #0
 8003daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003db0:	460b      	mov	r3, r1
 8003db2:	4313      	orrs	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003db6:	4b92      	ldr	r3, [pc, #584]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dc4:	4a8e      	ldr	r2, [pc, #568]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003dd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dd8:	2300      	movs	r3, #0
 8003dda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ddc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003de0:	460b      	mov	r3, r1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003de6:	4b86      	ldr	r3, [pc, #536]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	4a85      	ldr	r2, [pc, #532]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003df0:	6113      	str	r3, [r2, #16]
 8003df2:	4b83      	ldr	r3, [pc, #524]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003df4:	6919      	ldr	r1, [r3, #16]
 8003df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003dfe:	4a80      	ldr	r2, [pc, #512]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003e10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e12:	2300      	movs	r3, #0
 8003e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	d009      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e20:	4b77      	ldr	r3, [pc, #476]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e24:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2e:	4a74      	ldr	r2, [pc, #464]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e30:	430b      	orrs	r3, r1
 8003e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e42:	2300      	movs	r3, #0
 8003e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e50:	4b6b      	ldr	r3, [pc, #428]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e54:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e60:	4a67      	ldr	r2, [pc, #412]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e62:	430b      	orrs	r3, r1
 8003e64:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	2100      	movs	r1, #0
 8003e70:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	d011      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	3308      	adds	r3, #8
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f8ba 	bl	8004004 <RCCEx_PLL2_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	2100      	movs	r1, #0
 8003eb0:	6239      	str	r1, [r7, #32]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	d011      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	2101      	movs	r1, #1
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f89a 	bl	8004004 <RCCEx_PLL2_Config>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	2100      	movs	r1, #0
 8003ef0:	61b9      	str	r1, [r7, #24]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003efc:	460b      	mov	r3, r1
 8003efe:	4313      	orrs	r3, r2
 8003f00:	d011      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f06:	3308      	adds	r3, #8
 8003f08:	2102      	movs	r1, #2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f87a 	bl	8004004 <RCCEx_PLL2_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	2100      	movs	r1, #0
 8003f30:	6139      	str	r1, [r7, #16]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	d011      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	3328      	adds	r3, #40	@ 0x28
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f90c 	bl	8004168 <RCCEx_PLL3_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	2100      	movs	r1, #0
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	d011      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f86:	3328      	adds	r3, #40	@ 0x28
 8003f88:	2101      	movs	r1, #1
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f8ec 	bl	8004168 <RCCEx_PLL3_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	2100      	movs	r1, #0
 8003fb0:	6039      	str	r1, [r7, #0]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	d011      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc6:	3328      	adds	r3, #40	@ 0x28
 8003fc8:	2102      	movs	r1, #2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f8cc 	bl	8004168 <RCCEx_PLL3_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003fe6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004000:	58024400 	.word	0x58024400

08004004 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004012:	4b53      	ldr	r3, [pc, #332]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b03      	cmp	r3, #3
 800401c:	d101      	bne.n	8004022 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e099      	b.n	8004156 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004022:	4b4f      	ldr	r3, [pc, #316]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a4e      	ldr	r2, [pc, #312]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 8004028:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800402c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402e:	f7fd fb31 	bl	8001694 <HAL_GetTick>
 8004032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004034:	e008      	b.n	8004048 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004036:	f7fd fb2d 	bl	8001694 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e086      	b.n	8004156 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004048:	4b45      	ldr	r3, [pc, #276]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004054:	4b42      	ldr	r3, [pc, #264]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 8004056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004058:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	031b      	lsls	r3, r3, #12
 8004062:	493f      	ldr	r1, [pc, #252]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	628b      	str	r3, [r1, #40]	@ 0x28
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	3b01      	subs	r3, #1
 800406e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	3b01      	subs	r3, #1
 8004078:	025b      	lsls	r3, r3, #9
 800407a:	b29b      	uxth	r3, r3
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	3b01      	subs	r3, #1
 8004084:	041b      	lsls	r3, r3, #16
 8004086:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	3b01      	subs	r3, #1
 8004092:	061b      	lsls	r3, r3, #24
 8004094:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004098:	4931      	ldr	r1, [pc, #196]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 800409a:	4313      	orrs	r3, r2
 800409c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800409e:	4b30      	ldr	r3, [pc, #192]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	492d      	ldr	r1, [pc, #180]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	f023 0220 	bic.w	r2, r3, #32
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	4928      	ldr	r1, [pc, #160]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040c2:	4b27      	ldr	r3, [pc, #156]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	4a26      	ldr	r2, [pc, #152]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 80040c8:	f023 0310 	bic.w	r3, r3, #16
 80040cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80040ce:	4b24      	ldr	r3, [pc, #144]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 80040d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040d2:	4b24      	ldr	r3, [pc, #144]	@ (8004164 <RCCEx_PLL2_Config+0x160>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	69d2      	ldr	r2, [r2, #28]
 80040da:	00d2      	lsls	r2, r2, #3
 80040dc:	4920      	ldr	r1, [pc, #128]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80040e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 80040e8:	f043 0310 	orr.w	r3, r3, #16
 80040ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d106      	bne.n	8004102 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80040f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	4a19      	ldr	r2, [pc, #100]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 80040fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004100:	e00f      	b.n	8004122 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d106      	bne.n	8004116 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004108:	4b15      	ldr	r3, [pc, #84]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	4a14      	ldr	r2, [pc, #80]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004112:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004114:	e005      	b.n	8004122 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004116:	4b12      	ldr	r3, [pc, #72]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	4a11      	ldr	r2, [pc, #68]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 800411c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004120:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004122:	4b0f      	ldr	r3, [pc, #60]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a0e      	ldr	r2, [pc, #56]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 8004128:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800412c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800412e:	f7fd fab1 	bl	8001694 <HAL_GetTick>
 8004132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004134:	e008      	b.n	8004148 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004136:	f7fd faad 	bl	8001694 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e006      	b.n	8004156 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004148:	4b05      	ldr	r3, [pc, #20]	@ (8004160 <RCCEx_PLL2_Config+0x15c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004154:	7bfb      	ldrb	r3, [r7, #15]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	58024400 	.word	0x58024400
 8004164:	ffff0007 	.word	0xffff0007

08004168 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004176:	4b53      	ldr	r3, [pc, #332]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	2b03      	cmp	r3, #3
 8004180:	d101      	bne.n	8004186 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e099      	b.n	80042ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004186:	4b4f      	ldr	r3, [pc, #316]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a4e      	ldr	r2, [pc, #312]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 800418c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004192:	f7fd fa7f 	bl	8001694 <HAL_GetTick>
 8004196:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004198:	e008      	b.n	80041ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800419a:	f7fd fa7b 	bl	8001694 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e086      	b.n	80042ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041ac:	4b45      	ldr	r3, [pc, #276]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f0      	bne.n	800419a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041b8:	4b42      	ldr	r3, [pc, #264]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 80041ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	051b      	lsls	r3, r3, #20
 80041c6:	493f      	ldr	r1, [pc, #252]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	3b01      	subs	r3, #1
 80041dc:	025b      	lsls	r3, r3, #9
 80041de:	b29b      	uxth	r3, r3
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	061b      	lsls	r3, r3, #24
 80041f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80041fc:	4931      	ldr	r1, [pc, #196]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004202:	4b30      	ldr	r3, [pc, #192]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	492d      	ldr	r1, [pc, #180]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004214:	4b2b      	ldr	r3, [pc, #172]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	4928      	ldr	r1, [pc, #160]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004226:	4b27      	ldr	r3, [pc, #156]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422a:	4a26      	ldr	r2, [pc, #152]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 800422c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004230:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004232:	4b24      	ldr	r3, [pc, #144]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004236:	4b24      	ldr	r3, [pc, #144]	@ (80042c8 <RCCEx_PLL3_Config+0x160>)
 8004238:	4013      	ands	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	69d2      	ldr	r2, [r2, #28]
 800423e:	00d2      	lsls	r2, r2, #3
 8004240:	4920      	ldr	r1, [pc, #128]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004242:	4313      	orrs	r3, r2
 8004244:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004246:	4b1f      	ldr	r3, [pc, #124]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	4a1e      	ldr	r2, [pc, #120]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 800424c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004250:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004258:	4b1a      	ldr	r3, [pc, #104]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	4a19      	ldr	r2, [pc, #100]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 800425e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004262:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004264:	e00f      	b.n	8004286 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d106      	bne.n	800427a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800426c:	4b15      	ldr	r3, [pc, #84]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	4a14      	ldr	r2, [pc, #80]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004272:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004276:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004278:	e005      	b.n	8004286 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800427a:	4b12      	ldr	r3, [pc, #72]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 800427c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427e:	4a11      	ldr	r2, [pc, #68]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004280:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004284:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004286:	4b0f      	ldr	r3, [pc, #60]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a0e      	ldr	r2, [pc, #56]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 800428c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004292:	f7fd f9ff 	bl	8001694 <HAL_GetTick>
 8004296:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004298:	e008      	b.n	80042ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800429a:	f7fd f9fb 	bl	8001694 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e006      	b.n	80042ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042ac:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <RCCEx_PLL3_Config+0x15c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f0      	beq.n	800429a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	58024400 	.word	0x58024400
 80042c8:	ffff0007 	.word	0xffff0007

080042cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e10f      	b.n	80044fe <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a87      	ldr	r2, [pc, #540]	@ (8004508 <HAL_SPI_Init+0x23c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00f      	beq.n	800430e <HAL_SPI_Init+0x42>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a86      	ldr	r2, [pc, #536]	@ (800450c <HAL_SPI_Init+0x240>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00a      	beq.n	800430e <HAL_SPI_Init+0x42>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a84      	ldr	r2, [pc, #528]	@ (8004510 <HAL_SPI_Init+0x244>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d005      	beq.n	800430e <HAL_SPI_Init+0x42>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2b0f      	cmp	r3, #15
 8004308:	d901      	bls.n	800430e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e0f7      	b.n	80044fe <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f001 f968 	bl	80055e4 <SPI_GetPacketSize>
 8004314:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a7b      	ldr	r2, [pc, #492]	@ (8004508 <HAL_SPI_Init+0x23c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00c      	beq.n	800433a <HAL_SPI_Init+0x6e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a79      	ldr	r2, [pc, #484]	@ (800450c <HAL_SPI_Init+0x240>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d007      	beq.n	800433a <HAL_SPI_Init+0x6e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a78      	ldr	r2, [pc, #480]	@ (8004510 <HAL_SPI_Init+0x244>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d002      	beq.n	800433a <HAL_SPI_Init+0x6e>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b08      	cmp	r3, #8
 8004338:	d811      	bhi.n	800435e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800433e:	4a72      	ldr	r2, [pc, #456]	@ (8004508 <HAL_SPI_Init+0x23c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d009      	beq.n	8004358 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a70      	ldr	r2, [pc, #448]	@ (800450c <HAL_SPI_Init+0x240>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d004      	beq.n	8004358 <HAL_SPI_Init+0x8c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6f      	ldr	r2, [pc, #444]	@ (8004510 <HAL_SPI_Init+0x244>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d104      	bne.n	8004362 <HAL_SPI_Init+0x96>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b10      	cmp	r3, #16
 800435c:	d901      	bls.n	8004362 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e0cd      	b.n	80044fe <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc fe92 	bl	80010a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0201 	bic.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800439e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043a8:	d119      	bne.n	80043de <HAL_SPI_Init+0x112>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043b2:	d103      	bne.n	80043bc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10c      	bne.n	80043de <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80043c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043cc:	d107      	bne.n	80043de <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00f      	beq.n	800440a <HAL_SPI_Init+0x13e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b06      	cmp	r3, #6
 80043f0:	d90b      	bls.n	800440a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	e007      	b.n	800441a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004418:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004422:	431a      	orrs	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	ea42 0103 	orr.w	r1, r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447a:	ea42 0103 	orr.w	r1, r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d113      	bne.n	80044ba <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044a4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044b8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40013000 	.word	0x40013000
 800450c:	40003800 	.word	0x40003800
 8004510:	40003c00 	.word	0x40003c00

08004514 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3320      	adds	r3, #32
 800452a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800452c:	f7fd f8b2 	bl	8001694 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b01      	cmp	r3, #1
 800453c:	d001      	beq.n	8004542 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800453e:	2302      	movs	r3, #2
 8004540:	e1d1      	b.n	80048e6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_SPI_Transmit+0x3a>
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e1c9      	b.n	80048e6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_SPI_Transmit+0x4c>
 800455c:	2302      	movs	r3, #2
 800455e:	e1c2      	b.n	80048e6 <HAL_SPI_Transmit+0x3d2>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2203      	movs	r2, #3
 800456c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	88fa      	ldrh	r2, [r7, #6]
 8004582:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	88fa      	ldrh	r2, [r7, #6]
 800458a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80045b8:	d108      	bne.n	80045cc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e009      	b.n	80045e0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80045de:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	4b96      	ldr	r3, [pc, #600]	@ (8004840 <HAL_SPI_Transmit+0x32c>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	88f9      	ldrh	r1, [r7, #6]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800460c:	d107      	bne.n	800461e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800461c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b0f      	cmp	r3, #15
 8004624:	d947      	bls.n	80046b6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004626:	e03f      	b.n	80046a8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d114      	bne.n	8004660 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004646:	1d1a      	adds	r2, r3, #4
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800465e:	e023      	b.n	80046a8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004660:	f7fd f818 	bl	8001694 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d803      	bhi.n	8004678 <HAL_SPI_Transmit+0x164>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d102      	bne.n	800467e <HAL_SPI_Transmit+0x16a>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d114      	bne.n	80046a8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fee2 	bl	8005448 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800468a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e11e      	b.n	80048e6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1b9      	bne.n	8004628 <HAL_SPI_Transmit+0x114>
 80046b4:	e0f1      	b.n	800489a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b07      	cmp	r3, #7
 80046bc:	f240 80e6 	bls.w	800488c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80046c0:	e05d      	b.n	800477e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d132      	bne.n	8004736 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d918      	bls.n	800470e <HAL_SPI_Transmit+0x1fa>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d014      	beq.n	800470e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f4:	1d1a      	adds	r2, r3, #4
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b02      	subs	r3, #2
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800470c:	e037      	b.n	800477e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004712:	881a      	ldrh	r2, [r3, #0]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471c:	1c9a      	adds	r2, r3, #2
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004734:	e023      	b.n	800477e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004736:	f7fc ffad 	bl	8001694 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d803      	bhi.n	800474e <HAL_SPI_Transmit+0x23a>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d102      	bne.n	8004754 <HAL_SPI_Transmit+0x240>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d114      	bne.n	800477e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fe77 	bl	8005448 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004760:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e0b3      	b.n	80048e6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d19b      	bne.n	80046c2 <HAL_SPI_Transmit+0x1ae>
 800478a:	e086      	b.n	800489a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b02      	cmp	r3, #2
 8004798:	d154      	bne.n	8004844 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d918      	bls.n	80047d8 <HAL_SPI_Transmit+0x2c4>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047aa:	2b40      	cmp	r3, #64	@ 0x40
 80047ac:	d914      	bls.n	80047d8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047be:	1d1a      	adds	r2, r3, #4
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b04      	subs	r3, #4
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80047d6:	e059      	b.n	800488c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d917      	bls.n	8004814 <HAL_SPI_Transmit+0x300>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d013      	beq.n	8004814 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f0:	881a      	ldrh	r2, [r3, #0]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fa:	1c9a      	adds	r2, r3, #2
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b02      	subs	r3, #2
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004812:	e03b      	b.n	800488c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3320      	adds	r3, #32
 800481e:	7812      	ldrb	r2, [r2, #0]
 8004820:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800483e:	e025      	b.n	800488c <HAL_SPI_Transmit+0x378>
 8004840:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004844:	f7fc ff26 	bl	8001694 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d803      	bhi.n	800485c <HAL_SPI_Transmit+0x348>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485a:	d102      	bne.n	8004862 <HAL_SPI_Transmit+0x34e>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d114      	bne.n	800488c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fdf0 	bl	8005448 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800486e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e02c      	b.n	80048e6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	f47f af79 	bne.w	800478c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2200      	movs	r2, #0
 80048a2:	2108      	movs	r1, #8
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fe6f 	bl	8005588 <SPI_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fdc1 	bl	8005448 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80048e4:	2300      	movs	r3, #0
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop

080048f0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	4613      	mov	r3, r2
 80048fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	b29b      	uxth	r3, r3
 8004908:	3301      	adds	r3, #1
 800490a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3330      	adds	r3, #48	@ 0x30
 8004912:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004914:	f7fc febe 	bl	8001694 <HAL_GetTick>
 8004918:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d001      	beq.n	800492a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8004926:	2302      	movs	r3, #2
 8004928:	e250      	b.n	8004dcc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_SPI_Receive+0x46>
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e248      	b.n	8004dcc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_SPI_Receive+0x58>
 8004944:	2302      	movs	r3, #2
 8004946:	e241      	b.n	8004dcc <HAL_SPI_Receive+0x4dc>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2204      	movs	r2, #4
 8004954:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	88fa      	ldrh	r2, [r7, #6]
 800496a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	88fa      	ldrh	r2, [r7, #6]
 8004972:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80049a0:	d108      	bne.n	80049b4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e009      	b.n	80049c8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80049c6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	4b95      	ldr	r3, [pc, #596]	@ (8004c24 <HAL_SPI_Receive+0x334>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	88f9      	ldrh	r1, [r7, #6]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	430b      	orrs	r3, r1
 80049da:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049f4:	d107      	bne.n	8004a06 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a04:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b0f      	cmp	r3, #15
 8004a0c:	d96c      	bls.n	8004ae8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004a0e:	e064      	b.n	8004ada <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d114      	bne.n	8004a50 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a2e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a30:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a36:	1d1a      	adds	r2, r3, #4
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004a4e:	e044      	b.n	8004ada <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8bfa      	ldrh	r2, [r7, #30]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d919      	bls.n	8004a92 <HAL_SPI_Receive+0x1a2>
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d014      	beq.n	8004a92 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a70:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a72:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a78:	1d1a      	adds	r2, r3, #4
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004a90:	e023      	b.n	8004ada <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a92:	f7fc fdff 	bl	8001694 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d803      	bhi.n	8004aaa <HAL_SPI_Receive+0x1ba>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d102      	bne.n	8004ab0 <HAL_SPI_Receive+0x1c0>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d114      	bne.n	8004ada <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fcc9 	bl	8005448 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004abc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e178      	b.n	8004dcc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d194      	bne.n	8004a10 <HAL_SPI_Receive+0x120>
 8004ae6:	e15e      	b.n	8004da6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2b07      	cmp	r3, #7
 8004aee:	f240 8153 	bls.w	8004d98 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004af2:	e08f      	b.n	8004c14 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d114      	bne.n	8004b34 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	8812      	ldrh	r2, [r2, #0]
 8004b12:	b292      	uxth	r2, r2
 8004b14:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b1a:	1c9a      	adds	r2, r3, #2
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004b32:	e06f      	b.n	8004c14 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	8bfa      	ldrh	r2, [r7, #30]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d924      	bls.n	8004b8c <HAL_SPI_Receive+0x29c>
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01f      	beq.n	8004b8c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	8812      	ldrh	r2, [r2, #0]
 8004b54:	b292      	uxth	r2, r2
 8004b56:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b5c:	1c9a      	adds	r2, r3, #2
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	8812      	ldrh	r2, [r2, #0]
 8004b6a:	b292      	uxth	r2, r2
 8004b6c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b72:	1c9a      	adds	r2, r3, #2
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b02      	subs	r3, #2
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004b8a:	e043      	b.n	8004c14 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d119      	bne.n	8004bcc <HAL_SPI_Receive+0x2dc>
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d014      	beq.n	8004bcc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	8812      	ldrh	r2, [r2, #0]
 8004baa:	b292      	uxth	r2, r2
 8004bac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bb2:	1c9a      	adds	r2, r3, #2
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004bca:	e023      	b.n	8004c14 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bcc:	f7fc fd62 	bl	8001694 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d803      	bhi.n	8004be4 <HAL_SPI_Receive+0x2f4>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d102      	bne.n	8004bea <HAL_SPI_Receive+0x2fa>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d114      	bne.n	8004c14 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fc2c 	bl	8005448 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bf6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0db      	b.n	8004dcc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f47f af69 	bne.w	8004af4 <HAL_SPI_Receive+0x204>
 8004c22:	e0c0      	b.n	8004da6 <HAL_SPI_Receive+0x4b6>
 8004c24:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d117      	bne.n	8004c6e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c4a:	7812      	ldrb	r2, [r2, #0]
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004c6c:	e094      	b.n	8004d98 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8bfa      	ldrh	r2, [r7, #30]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d946      	bls.n	8004d0a <HAL_SPI_Receive+0x41a>
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d041      	beq.n	8004d0a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c92:	7812      	ldrb	r2, [r2, #0]
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cae:	7812      	ldrb	r2, [r2, #0]
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ce6:	7812      	ldrb	r2, [r2, #0]
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b04      	subs	r3, #4
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004d08:	e046      	b.n	8004d98 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d81c      	bhi.n	8004d50 <HAL_SPI_Receive+0x460>
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d017      	beq.n	8004d50 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d2c:	7812      	ldrb	r2, [r2, #0]
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004d4e:	e023      	b.n	8004d98 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d50:	f7fc fca0 	bl	8001694 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d803      	bhi.n	8004d68 <HAL_SPI_Receive+0x478>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d102      	bne.n	8004d6e <HAL_SPI_Receive+0x47e>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d114      	bne.n	8004d98 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fb6a 	bl	8005448 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e019      	b.n	8004dcc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f47f af41 	bne.w	8004c28 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fb4e 	bl	8005448 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8004dca:	2300      	movs	r3, #0
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3720      	adds	r7, #32
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08e      	sub	sp, #56	@ 0x38
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3320      	adds	r3, #32
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3330      	adds	r3, #48	@ 0x30
 8004df0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dfe:	f7fc fc49 	bl	8001694 <HAL_GetTick>
 8004e02:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8004e04:	887b      	ldrh	r3, [r7, #2]
 8004e06:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8004e08:	887b      	ldrh	r3, [r7, #2]
 8004e0a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d001      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e310      	b.n	800543e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0x5a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0x5a>
 8004e28:	887b      	ldrh	r3, [r7, #2]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e305      	b.n	800543e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_SPI_TransmitReceive+0x6c>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e2fe      	b.n	800543e <HAL_SPI_TransmitReceive+0x66a>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2205      	movs	r2, #5
 8004e4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	887a      	ldrh	r2, [r7, #2]
 8004e62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	887a      	ldrh	r2, [r7, #2]
 8004e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	887a      	ldrh	r2, [r7, #2]
 8004e78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	887a      	ldrh	r2, [r7, #2]
 8004e80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a70      	ldr	r2, [pc, #448]	@ (8005068 <HAL_SPI_TransmitReceive+0x294>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d009      	beq.n	8004ebe <HAL_SPI_TransmitReceive+0xea>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6f      	ldr	r2, [pc, #444]	@ (800506c <HAL_SPI_TransmitReceive+0x298>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d004      	beq.n	8004ebe <HAL_SPI_TransmitReceive+0xea>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a6d      	ldr	r2, [pc, #436]	@ (8005070 <HAL_SPI_TransmitReceive+0x29c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d102      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ec2:	e001      	b.n	8004ec8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	4b69      	ldr	r3, [pc, #420]	@ (8005074 <HAL_SPI_TransmitReceive+0x2a0>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	8879      	ldrh	r1, [r7, #2]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ef4:	d107      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	2b0f      	cmp	r3, #15
 8004f0c:	f240 80a2 	bls.w	8005054 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8004f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f12:	089b      	lsrs	r3, r3, #2
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004f16:	e094      	b.n	8005042 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d120      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x194>
 8004f26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01d      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8004f2c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004f2e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8004f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f32:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d217      	bcs.n	8004f68 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f48:	1d1a      	adds	r2, r3, #4
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f66:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8004f70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d065      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d118      	bne.n	8004fb6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f8e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f94:	1d1a      	adds	r2, r3, #4
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004fb2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004fb4:	e045      	b.n	8005042 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004fb6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004fb8:	8bfb      	ldrh	r3, [r7, #30]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d21d      	bcs.n	8004ffa <HAL_SPI_TransmitReceive+0x226>
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d018      	beq.n	8004ffa <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fd0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fd2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fd8:	1d1a      	adds	r2, r3, #4
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004ff6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004ff8:	e023      	b.n	8005042 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ffa:	f7fc fb4b 	bl	8001694 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005006:	429a      	cmp	r2, r3
 8005008:	d803      	bhi.n	8005012 <HAL_SPI_TransmitReceive+0x23e>
 800500a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d102      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x244>
 8005012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005014:	2b00      	cmp	r3, #0
 8005016:	d114      	bne.n	8005042 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fa15 	bl	8005448 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005024:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e1fd      	b.n	800543e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005042:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005044:	2b00      	cmp	r3, #0
 8005046:	f47f af67 	bne.w	8004f18 <HAL_SPI_TransmitReceive+0x144>
 800504a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800504c:	2b00      	cmp	r3, #0
 800504e:	f47f af63 	bne.w	8004f18 <HAL_SPI_TransmitReceive+0x144>
 8005052:	e1ce      	b.n	80053f2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b07      	cmp	r3, #7
 800505a:	f240 81c2 	bls.w	80053e2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800505e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005064:	e0c9      	b.n	80051fa <HAL_SPI_TransmitReceive+0x426>
 8005066:	bf00      	nop
 8005068:	40013000 	.word	0x40013000
 800506c:	40003800 	.word	0x40003800
 8005070:	40003c00 	.word	0x40003c00
 8005074:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b02      	cmp	r3, #2
 8005084:	d11f      	bne.n	80050c6 <HAL_SPI_TransmitReceive+0x2f2>
 8005086:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01c      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800508c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800508e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005092:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005094:	429a      	cmp	r2, r3
 8005096:	d216      	bcs.n	80050c6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800509c:	881a      	ldrh	r2, [r3, #0]
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a6:	1c9a      	adds	r2, r3, #2
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80050c4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80050ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8092 	beq.w	80051fa <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d118      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050e8:	6a3a      	ldr	r2, [r7, #32]
 80050ea:	8812      	ldrh	r2, [r2, #0]
 80050ec:	b292      	uxth	r2, r2
 80050ee:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050f4:	1c9a      	adds	r2, r3, #2
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005112:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005114:	e071      	b.n	80051fa <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005116:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005118:	8bfb      	ldrh	r3, [r7, #30]
 800511a:	429a      	cmp	r2, r3
 800511c:	d228      	bcs.n	8005170 <HAL_SPI_TransmitReceive+0x39c>
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d023      	beq.n	8005170 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800512c:	6a3a      	ldr	r2, [r7, #32]
 800512e:	8812      	ldrh	r2, [r2, #0]
 8005130:	b292      	uxth	r2, r2
 8005132:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005138:	1c9a      	adds	r2, r3, #2
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005142:	6a3a      	ldr	r2, [r7, #32]
 8005144:	8812      	ldrh	r2, [r2, #0]
 8005146:	b292      	uxth	r2, r2
 8005148:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800514e:	1c9a      	adds	r2, r3, #2
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b02      	subs	r3, #2
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800516c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800516e:	e044      	b.n	80051fa <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005170:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005172:	2b01      	cmp	r3, #1
 8005174:	d11d      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x3de>
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d018      	beq.n	80051b2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005184:	6a3a      	ldr	r2, [r7, #32]
 8005186:	8812      	ldrh	r2, [r2, #0]
 8005188:	b292      	uxth	r2, r2
 800518a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005190:	1c9a      	adds	r2, r3, #2
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80051ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80051b0:	e023      	b.n	80051fa <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051b2:	f7fc fa6f 	bl	8001694 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051be:	429a      	cmp	r2, r3
 80051c0:	d803      	bhi.n	80051ca <HAL_SPI_TransmitReceive+0x3f6>
 80051c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d102      	bne.n	80051d0 <HAL_SPI_TransmitReceive+0x3fc>
 80051ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d114      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f939 	bl	8005448 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e121      	b.n	800543e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80051fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f47f af3b 	bne.w	8005078 <HAL_SPI_TransmitReceive+0x2a4>
 8005202:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005204:	2b00      	cmp	r3, #0
 8005206:	f47f af37 	bne.w	8005078 <HAL_SPI_TransmitReceive+0x2a4>
 800520a:	e0f2      	b.n	80053f2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b02      	cmp	r3, #2
 8005218:	d121      	bne.n	800525e <HAL_SPI_TransmitReceive+0x48a>
 800521a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01e      	beq.n	800525e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005220:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005222:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005226:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005228:	429a      	cmp	r2, r3
 800522a:	d218      	bcs.n	800525e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3320      	adds	r3, #32
 8005236:	7812      	ldrb	r2, [r2, #0]
 8005238:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800525c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005266:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 80ba 	beq.w	80053e2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b01      	cmp	r3, #1
 800527a:	d11b      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005288:	7812      	ldrb	r2, [r2, #0]
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80052b0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80052b2:	e096      	b.n	80053e2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80052b4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80052b6:	8bfb      	ldrh	r3, [r7, #30]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d24a      	bcs.n	8005352 <HAL_SPI_TransmitReceive+0x57e>
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d045      	beq.n	8005352 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052ee:	7812      	ldrb	r2, [r2, #0]
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800530a:	7812      	ldrb	r2, [r2, #0]
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005326:	7812      	ldrb	r2, [r2, #0]
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b04      	subs	r3, #4
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800534e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005350:	e047      	b.n	80053e2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005352:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005354:	2b03      	cmp	r3, #3
 8005356:	d820      	bhi.n	800539a <HAL_SPI_TransmitReceive+0x5c6>
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01b      	beq.n	800539a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800536e:	7812      	ldrb	r2, [r2, #0]
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005396:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005398:	e023      	b.n	80053e2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800539a:	f7fc f97b 	bl	8001694 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d803      	bhi.n	80053b2 <HAL_SPI_TransmitReceive+0x5de>
 80053aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d102      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x5e4>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d114      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f845 	bl	8005448 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e02d      	b.n	800543e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80053e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f47f af11 	bne.w	800520c <HAL_SPI_TransmitReceive+0x438>
 80053ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f47f af0d 	bne.w	800520c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	2200      	movs	r2, #0
 80053fa:	2108      	movs	r1, #8
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f8c3 	bl	8005588 <SPI_WaitOnFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800540e:	f043 0220 	orr.w	r2, r3, #32
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f815 	bl	8005448 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800543c:	2300      	movs	r3, #0
  }
}
 800543e:	4618      	mov	r0, r3
 8005440:	3730      	adds	r7, #48	@ 0x30
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop

08005448 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0208 	orr.w	r2, r2, #8
 8005466:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0210 	orr.w	r2, r2, #16
 8005476:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0201 	bic.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6919      	ldr	r1, [r3, #16]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b3c      	ldr	r3, [pc, #240]	@ (8005584 <SPI_CloseTransfer+0x13c>)
 8005494:	400b      	ands	r3, r1
 8005496:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80054a6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d014      	beq.n	80054de <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00f      	beq.n	80054de <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699a      	ldr	r2, [r3, #24]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0220 	orr.w	r2, r2, #32
 80054dc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d014      	beq.n	8005514 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00f      	beq.n	8005514 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054fa:	f043 0204 	orr.w	r2, r3, #4
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005512:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00f      	beq.n	800553e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005524:	f043 0201 	orr.w	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800553c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00f      	beq.n	8005568 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800554e:	f043 0208 	orr.w	r2, r3, #8
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005566:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005578:	bf00      	nop
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	fffffc90 	.word	0xfffffc90

08005588 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005598:	e010      	b.n	80055bc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800559a:	f7fc f87b 	bl	8001694 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d803      	bhi.n	80055b2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d102      	bne.n	80055b8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e00f      	b.n	80055dc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695a      	ldr	r2, [r3, #20]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4013      	ands	r3, r2
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	bf0c      	ite	eq
 80055cc:	2301      	moveq	r3, #1
 80055ce:	2300      	movne	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d0df      	beq.n	800559a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	3301      	adds	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	3307      	adds	r3, #7
 8005602:	08db      	lsrs	r3, r3, #3
 8005604:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	fb02 f303 	mul.w	r3, r2, r3
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <__cvt>:
 800561a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800561c:	ed2d 8b02 	vpush	{d8}
 8005620:	eeb0 8b40 	vmov.f64	d8, d0
 8005624:	b085      	sub	sp, #20
 8005626:	4617      	mov	r7, r2
 8005628:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800562a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800562c:	ee18 2a90 	vmov	r2, s17
 8005630:	f025 0520 	bic.w	r5, r5, #32
 8005634:	2a00      	cmp	r2, #0
 8005636:	bfb6      	itet	lt
 8005638:	222d      	movlt	r2, #45	@ 0x2d
 800563a:	2200      	movge	r2, #0
 800563c:	eeb1 8b40 	vneglt.f64	d8, d0
 8005640:	2d46      	cmp	r5, #70	@ 0x46
 8005642:	460c      	mov	r4, r1
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	d004      	beq.n	8005652 <__cvt+0x38>
 8005648:	2d45      	cmp	r5, #69	@ 0x45
 800564a:	d100      	bne.n	800564e <__cvt+0x34>
 800564c:	3401      	adds	r4, #1
 800564e:	2102      	movs	r1, #2
 8005650:	e000      	b.n	8005654 <__cvt+0x3a>
 8005652:	2103      	movs	r1, #3
 8005654:	ab03      	add	r3, sp, #12
 8005656:	9301      	str	r3, [sp, #4]
 8005658:	ab02      	add	r3, sp, #8
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	4622      	mov	r2, r4
 800565e:	4633      	mov	r3, r6
 8005660:	eeb0 0b48 	vmov.f64	d0, d8
 8005664:	f000 ff24 	bl	80064b0 <_dtoa_r>
 8005668:	2d47      	cmp	r5, #71	@ 0x47
 800566a:	d114      	bne.n	8005696 <__cvt+0x7c>
 800566c:	07fb      	lsls	r3, r7, #31
 800566e:	d50a      	bpl.n	8005686 <__cvt+0x6c>
 8005670:	1902      	adds	r2, r0, r4
 8005672:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	bf08      	it	eq
 800567c:	9203      	streq	r2, [sp, #12]
 800567e:	2130      	movs	r1, #48	@ 0x30
 8005680:	9b03      	ldr	r3, [sp, #12]
 8005682:	4293      	cmp	r3, r2
 8005684:	d319      	bcc.n	80056ba <__cvt+0xa0>
 8005686:	9b03      	ldr	r3, [sp, #12]
 8005688:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800568a:	1a1b      	subs	r3, r3, r0
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	b005      	add	sp, #20
 8005690:	ecbd 8b02 	vpop	{d8}
 8005694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005696:	2d46      	cmp	r5, #70	@ 0x46
 8005698:	eb00 0204 	add.w	r2, r0, r4
 800569c:	d1e9      	bne.n	8005672 <__cvt+0x58>
 800569e:	7803      	ldrb	r3, [r0, #0]
 80056a0:	2b30      	cmp	r3, #48	@ 0x30
 80056a2:	d107      	bne.n	80056b4 <__cvt+0x9a>
 80056a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80056a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ac:	bf1c      	itt	ne
 80056ae:	f1c4 0401 	rsbne	r4, r4, #1
 80056b2:	6034      	strne	r4, [r6, #0]
 80056b4:	6833      	ldr	r3, [r6, #0]
 80056b6:	441a      	add	r2, r3
 80056b8:	e7db      	b.n	8005672 <__cvt+0x58>
 80056ba:	1c5c      	adds	r4, r3, #1
 80056bc:	9403      	str	r4, [sp, #12]
 80056be:	7019      	strb	r1, [r3, #0]
 80056c0:	e7de      	b.n	8005680 <__cvt+0x66>

080056c2 <__exponent>:
 80056c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056c4:	2900      	cmp	r1, #0
 80056c6:	bfba      	itte	lt
 80056c8:	4249      	neglt	r1, r1
 80056ca:	232d      	movlt	r3, #45	@ 0x2d
 80056cc:	232b      	movge	r3, #43	@ 0x2b
 80056ce:	2909      	cmp	r1, #9
 80056d0:	7002      	strb	r2, [r0, #0]
 80056d2:	7043      	strb	r3, [r0, #1]
 80056d4:	dd29      	ble.n	800572a <__exponent+0x68>
 80056d6:	f10d 0307 	add.w	r3, sp, #7
 80056da:	461d      	mov	r5, r3
 80056dc:	270a      	movs	r7, #10
 80056de:	461a      	mov	r2, r3
 80056e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80056e4:	fb07 1416 	mls	r4, r7, r6, r1
 80056e8:	3430      	adds	r4, #48	@ 0x30
 80056ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80056ee:	460c      	mov	r4, r1
 80056f0:	2c63      	cmp	r4, #99	@ 0x63
 80056f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80056f6:	4631      	mov	r1, r6
 80056f8:	dcf1      	bgt.n	80056de <__exponent+0x1c>
 80056fa:	3130      	adds	r1, #48	@ 0x30
 80056fc:	1e94      	subs	r4, r2, #2
 80056fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005702:	1c41      	adds	r1, r0, #1
 8005704:	4623      	mov	r3, r4
 8005706:	42ab      	cmp	r3, r5
 8005708:	d30a      	bcc.n	8005720 <__exponent+0x5e>
 800570a:	f10d 0309 	add.w	r3, sp, #9
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	42ac      	cmp	r4, r5
 8005712:	bf88      	it	hi
 8005714:	2300      	movhi	r3, #0
 8005716:	3302      	adds	r3, #2
 8005718:	4403      	add	r3, r0
 800571a:	1a18      	subs	r0, r3, r0
 800571c:	b003      	add	sp, #12
 800571e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005720:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005724:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005728:	e7ed      	b.n	8005706 <__exponent+0x44>
 800572a:	2330      	movs	r3, #48	@ 0x30
 800572c:	3130      	adds	r1, #48	@ 0x30
 800572e:	7083      	strb	r3, [r0, #2]
 8005730:	70c1      	strb	r1, [r0, #3]
 8005732:	1d03      	adds	r3, r0, #4
 8005734:	e7f1      	b.n	800571a <__exponent+0x58>
	...

08005738 <_printf_float>:
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	b08d      	sub	sp, #52	@ 0x34
 800573e:	460c      	mov	r4, r1
 8005740:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005744:	4616      	mov	r6, r2
 8005746:	461f      	mov	r7, r3
 8005748:	4605      	mov	r5, r0
 800574a:	f000 fdaf 	bl	80062ac <_localeconv_r>
 800574e:	f8d0 b000 	ldr.w	fp, [r0]
 8005752:	4658      	mov	r0, fp
 8005754:	f7fa fe14 	bl	8000380 <strlen>
 8005758:	2300      	movs	r3, #0
 800575a:	930a      	str	r3, [sp, #40]	@ 0x28
 800575c:	f8d8 3000 	ldr.w	r3, [r8]
 8005760:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005764:	6822      	ldr	r2, [r4, #0]
 8005766:	9005      	str	r0, [sp, #20]
 8005768:	3307      	adds	r3, #7
 800576a:	f023 0307 	bic.w	r3, r3, #7
 800576e:	f103 0108 	add.w	r1, r3, #8
 8005772:	f8c8 1000 	str.w	r1, [r8]
 8005776:	ed93 0b00 	vldr	d0, [r3]
 800577a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80059d8 <_printf_float+0x2a0>
 800577e:	eeb0 7bc0 	vabs.f64	d7, d0
 8005782:	eeb4 7b46 	vcmp.f64	d7, d6
 8005786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800578a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800578e:	dd24      	ble.n	80057da <_printf_float+0xa2>
 8005790:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005798:	d502      	bpl.n	80057a0 <_printf_float+0x68>
 800579a:	232d      	movs	r3, #45	@ 0x2d
 800579c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057a0:	498f      	ldr	r1, [pc, #572]	@ (80059e0 <_printf_float+0x2a8>)
 80057a2:	4b90      	ldr	r3, [pc, #576]	@ (80059e4 <_printf_float+0x2ac>)
 80057a4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80057a8:	bf94      	ite	ls
 80057aa:	4688      	movls	r8, r1
 80057ac:	4698      	movhi	r8, r3
 80057ae:	f022 0204 	bic.w	r2, r2, #4
 80057b2:	2303      	movs	r3, #3
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	6022      	str	r2, [r4, #0]
 80057b8:	f04f 0a00 	mov.w	sl, #0
 80057bc:	9700      	str	r7, [sp, #0]
 80057be:	4633      	mov	r3, r6
 80057c0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80057c2:	4621      	mov	r1, r4
 80057c4:	4628      	mov	r0, r5
 80057c6:	f000 f9d1 	bl	8005b6c <_printf_common>
 80057ca:	3001      	adds	r0, #1
 80057cc:	f040 8089 	bne.w	80058e2 <_printf_float+0x1aa>
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	b00d      	add	sp, #52	@ 0x34
 80057d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057da:	eeb4 0b40 	vcmp.f64	d0, d0
 80057de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e2:	d709      	bvc.n	80057f8 <_printf_float+0xc0>
 80057e4:	ee10 3a90 	vmov	r3, s1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bfbc      	itt	lt
 80057ec:	232d      	movlt	r3, #45	@ 0x2d
 80057ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80057f2:	497d      	ldr	r1, [pc, #500]	@ (80059e8 <_printf_float+0x2b0>)
 80057f4:	4b7d      	ldr	r3, [pc, #500]	@ (80059ec <_printf_float+0x2b4>)
 80057f6:	e7d5      	b.n	80057a4 <_printf_float+0x6c>
 80057f8:	6863      	ldr	r3, [r4, #4]
 80057fa:	1c59      	adds	r1, r3, #1
 80057fc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8005800:	d139      	bne.n	8005876 <_printf_float+0x13e>
 8005802:	2306      	movs	r3, #6
 8005804:	6063      	str	r3, [r4, #4]
 8005806:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800580a:	2300      	movs	r3, #0
 800580c:	6022      	str	r2, [r4, #0]
 800580e:	9303      	str	r3, [sp, #12]
 8005810:	ab0a      	add	r3, sp, #40	@ 0x28
 8005812:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005816:	ab09      	add	r3, sp, #36	@ 0x24
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	6861      	ldr	r1, [r4, #4]
 800581c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005820:	4628      	mov	r0, r5
 8005822:	f7ff fefa 	bl	800561a <__cvt>
 8005826:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800582a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800582c:	4680      	mov	r8, r0
 800582e:	d129      	bne.n	8005884 <_printf_float+0x14c>
 8005830:	1cc8      	adds	r0, r1, #3
 8005832:	db02      	blt.n	800583a <_printf_float+0x102>
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	4299      	cmp	r1, r3
 8005838:	dd41      	ble.n	80058be <_printf_float+0x186>
 800583a:	f1a9 0902 	sub.w	r9, r9, #2
 800583e:	fa5f f989 	uxtb.w	r9, r9
 8005842:	3901      	subs	r1, #1
 8005844:	464a      	mov	r2, r9
 8005846:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800584a:	9109      	str	r1, [sp, #36]	@ 0x24
 800584c:	f7ff ff39 	bl	80056c2 <__exponent>
 8005850:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005852:	1813      	adds	r3, r2, r0
 8005854:	2a01      	cmp	r2, #1
 8005856:	4682      	mov	sl, r0
 8005858:	6123      	str	r3, [r4, #16]
 800585a:	dc02      	bgt.n	8005862 <_printf_float+0x12a>
 800585c:	6822      	ldr	r2, [r4, #0]
 800585e:	07d2      	lsls	r2, r2, #31
 8005860:	d501      	bpl.n	8005866 <_printf_float+0x12e>
 8005862:	3301      	adds	r3, #1
 8005864:	6123      	str	r3, [r4, #16]
 8005866:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0a6      	beq.n	80057bc <_printf_float+0x84>
 800586e:	232d      	movs	r3, #45	@ 0x2d
 8005870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005874:	e7a2      	b.n	80057bc <_printf_float+0x84>
 8005876:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800587a:	d1c4      	bne.n	8005806 <_printf_float+0xce>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1c2      	bne.n	8005806 <_printf_float+0xce>
 8005880:	2301      	movs	r3, #1
 8005882:	e7bf      	b.n	8005804 <_printf_float+0xcc>
 8005884:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005888:	d9db      	bls.n	8005842 <_printf_float+0x10a>
 800588a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800588e:	d118      	bne.n	80058c2 <_printf_float+0x18a>
 8005890:	2900      	cmp	r1, #0
 8005892:	6863      	ldr	r3, [r4, #4]
 8005894:	dd0b      	ble.n	80058ae <_printf_float+0x176>
 8005896:	6121      	str	r1, [r4, #16]
 8005898:	b913      	cbnz	r3, 80058a0 <_printf_float+0x168>
 800589a:	6822      	ldr	r2, [r4, #0]
 800589c:	07d0      	lsls	r0, r2, #31
 800589e:	d502      	bpl.n	80058a6 <_printf_float+0x16e>
 80058a0:	3301      	adds	r3, #1
 80058a2:	440b      	add	r3, r1
 80058a4:	6123      	str	r3, [r4, #16]
 80058a6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80058a8:	f04f 0a00 	mov.w	sl, #0
 80058ac:	e7db      	b.n	8005866 <_printf_float+0x12e>
 80058ae:	b913      	cbnz	r3, 80058b6 <_printf_float+0x17e>
 80058b0:	6822      	ldr	r2, [r4, #0]
 80058b2:	07d2      	lsls	r2, r2, #31
 80058b4:	d501      	bpl.n	80058ba <_printf_float+0x182>
 80058b6:	3302      	adds	r3, #2
 80058b8:	e7f4      	b.n	80058a4 <_printf_float+0x16c>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e7f2      	b.n	80058a4 <_printf_float+0x16c>
 80058be:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80058c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058c4:	4299      	cmp	r1, r3
 80058c6:	db05      	blt.n	80058d4 <_printf_float+0x19c>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	6121      	str	r1, [r4, #16]
 80058cc:	07d8      	lsls	r0, r3, #31
 80058ce:	d5ea      	bpl.n	80058a6 <_printf_float+0x16e>
 80058d0:	1c4b      	adds	r3, r1, #1
 80058d2:	e7e7      	b.n	80058a4 <_printf_float+0x16c>
 80058d4:	2900      	cmp	r1, #0
 80058d6:	bfd4      	ite	le
 80058d8:	f1c1 0202 	rsble	r2, r1, #2
 80058dc:	2201      	movgt	r2, #1
 80058de:	4413      	add	r3, r2
 80058e0:	e7e0      	b.n	80058a4 <_printf_float+0x16c>
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	055a      	lsls	r2, r3, #21
 80058e6:	d407      	bmi.n	80058f8 <_printf_float+0x1c0>
 80058e8:	6923      	ldr	r3, [r4, #16]
 80058ea:	4642      	mov	r2, r8
 80058ec:	4631      	mov	r1, r6
 80058ee:	4628      	mov	r0, r5
 80058f0:	47b8      	blx	r7
 80058f2:	3001      	adds	r0, #1
 80058f4:	d12a      	bne.n	800594c <_printf_float+0x214>
 80058f6:	e76b      	b.n	80057d0 <_printf_float+0x98>
 80058f8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80058fc:	f240 80e0 	bls.w	8005ac0 <_printf_float+0x388>
 8005900:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8005904:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800590c:	d133      	bne.n	8005976 <_printf_float+0x23e>
 800590e:	4a38      	ldr	r2, [pc, #224]	@ (80059f0 <_printf_float+0x2b8>)
 8005910:	2301      	movs	r3, #1
 8005912:	4631      	mov	r1, r6
 8005914:	4628      	mov	r0, r5
 8005916:	47b8      	blx	r7
 8005918:	3001      	adds	r0, #1
 800591a:	f43f af59 	beq.w	80057d0 <_printf_float+0x98>
 800591e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005922:	4543      	cmp	r3, r8
 8005924:	db02      	blt.n	800592c <_printf_float+0x1f4>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	07d8      	lsls	r0, r3, #31
 800592a:	d50f      	bpl.n	800594c <_printf_float+0x214>
 800592c:	9b05      	ldr	r3, [sp, #20]
 800592e:	465a      	mov	r2, fp
 8005930:	4631      	mov	r1, r6
 8005932:	4628      	mov	r0, r5
 8005934:	47b8      	blx	r7
 8005936:	3001      	adds	r0, #1
 8005938:	f43f af4a 	beq.w	80057d0 <_printf_float+0x98>
 800593c:	f04f 0900 	mov.w	r9, #0
 8005940:	f108 38ff 	add.w	r8, r8, #4294967295
 8005944:	f104 0a1a 	add.w	sl, r4, #26
 8005948:	45c8      	cmp	r8, r9
 800594a:	dc09      	bgt.n	8005960 <_printf_float+0x228>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	079b      	lsls	r3, r3, #30
 8005950:	f100 8107 	bmi.w	8005b62 <_printf_float+0x42a>
 8005954:	68e0      	ldr	r0, [r4, #12]
 8005956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005958:	4298      	cmp	r0, r3
 800595a:	bfb8      	it	lt
 800595c:	4618      	movlt	r0, r3
 800595e:	e739      	b.n	80057d4 <_printf_float+0x9c>
 8005960:	2301      	movs	r3, #1
 8005962:	4652      	mov	r2, sl
 8005964:	4631      	mov	r1, r6
 8005966:	4628      	mov	r0, r5
 8005968:	47b8      	blx	r7
 800596a:	3001      	adds	r0, #1
 800596c:	f43f af30 	beq.w	80057d0 <_printf_float+0x98>
 8005970:	f109 0901 	add.w	r9, r9, #1
 8005974:	e7e8      	b.n	8005948 <_printf_float+0x210>
 8005976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	dc3b      	bgt.n	80059f4 <_printf_float+0x2bc>
 800597c:	4a1c      	ldr	r2, [pc, #112]	@ (80059f0 <_printf_float+0x2b8>)
 800597e:	2301      	movs	r3, #1
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	f43f af22 	beq.w	80057d0 <_printf_float+0x98>
 800598c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005990:	ea59 0303 	orrs.w	r3, r9, r3
 8005994:	d102      	bne.n	800599c <_printf_float+0x264>
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	07d9      	lsls	r1, r3, #31
 800599a:	d5d7      	bpl.n	800594c <_printf_float+0x214>
 800599c:	9b05      	ldr	r3, [sp, #20]
 800599e:	465a      	mov	r2, fp
 80059a0:	4631      	mov	r1, r6
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b8      	blx	r7
 80059a6:	3001      	adds	r0, #1
 80059a8:	f43f af12 	beq.w	80057d0 <_printf_float+0x98>
 80059ac:	f04f 0a00 	mov.w	sl, #0
 80059b0:	f104 0b1a 	add.w	fp, r4, #26
 80059b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059b6:	425b      	negs	r3, r3
 80059b8:	4553      	cmp	r3, sl
 80059ba:	dc01      	bgt.n	80059c0 <_printf_float+0x288>
 80059bc:	464b      	mov	r3, r9
 80059be:	e794      	b.n	80058ea <_printf_float+0x1b2>
 80059c0:	2301      	movs	r3, #1
 80059c2:	465a      	mov	r2, fp
 80059c4:	4631      	mov	r1, r6
 80059c6:	4628      	mov	r0, r5
 80059c8:	47b8      	blx	r7
 80059ca:	3001      	adds	r0, #1
 80059cc:	f43f af00 	beq.w	80057d0 <_printf_float+0x98>
 80059d0:	f10a 0a01 	add.w	sl, sl, #1
 80059d4:	e7ee      	b.n	80059b4 <_printf_float+0x27c>
 80059d6:	bf00      	nop
 80059d8:	ffffffff 	.word	0xffffffff
 80059dc:	7fefffff 	.word	0x7fefffff
 80059e0:	08008054 	.word	0x08008054
 80059e4:	08008058 	.word	0x08008058
 80059e8:	0800805c 	.word	0x0800805c
 80059ec:	08008060 	.word	0x08008060
 80059f0:	08008064 	.word	0x08008064
 80059f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80059fa:	4553      	cmp	r3, sl
 80059fc:	bfa8      	it	ge
 80059fe:	4653      	movge	r3, sl
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	4699      	mov	r9, r3
 8005a04:	dc37      	bgt.n	8005a76 <_printf_float+0x33e>
 8005a06:	2300      	movs	r3, #0
 8005a08:	9307      	str	r3, [sp, #28]
 8005a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a0e:	f104 021a 	add.w	r2, r4, #26
 8005a12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a14:	9907      	ldr	r1, [sp, #28]
 8005a16:	9306      	str	r3, [sp, #24]
 8005a18:	eba3 0309 	sub.w	r3, r3, r9
 8005a1c:	428b      	cmp	r3, r1
 8005a1e:	dc31      	bgt.n	8005a84 <_printf_float+0x34c>
 8005a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a22:	459a      	cmp	sl, r3
 8005a24:	dc3b      	bgt.n	8005a9e <_printf_float+0x366>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	07da      	lsls	r2, r3, #31
 8005a2a:	d438      	bmi.n	8005a9e <_printf_float+0x366>
 8005a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a2e:	ebaa 0903 	sub.w	r9, sl, r3
 8005a32:	9b06      	ldr	r3, [sp, #24]
 8005a34:	ebaa 0303 	sub.w	r3, sl, r3
 8005a38:	4599      	cmp	r9, r3
 8005a3a:	bfa8      	it	ge
 8005a3c:	4699      	movge	r9, r3
 8005a3e:	f1b9 0f00 	cmp.w	r9, #0
 8005a42:	dc34      	bgt.n	8005aae <_printf_float+0x376>
 8005a44:	f04f 0800 	mov.w	r8, #0
 8005a48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a4c:	f104 0b1a 	add.w	fp, r4, #26
 8005a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a52:	ebaa 0303 	sub.w	r3, sl, r3
 8005a56:	eba3 0309 	sub.w	r3, r3, r9
 8005a5a:	4543      	cmp	r3, r8
 8005a5c:	f77f af76 	ble.w	800594c <_printf_float+0x214>
 8005a60:	2301      	movs	r3, #1
 8005a62:	465a      	mov	r2, fp
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f aeb0 	beq.w	80057d0 <_printf_float+0x98>
 8005a70:	f108 0801 	add.w	r8, r8, #1
 8005a74:	e7ec      	b.n	8005a50 <_printf_float+0x318>
 8005a76:	4642      	mov	r2, r8
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	47b8      	blx	r7
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d1c1      	bne.n	8005a06 <_printf_float+0x2ce>
 8005a82:	e6a5      	b.n	80057d0 <_printf_float+0x98>
 8005a84:	2301      	movs	r3, #1
 8005a86:	4631      	mov	r1, r6
 8005a88:	4628      	mov	r0, r5
 8005a8a:	9206      	str	r2, [sp, #24]
 8005a8c:	47b8      	blx	r7
 8005a8e:	3001      	adds	r0, #1
 8005a90:	f43f ae9e 	beq.w	80057d0 <_printf_float+0x98>
 8005a94:	9b07      	ldr	r3, [sp, #28]
 8005a96:	9a06      	ldr	r2, [sp, #24]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	9307      	str	r3, [sp, #28]
 8005a9c:	e7b9      	b.n	8005a12 <_printf_float+0x2da>
 8005a9e:	9b05      	ldr	r3, [sp, #20]
 8005aa0:	465a      	mov	r2, fp
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b8      	blx	r7
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	d1bf      	bne.n	8005a2c <_printf_float+0x2f4>
 8005aac:	e690      	b.n	80057d0 <_printf_float+0x98>
 8005aae:	9a06      	ldr	r2, [sp, #24]
 8005ab0:	464b      	mov	r3, r9
 8005ab2:	4442      	add	r2, r8
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b8      	blx	r7
 8005aba:	3001      	adds	r0, #1
 8005abc:	d1c2      	bne.n	8005a44 <_printf_float+0x30c>
 8005abe:	e687      	b.n	80057d0 <_printf_float+0x98>
 8005ac0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8005ac4:	f1b9 0f01 	cmp.w	r9, #1
 8005ac8:	dc01      	bgt.n	8005ace <_printf_float+0x396>
 8005aca:	07db      	lsls	r3, r3, #31
 8005acc:	d536      	bpl.n	8005b3c <_printf_float+0x404>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	47b8      	blx	r7
 8005ad8:	3001      	adds	r0, #1
 8005ada:	f43f ae79 	beq.w	80057d0 <_printf_float+0x98>
 8005ade:	9b05      	ldr	r3, [sp, #20]
 8005ae0:	465a      	mov	r2, fp
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b8      	blx	r7
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f43f ae71 	beq.w	80057d0 <_printf_float+0x98>
 8005aee:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8005af2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005afa:	f109 39ff 	add.w	r9, r9, #4294967295
 8005afe:	d018      	beq.n	8005b32 <_printf_float+0x3fa>
 8005b00:	464b      	mov	r3, r9
 8005b02:	f108 0201 	add.w	r2, r8, #1
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d10c      	bne.n	8005b2a <_printf_float+0x3f2>
 8005b10:	e65e      	b.n	80057d0 <_printf_float+0x98>
 8005b12:	2301      	movs	r3, #1
 8005b14:	465a      	mov	r2, fp
 8005b16:	4631      	mov	r1, r6
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b8      	blx	r7
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	f43f ae57 	beq.w	80057d0 <_printf_float+0x98>
 8005b22:	f108 0801 	add.w	r8, r8, #1
 8005b26:	45c8      	cmp	r8, r9
 8005b28:	dbf3      	blt.n	8005b12 <_printf_float+0x3da>
 8005b2a:	4653      	mov	r3, sl
 8005b2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005b30:	e6dc      	b.n	80058ec <_printf_float+0x1b4>
 8005b32:	f04f 0800 	mov.w	r8, #0
 8005b36:	f104 0b1a 	add.w	fp, r4, #26
 8005b3a:	e7f4      	b.n	8005b26 <_printf_float+0x3ee>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	4642      	mov	r2, r8
 8005b40:	e7e1      	b.n	8005b06 <_printf_float+0x3ce>
 8005b42:	2301      	movs	r3, #1
 8005b44:	464a      	mov	r2, r9
 8005b46:	4631      	mov	r1, r6
 8005b48:	4628      	mov	r0, r5
 8005b4a:	47b8      	blx	r7
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	f43f ae3f 	beq.w	80057d0 <_printf_float+0x98>
 8005b52:	f108 0801 	add.w	r8, r8, #1
 8005b56:	68e3      	ldr	r3, [r4, #12]
 8005b58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b5a:	1a5b      	subs	r3, r3, r1
 8005b5c:	4543      	cmp	r3, r8
 8005b5e:	dcf0      	bgt.n	8005b42 <_printf_float+0x40a>
 8005b60:	e6f8      	b.n	8005954 <_printf_float+0x21c>
 8005b62:	f04f 0800 	mov.w	r8, #0
 8005b66:	f104 0919 	add.w	r9, r4, #25
 8005b6a:	e7f4      	b.n	8005b56 <_printf_float+0x41e>

08005b6c <_printf_common>:
 8005b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b70:	4616      	mov	r6, r2
 8005b72:	4698      	mov	r8, r3
 8005b74:	688a      	ldr	r2, [r1, #8]
 8005b76:	690b      	ldr	r3, [r1, #16]
 8005b78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	bfb8      	it	lt
 8005b80:	4613      	movlt	r3, r2
 8005b82:	6033      	str	r3, [r6, #0]
 8005b84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b88:	4607      	mov	r7, r0
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	b10a      	cbz	r2, 8005b92 <_printf_common+0x26>
 8005b8e:	3301      	adds	r3, #1
 8005b90:	6033      	str	r3, [r6, #0]
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	0699      	lsls	r1, r3, #26
 8005b96:	bf42      	ittt	mi
 8005b98:	6833      	ldrmi	r3, [r6, #0]
 8005b9a:	3302      	addmi	r3, #2
 8005b9c:	6033      	strmi	r3, [r6, #0]
 8005b9e:	6825      	ldr	r5, [r4, #0]
 8005ba0:	f015 0506 	ands.w	r5, r5, #6
 8005ba4:	d106      	bne.n	8005bb4 <_printf_common+0x48>
 8005ba6:	f104 0a19 	add.w	sl, r4, #25
 8005baa:	68e3      	ldr	r3, [r4, #12]
 8005bac:	6832      	ldr	r2, [r6, #0]
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	42ab      	cmp	r3, r5
 8005bb2:	dc26      	bgt.n	8005c02 <_printf_common+0x96>
 8005bb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bb8:	6822      	ldr	r2, [r4, #0]
 8005bba:	3b00      	subs	r3, #0
 8005bbc:	bf18      	it	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	0692      	lsls	r2, r2, #26
 8005bc2:	d42b      	bmi.n	8005c1c <_printf_common+0xb0>
 8005bc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005bc8:	4641      	mov	r1, r8
 8005bca:	4638      	mov	r0, r7
 8005bcc:	47c8      	blx	r9
 8005bce:	3001      	adds	r0, #1
 8005bd0:	d01e      	beq.n	8005c10 <_printf_common+0xa4>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	6922      	ldr	r2, [r4, #16]
 8005bd6:	f003 0306 	and.w	r3, r3, #6
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	bf02      	ittt	eq
 8005bde:	68e5      	ldreq	r5, [r4, #12]
 8005be0:	6833      	ldreq	r3, [r6, #0]
 8005be2:	1aed      	subeq	r5, r5, r3
 8005be4:	68a3      	ldr	r3, [r4, #8]
 8005be6:	bf0c      	ite	eq
 8005be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bec:	2500      	movne	r5, #0
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	bfc4      	itt	gt
 8005bf2:	1a9b      	subgt	r3, r3, r2
 8005bf4:	18ed      	addgt	r5, r5, r3
 8005bf6:	2600      	movs	r6, #0
 8005bf8:	341a      	adds	r4, #26
 8005bfa:	42b5      	cmp	r5, r6
 8005bfc:	d11a      	bne.n	8005c34 <_printf_common+0xc8>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	e008      	b.n	8005c14 <_printf_common+0xa8>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4652      	mov	r2, sl
 8005c06:	4641      	mov	r1, r8
 8005c08:	4638      	mov	r0, r7
 8005c0a:	47c8      	blx	r9
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d103      	bne.n	8005c18 <_printf_common+0xac>
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c18:	3501      	adds	r5, #1
 8005c1a:	e7c6      	b.n	8005baa <_printf_common+0x3e>
 8005c1c:	18e1      	adds	r1, r4, r3
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	2030      	movs	r0, #48	@ 0x30
 8005c22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c26:	4422      	add	r2, r4
 8005c28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c30:	3302      	adds	r3, #2
 8005c32:	e7c7      	b.n	8005bc4 <_printf_common+0x58>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4622      	mov	r2, r4
 8005c38:	4641      	mov	r1, r8
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	47c8      	blx	r9
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d0e6      	beq.n	8005c10 <_printf_common+0xa4>
 8005c42:	3601      	adds	r6, #1
 8005c44:	e7d9      	b.n	8005bfa <_printf_common+0x8e>
	...

08005c48 <_printf_i>:
 8005c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4c:	7e0f      	ldrb	r7, [r1, #24]
 8005c4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c50:	2f78      	cmp	r7, #120	@ 0x78
 8005c52:	4691      	mov	r9, r2
 8005c54:	4680      	mov	r8, r0
 8005c56:	460c      	mov	r4, r1
 8005c58:	469a      	mov	sl, r3
 8005c5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c5e:	d807      	bhi.n	8005c70 <_printf_i+0x28>
 8005c60:	2f62      	cmp	r7, #98	@ 0x62
 8005c62:	d80a      	bhi.n	8005c7a <_printf_i+0x32>
 8005c64:	2f00      	cmp	r7, #0
 8005c66:	f000 80d2 	beq.w	8005e0e <_printf_i+0x1c6>
 8005c6a:	2f58      	cmp	r7, #88	@ 0x58
 8005c6c:	f000 80b9 	beq.w	8005de2 <_printf_i+0x19a>
 8005c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c78:	e03a      	b.n	8005cf0 <_printf_i+0xa8>
 8005c7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c7e:	2b15      	cmp	r3, #21
 8005c80:	d8f6      	bhi.n	8005c70 <_printf_i+0x28>
 8005c82:	a101      	add	r1, pc, #4	@ (adr r1, 8005c88 <_printf_i+0x40>)
 8005c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c88:	08005ce1 	.word	0x08005ce1
 8005c8c:	08005cf5 	.word	0x08005cf5
 8005c90:	08005c71 	.word	0x08005c71
 8005c94:	08005c71 	.word	0x08005c71
 8005c98:	08005c71 	.word	0x08005c71
 8005c9c:	08005c71 	.word	0x08005c71
 8005ca0:	08005cf5 	.word	0x08005cf5
 8005ca4:	08005c71 	.word	0x08005c71
 8005ca8:	08005c71 	.word	0x08005c71
 8005cac:	08005c71 	.word	0x08005c71
 8005cb0:	08005c71 	.word	0x08005c71
 8005cb4:	08005df5 	.word	0x08005df5
 8005cb8:	08005d1f 	.word	0x08005d1f
 8005cbc:	08005daf 	.word	0x08005daf
 8005cc0:	08005c71 	.word	0x08005c71
 8005cc4:	08005c71 	.word	0x08005c71
 8005cc8:	08005e17 	.word	0x08005e17
 8005ccc:	08005c71 	.word	0x08005c71
 8005cd0:	08005d1f 	.word	0x08005d1f
 8005cd4:	08005c71 	.word	0x08005c71
 8005cd8:	08005c71 	.word	0x08005c71
 8005cdc:	08005db7 	.word	0x08005db7
 8005ce0:	6833      	ldr	r3, [r6, #0]
 8005ce2:	1d1a      	adds	r2, r3, #4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6032      	str	r2, [r6, #0]
 8005ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e09d      	b.n	8005e30 <_printf_i+0x1e8>
 8005cf4:	6833      	ldr	r3, [r6, #0]
 8005cf6:	6820      	ldr	r0, [r4, #0]
 8005cf8:	1d19      	adds	r1, r3, #4
 8005cfa:	6031      	str	r1, [r6, #0]
 8005cfc:	0606      	lsls	r6, r0, #24
 8005cfe:	d501      	bpl.n	8005d04 <_printf_i+0xbc>
 8005d00:	681d      	ldr	r5, [r3, #0]
 8005d02:	e003      	b.n	8005d0c <_printf_i+0xc4>
 8005d04:	0645      	lsls	r5, r0, #25
 8005d06:	d5fb      	bpl.n	8005d00 <_printf_i+0xb8>
 8005d08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d0c:	2d00      	cmp	r5, #0
 8005d0e:	da03      	bge.n	8005d18 <_printf_i+0xd0>
 8005d10:	232d      	movs	r3, #45	@ 0x2d
 8005d12:	426d      	negs	r5, r5
 8005d14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d18:	4859      	ldr	r0, [pc, #356]	@ (8005e80 <_printf_i+0x238>)
 8005d1a:	230a      	movs	r3, #10
 8005d1c:	e011      	b.n	8005d42 <_printf_i+0xfa>
 8005d1e:	6821      	ldr	r1, [r4, #0]
 8005d20:	6833      	ldr	r3, [r6, #0]
 8005d22:	0608      	lsls	r0, r1, #24
 8005d24:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d28:	d402      	bmi.n	8005d30 <_printf_i+0xe8>
 8005d2a:	0649      	lsls	r1, r1, #25
 8005d2c:	bf48      	it	mi
 8005d2e:	b2ad      	uxthmi	r5, r5
 8005d30:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d32:	4853      	ldr	r0, [pc, #332]	@ (8005e80 <_printf_i+0x238>)
 8005d34:	6033      	str	r3, [r6, #0]
 8005d36:	bf14      	ite	ne
 8005d38:	230a      	movne	r3, #10
 8005d3a:	2308      	moveq	r3, #8
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d42:	6866      	ldr	r6, [r4, #4]
 8005d44:	60a6      	str	r6, [r4, #8]
 8005d46:	2e00      	cmp	r6, #0
 8005d48:	bfa2      	ittt	ge
 8005d4a:	6821      	ldrge	r1, [r4, #0]
 8005d4c:	f021 0104 	bicge.w	r1, r1, #4
 8005d50:	6021      	strge	r1, [r4, #0]
 8005d52:	b90d      	cbnz	r5, 8005d58 <_printf_i+0x110>
 8005d54:	2e00      	cmp	r6, #0
 8005d56:	d04b      	beq.n	8005df0 <_printf_i+0x1a8>
 8005d58:	4616      	mov	r6, r2
 8005d5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d5e:	fb03 5711 	mls	r7, r3, r1, r5
 8005d62:	5dc7      	ldrb	r7, [r0, r7]
 8005d64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d68:	462f      	mov	r7, r5
 8005d6a:	42bb      	cmp	r3, r7
 8005d6c:	460d      	mov	r5, r1
 8005d6e:	d9f4      	bls.n	8005d5a <_printf_i+0x112>
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d10b      	bne.n	8005d8c <_printf_i+0x144>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	07df      	lsls	r7, r3, #31
 8005d78:	d508      	bpl.n	8005d8c <_printf_i+0x144>
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	6861      	ldr	r1, [r4, #4]
 8005d7e:	4299      	cmp	r1, r3
 8005d80:	bfde      	ittt	le
 8005d82:	2330      	movle	r3, #48	@ 0x30
 8005d84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d8c:	1b92      	subs	r2, r2, r6
 8005d8e:	6122      	str	r2, [r4, #16]
 8005d90:	f8cd a000 	str.w	sl, [sp]
 8005d94:	464b      	mov	r3, r9
 8005d96:	aa03      	add	r2, sp, #12
 8005d98:	4621      	mov	r1, r4
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	f7ff fee6 	bl	8005b6c <_printf_common>
 8005da0:	3001      	adds	r0, #1
 8005da2:	d14a      	bne.n	8005e3a <_printf_i+0x1f2>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	b004      	add	sp, #16
 8005daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	f043 0320 	orr.w	r3, r3, #32
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	4833      	ldr	r0, [pc, #204]	@ (8005e84 <_printf_i+0x23c>)
 8005db8:	2778      	movs	r7, #120	@ 0x78
 8005dba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	6831      	ldr	r1, [r6, #0]
 8005dc2:	061f      	lsls	r7, r3, #24
 8005dc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005dc8:	d402      	bmi.n	8005dd0 <_printf_i+0x188>
 8005dca:	065f      	lsls	r7, r3, #25
 8005dcc:	bf48      	it	mi
 8005dce:	b2ad      	uxthmi	r5, r5
 8005dd0:	6031      	str	r1, [r6, #0]
 8005dd2:	07d9      	lsls	r1, r3, #31
 8005dd4:	bf44      	itt	mi
 8005dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8005dda:	6023      	strmi	r3, [r4, #0]
 8005ddc:	b11d      	cbz	r5, 8005de6 <_printf_i+0x19e>
 8005dde:	2310      	movs	r3, #16
 8005de0:	e7ac      	b.n	8005d3c <_printf_i+0xf4>
 8005de2:	4827      	ldr	r0, [pc, #156]	@ (8005e80 <_printf_i+0x238>)
 8005de4:	e7e9      	b.n	8005dba <_printf_i+0x172>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	f023 0320 	bic.w	r3, r3, #32
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	e7f6      	b.n	8005dde <_printf_i+0x196>
 8005df0:	4616      	mov	r6, r2
 8005df2:	e7bd      	b.n	8005d70 <_printf_i+0x128>
 8005df4:	6833      	ldr	r3, [r6, #0]
 8005df6:	6825      	ldr	r5, [r4, #0]
 8005df8:	6961      	ldr	r1, [r4, #20]
 8005dfa:	1d18      	adds	r0, r3, #4
 8005dfc:	6030      	str	r0, [r6, #0]
 8005dfe:	062e      	lsls	r6, r5, #24
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	d501      	bpl.n	8005e08 <_printf_i+0x1c0>
 8005e04:	6019      	str	r1, [r3, #0]
 8005e06:	e002      	b.n	8005e0e <_printf_i+0x1c6>
 8005e08:	0668      	lsls	r0, r5, #25
 8005e0a:	d5fb      	bpl.n	8005e04 <_printf_i+0x1bc>
 8005e0c:	8019      	strh	r1, [r3, #0]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6123      	str	r3, [r4, #16]
 8005e12:	4616      	mov	r6, r2
 8005e14:	e7bc      	b.n	8005d90 <_printf_i+0x148>
 8005e16:	6833      	ldr	r3, [r6, #0]
 8005e18:	1d1a      	adds	r2, r3, #4
 8005e1a:	6032      	str	r2, [r6, #0]
 8005e1c:	681e      	ldr	r6, [r3, #0]
 8005e1e:	6862      	ldr	r2, [r4, #4]
 8005e20:	2100      	movs	r1, #0
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7fa fa5c 	bl	80002e0 <memchr>
 8005e28:	b108      	cbz	r0, 8005e2e <_printf_i+0x1e6>
 8005e2a:	1b80      	subs	r0, r0, r6
 8005e2c:	6060      	str	r0, [r4, #4]
 8005e2e:	6863      	ldr	r3, [r4, #4]
 8005e30:	6123      	str	r3, [r4, #16]
 8005e32:	2300      	movs	r3, #0
 8005e34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e38:	e7aa      	b.n	8005d90 <_printf_i+0x148>
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	4632      	mov	r2, r6
 8005e3e:	4649      	mov	r1, r9
 8005e40:	4640      	mov	r0, r8
 8005e42:	47d0      	blx	sl
 8005e44:	3001      	adds	r0, #1
 8005e46:	d0ad      	beq.n	8005da4 <_printf_i+0x15c>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	079b      	lsls	r3, r3, #30
 8005e4c:	d413      	bmi.n	8005e76 <_printf_i+0x22e>
 8005e4e:	68e0      	ldr	r0, [r4, #12]
 8005e50:	9b03      	ldr	r3, [sp, #12]
 8005e52:	4298      	cmp	r0, r3
 8005e54:	bfb8      	it	lt
 8005e56:	4618      	movlt	r0, r3
 8005e58:	e7a6      	b.n	8005da8 <_printf_i+0x160>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4632      	mov	r2, r6
 8005e5e:	4649      	mov	r1, r9
 8005e60:	4640      	mov	r0, r8
 8005e62:	47d0      	blx	sl
 8005e64:	3001      	adds	r0, #1
 8005e66:	d09d      	beq.n	8005da4 <_printf_i+0x15c>
 8005e68:	3501      	adds	r5, #1
 8005e6a:	68e3      	ldr	r3, [r4, #12]
 8005e6c:	9903      	ldr	r1, [sp, #12]
 8005e6e:	1a5b      	subs	r3, r3, r1
 8005e70:	42ab      	cmp	r3, r5
 8005e72:	dcf2      	bgt.n	8005e5a <_printf_i+0x212>
 8005e74:	e7eb      	b.n	8005e4e <_printf_i+0x206>
 8005e76:	2500      	movs	r5, #0
 8005e78:	f104 0619 	add.w	r6, r4, #25
 8005e7c:	e7f5      	b.n	8005e6a <_printf_i+0x222>
 8005e7e:	bf00      	nop
 8005e80:	08008066 	.word	0x08008066
 8005e84:	08008077 	.word	0x08008077

08005e88 <std>:
 8005e88:	2300      	movs	r3, #0
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e96:	6083      	str	r3, [r0, #8]
 8005e98:	8181      	strh	r1, [r0, #12]
 8005e9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e9c:	81c2      	strh	r2, [r0, #14]
 8005e9e:	6183      	str	r3, [r0, #24]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	305c      	adds	r0, #92	@ 0x5c
 8005ea6:	f000 f9f9 	bl	800629c <memset>
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee0 <std+0x58>)
 8005eac:	6263      	str	r3, [r4, #36]	@ 0x24
 8005eae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <std+0x5c>)
 8005eb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee8 <std+0x60>)
 8005eb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <std+0x64>)
 8005eb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005eba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef0 <std+0x68>)
 8005ebc:	6224      	str	r4, [r4, #32]
 8005ebe:	429c      	cmp	r4, r3
 8005ec0:	d006      	beq.n	8005ed0 <std+0x48>
 8005ec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ec6:	4294      	cmp	r4, r2
 8005ec8:	d002      	beq.n	8005ed0 <std+0x48>
 8005eca:	33d0      	adds	r3, #208	@ 0xd0
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	d105      	bne.n	8005edc <std+0x54>
 8005ed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed8:	f000 ba5c 	b.w	8006394 <__retarget_lock_init_recursive>
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	bf00      	nop
 8005ee0:	080060ed 	.word	0x080060ed
 8005ee4:	0800610f 	.word	0x0800610f
 8005ee8:	08006147 	.word	0x08006147
 8005eec:	0800616b 	.word	0x0800616b
 8005ef0:	240002c8 	.word	0x240002c8

08005ef4 <stdio_exit_handler>:
 8005ef4:	4a02      	ldr	r2, [pc, #8]	@ (8005f00 <stdio_exit_handler+0xc>)
 8005ef6:	4903      	ldr	r1, [pc, #12]	@ (8005f04 <stdio_exit_handler+0x10>)
 8005ef8:	4803      	ldr	r0, [pc, #12]	@ (8005f08 <stdio_exit_handler+0x14>)
 8005efa:	f000 b869 	b.w	8005fd0 <_fwalk_sglue>
 8005efe:	bf00      	nop
 8005f00:	24000018 	.word	0x24000018
 8005f04:	08007bed 	.word	0x08007bed
 8005f08:	24000028 	.word	0x24000028

08005f0c <cleanup_stdio>:
 8005f0c:	6841      	ldr	r1, [r0, #4]
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <cleanup_stdio+0x34>)
 8005f10:	4299      	cmp	r1, r3
 8005f12:	b510      	push	{r4, lr}
 8005f14:	4604      	mov	r4, r0
 8005f16:	d001      	beq.n	8005f1c <cleanup_stdio+0x10>
 8005f18:	f001 fe68 	bl	8007bec <_fflush_r>
 8005f1c:	68a1      	ldr	r1, [r4, #8]
 8005f1e:	4b09      	ldr	r3, [pc, #36]	@ (8005f44 <cleanup_stdio+0x38>)
 8005f20:	4299      	cmp	r1, r3
 8005f22:	d002      	beq.n	8005f2a <cleanup_stdio+0x1e>
 8005f24:	4620      	mov	r0, r4
 8005f26:	f001 fe61 	bl	8007bec <_fflush_r>
 8005f2a:	68e1      	ldr	r1, [r4, #12]
 8005f2c:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <cleanup_stdio+0x3c>)
 8005f2e:	4299      	cmp	r1, r3
 8005f30:	d004      	beq.n	8005f3c <cleanup_stdio+0x30>
 8005f32:	4620      	mov	r0, r4
 8005f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f38:	f001 be58 	b.w	8007bec <_fflush_r>
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	bf00      	nop
 8005f40:	240002c8 	.word	0x240002c8
 8005f44:	24000330 	.word	0x24000330
 8005f48:	24000398 	.word	0x24000398

08005f4c <global_stdio_init.part.0>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <global_stdio_init.part.0+0x30>)
 8005f50:	4c0b      	ldr	r4, [pc, #44]	@ (8005f80 <global_stdio_init.part.0+0x34>)
 8005f52:	4a0c      	ldr	r2, [pc, #48]	@ (8005f84 <global_stdio_init.part.0+0x38>)
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	4620      	mov	r0, r4
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2104      	movs	r1, #4
 8005f5c:	f7ff ff94 	bl	8005e88 <std>
 8005f60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f64:	2201      	movs	r2, #1
 8005f66:	2109      	movs	r1, #9
 8005f68:	f7ff ff8e 	bl	8005e88 <std>
 8005f6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f70:	2202      	movs	r2, #2
 8005f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f76:	2112      	movs	r1, #18
 8005f78:	f7ff bf86 	b.w	8005e88 <std>
 8005f7c:	24000400 	.word	0x24000400
 8005f80:	240002c8 	.word	0x240002c8
 8005f84:	08005ef5 	.word	0x08005ef5

08005f88 <__sfp_lock_acquire>:
 8005f88:	4801      	ldr	r0, [pc, #4]	@ (8005f90 <__sfp_lock_acquire+0x8>)
 8005f8a:	f000 ba04 	b.w	8006396 <__retarget_lock_acquire_recursive>
 8005f8e:	bf00      	nop
 8005f90:	24000409 	.word	0x24000409

08005f94 <__sfp_lock_release>:
 8005f94:	4801      	ldr	r0, [pc, #4]	@ (8005f9c <__sfp_lock_release+0x8>)
 8005f96:	f000 b9ff 	b.w	8006398 <__retarget_lock_release_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	24000409 	.word	0x24000409

08005fa0 <__sinit>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	f7ff fff0 	bl	8005f88 <__sfp_lock_acquire>
 8005fa8:	6a23      	ldr	r3, [r4, #32]
 8005faa:	b11b      	cbz	r3, 8005fb4 <__sinit+0x14>
 8005fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb0:	f7ff bff0 	b.w	8005f94 <__sfp_lock_release>
 8005fb4:	4b04      	ldr	r3, [pc, #16]	@ (8005fc8 <__sinit+0x28>)
 8005fb6:	6223      	str	r3, [r4, #32]
 8005fb8:	4b04      	ldr	r3, [pc, #16]	@ (8005fcc <__sinit+0x2c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f5      	bne.n	8005fac <__sinit+0xc>
 8005fc0:	f7ff ffc4 	bl	8005f4c <global_stdio_init.part.0>
 8005fc4:	e7f2      	b.n	8005fac <__sinit+0xc>
 8005fc6:	bf00      	nop
 8005fc8:	08005f0d 	.word	0x08005f0d
 8005fcc:	24000400 	.word	0x24000400

08005fd0 <_fwalk_sglue>:
 8005fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	4688      	mov	r8, r1
 8005fd8:	4614      	mov	r4, r2
 8005fda:	2600      	movs	r6, #0
 8005fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8005fe4:	d505      	bpl.n	8005ff2 <_fwalk_sglue+0x22>
 8005fe6:	6824      	ldr	r4, [r4, #0]
 8005fe8:	2c00      	cmp	r4, #0
 8005fea:	d1f7      	bne.n	8005fdc <_fwalk_sglue+0xc>
 8005fec:	4630      	mov	r0, r6
 8005fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d907      	bls.n	8006008 <_fwalk_sglue+0x38>
 8005ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	d003      	beq.n	8006008 <_fwalk_sglue+0x38>
 8006000:	4629      	mov	r1, r5
 8006002:	4638      	mov	r0, r7
 8006004:	47c0      	blx	r8
 8006006:	4306      	orrs	r6, r0
 8006008:	3568      	adds	r5, #104	@ 0x68
 800600a:	e7e9      	b.n	8005fe0 <_fwalk_sglue+0x10>

0800600c <iprintf>:
 800600c:	b40f      	push	{r0, r1, r2, r3}
 800600e:	b507      	push	{r0, r1, r2, lr}
 8006010:	4906      	ldr	r1, [pc, #24]	@ (800602c <iprintf+0x20>)
 8006012:	ab04      	add	r3, sp, #16
 8006014:	6808      	ldr	r0, [r1, #0]
 8006016:	f853 2b04 	ldr.w	r2, [r3], #4
 800601a:	6881      	ldr	r1, [r0, #8]
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	f001 fc49 	bl	80078b4 <_vfiprintf_r>
 8006022:	b003      	add	sp, #12
 8006024:	f85d eb04 	ldr.w	lr, [sp], #4
 8006028:	b004      	add	sp, #16
 800602a:	4770      	bx	lr
 800602c:	24000024 	.word	0x24000024

08006030 <_puts_r>:
 8006030:	6a03      	ldr	r3, [r0, #32]
 8006032:	b570      	push	{r4, r5, r6, lr}
 8006034:	6884      	ldr	r4, [r0, #8]
 8006036:	4605      	mov	r5, r0
 8006038:	460e      	mov	r6, r1
 800603a:	b90b      	cbnz	r3, 8006040 <_puts_r+0x10>
 800603c:	f7ff ffb0 	bl	8005fa0 <__sinit>
 8006040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006042:	07db      	lsls	r3, r3, #31
 8006044:	d405      	bmi.n	8006052 <_puts_r+0x22>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	0598      	lsls	r0, r3, #22
 800604a:	d402      	bmi.n	8006052 <_puts_r+0x22>
 800604c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800604e:	f000 f9a2 	bl	8006396 <__retarget_lock_acquire_recursive>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	0719      	lsls	r1, r3, #28
 8006056:	d502      	bpl.n	800605e <_puts_r+0x2e>
 8006058:	6923      	ldr	r3, [r4, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d135      	bne.n	80060ca <_puts_r+0x9a>
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f000 f8c5 	bl	80061f0 <__swsetup_r>
 8006066:	b380      	cbz	r0, 80060ca <_puts_r+0x9a>
 8006068:	f04f 35ff 	mov.w	r5, #4294967295
 800606c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800606e:	07da      	lsls	r2, r3, #31
 8006070:	d405      	bmi.n	800607e <_puts_r+0x4e>
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	059b      	lsls	r3, r3, #22
 8006076:	d402      	bmi.n	800607e <_puts_r+0x4e>
 8006078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800607a:	f000 f98d 	bl	8006398 <__retarget_lock_release_recursive>
 800607e:	4628      	mov	r0, r5
 8006080:	bd70      	pop	{r4, r5, r6, pc}
 8006082:	2b00      	cmp	r3, #0
 8006084:	da04      	bge.n	8006090 <_puts_r+0x60>
 8006086:	69a2      	ldr	r2, [r4, #24]
 8006088:	429a      	cmp	r2, r3
 800608a:	dc17      	bgt.n	80060bc <_puts_r+0x8c>
 800608c:	290a      	cmp	r1, #10
 800608e:	d015      	beq.n	80060bc <_puts_r+0x8c>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	6022      	str	r2, [r4, #0]
 8006096:	7019      	strb	r1, [r3, #0]
 8006098:	68a3      	ldr	r3, [r4, #8]
 800609a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800609e:	3b01      	subs	r3, #1
 80060a0:	60a3      	str	r3, [r4, #8]
 80060a2:	2900      	cmp	r1, #0
 80060a4:	d1ed      	bne.n	8006082 <_puts_r+0x52>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da11      	bge.n	80060ce <_puts_r+0x9e>
 80060aa:	4622      	mov	r2, r4
 80060ac:	210a      	movs	r1, #10
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 f85f 	bl	8006172 <__swbuf_r>
 80060b4:	3001      	adds	r0, #1
 80060b6:	d0d7      	beq.n	8006068 <_puts_r+0x38>
 80060b8:	250a      	movs	r5, #10
 80060ba:	e7d7      	b.n	800606c <_puts_r+0x3c>
 80060bc:	4622      	mov	r2, r4
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 f857 	bl	8006172 <__swbuf_r>
 80060c4:	3001      	adds	r0, #1
 80060c6:	d1e7      	bne.n	8006098 <_puts_r+0x68>
 80060c8:	e7ce      	b.n	8006068 <_puts_r+0x38>
 80060ca:	3e01      	subs	r6, #1
 80060cc:	e7e4      	b.n	8006098 <_puts_r+0x68>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	6022      	str	r2, [r4, #0]
 80060d4:	220a      	movs	r2, #10
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e7ee      	b.n	80060b8 <_puts_r+0x88>
	...

080060dc <puts>:
 80060dc:	4b02      	ldr	r3, [pc, #8]	@ (80060e8 <puts+0xc>)
 80060de:	4601      	mov	r1, r0
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	f7ff bfa5 	b.w	8006030 <_puts_r>
 80060e6:	bf00      	nop
 80060e8:	24000024 	.word	0x24000024

080060ec <__sread>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	460c      	mov	r4, r1
 80060f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f4:	f000 f900 	bl	80062f8 <_read_r>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	bfab      	itete	ge
 80060fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006100:	181b      	addge	r3, r3, r0
 8006102:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006106:	bfac      	ite	ge
 8006108:	6563      	strge	r3, [r4, #84]	@ 0x54
 800610a:	81a3      	strhlt	r3, [r4, #12]
 800610c:	bd10      	pop	{r4, pc}

0800610e <__swrite>:
 800610e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006112:	461f      	mov	r7, r3
 8006114:	898b      	ldrh	r3, [r1, #12]
 8006116:	05db      	lsls	r3, r3, #23
 8006118:	4605      	mov	r5, r0
 800611a:	460c      	mov	r4, r1
 800611c:	4616      	mov	r6, r2
 800611e:	d505      	bpl.n	800612c <__swrite+0x1e>
 8006120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006124:	2302      	movs	r3, #2
 8006126:	2200      	movs	r2, #0
 8006128:	f000 f8d4 	bl	80062d4 <_lseek_r>
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006132:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006136:	81a3      	strh	r3, [r4, #12]
 8006138:	4632      	mov	r2, r6
 800613a:	463b      	mov	r3, r7
 800613c:	4628      	mov	r0, r5
 800613e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006142:	f000 b8eb 	b.w	800631c <_write_r>

08006146 <__sseek>:
 8006146:	b510      	push	{r4, lr}
 8006148:	460c      	mov	r4, r1
 800614a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614e:	f000 f8c1 	bl	80062d4 <_lseek_r>
 8006152:	1c43      	adds	r3, r0, #1
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	bf15      	itete	ne
 8006158:	6560      	strne	r0, [r4, #84]	@ 0x54
 800615a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800615e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006162:	81a3      	strheq	r3, [r4, #12]
 8006164:	bf18      	it	ne
 8006166:	81a3      	strhne	r3, [r4, #12]
 8006168:	bd10      	pop	{r4, pc}

0800616a <__sclose>:
 800616a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616e:	f000 b8a1 	b.w	80062b4 <_close_r>

08006172 <__swbuf_r>:
 8006172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006174:	460e      	mov	r6, r1
 8006176:	4614      	mov	r4, r2
 8006178:	4605      	mov	r5, r0
 800617a:	b118      	cbz	r0, 8006184 <__swbuf_r+0x12>
 800617c:	6a03      	ldr	r3, [r0, #32]
 800617e:	b90b      	cbnz	r3, 8006184 <__swbuf_r+0x12>
 8006180:	f7ff ff0e 	bl	8005fa0 <__sinit>
 8006184:	69a3      	ldr	r3, [r4, #24]
 8006186:	60a3      	str	r3, [r4, #8]
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	071a      	lsls	r2, r3, #28
 800618c:	d501      	bpl.n	8006192 <__swbuf_r+0x20>
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	b943      	cbnz	r3, 80061a4 <__swbuf_r+0x32>
 8006192:	4621      	mov	r1, r4
 8006194:	4628      	mov	r0, r5
 8006196:	f000 f82b 	bl	80061f0 <__swsetup_r>
 800619a:	b118      	cbz	r0, 80061a4 <__swbuf_r+0x32>
 800619c:	f04f 37ff 	mov.w	r7, #4294967295
 80061a0:	4638      	mov	r0, r7
 80061a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	6922      	ldr	r2, [r4, #16]
 80061a8:	1a98      	subs	r0, r3, r2
 80061aa:	6963      	ldr	r3, [r4, #20]
 80061ac:	b2f6      	uxtb	r6, r6
 80061ae:	4283      	cmp	r3, r0
 80061b0:	4637      	mov	r7, r6
 80061b2:	dc05      	bgt.n	80061c0 <__swbuf_r+0x4e>
 80061b4:	4621      	mov	r1, r4
 80061b6:	4628      	mov	r0, r5
 80061b8:	f001 fd18 	bl	8007bec <_fflush_r>
 80061bc:	2800      	cmp	r0, #0
 80061be:	d1ed      	bne.n	800619c <__swbuf_r+0x2a>
 80061c0:	68a3      	ldr	r3, [r4, #8]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	60a3      	str	r3, [r4, #8]
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	6022      	str	r2, [r4, #0]
 80061cc:	701e      	strb	r6, [r3, #0]
 80061ce:	6962      	ldr	r2, [r4, #20]
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d004      	beq.n	80061e0 <__swbuf_r+0x6e>
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	07db      	lsls	r3, r3, #31
 80061da:	d5e1      	bpl.n	80061a0 <__swbuf_r+0x2e>
 80061dc:	2e0a      	cmp	r6, #10
 80061de:	d1df      	bne.n	80061a0 <__swbuf_r+0x2e>
 80061e0:	4621      	mov	r1, r4
 80061e2:	4628      	mov	r0, r5
 80061e4:	f001 fd02 	bl	8007bec <_fflush_r>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d0d9      	beq.n	80061a0 <__swbuf_r+0x2e>
 80061ec:	e7d6      	b.n	800619c <__swbuf_r+0x2a>
	...

080061f0 <__swsetup_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4b29      	ldr	r3, [pc, #164]	@ (8006298 <__swsetup_r+0xa8>)
 80061f4:	4605      	mov	r5, r0
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	460c      	mov	r4, r1
 80061fa:	b118      	cbz	r0, 8006204 <__swsetup_r+0x14>
 80061fc:	6a03      	ldr	r3, [r0, #32]
 80061fe:	b90b      	cbnz	r3, 8006204 <__swsetup_r+0x14>
 8006200:	f7ff fece 	bl	8005fa0 <__sinit>
 8006204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006208:	0719      	lsls	r1, r3, #28
 800620a:	d422      	bmi.n	8006252 <__swsetup_r+0x62>
 800620c:	06da      	lsls	r2, r3, #27
 800620e:	d407      	bmi.n	8006220 <__swsetup_r+0x30>
 8006210:	2209      	movs	r2, #9
 8006212:	602a      	str	r2, [r5, #0]
 8006214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	f04f 30ff 	mov.w	r0, #4294967295
 800621e:	e033      	b.n	8006288 <__swsetup_r+0x98>
 8006220:	0758      	lsls	r0, r3, #29
 8006222:	d512      	bpl.n	800624a <__swsetup_r+0x5a>
 8006224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006226:	b141      	cbz	r1, 800623a <__swsetup_r+0x4a>
 8006228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800622c:	4299      	cmp	r1, r3
 800622e:	d002      	beq.n	8006236 <__swsetup_r+0x46>
 8006230:	4628      	mov	r0, r5
 8006232:	f000 fe93 	bl	8006f5c <_free_r>
 8006236:	2300      	movs	r3, #0
 8006238:	6363      	str	r3, [r4, #52]	@ 0x34
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006240:	81a3      	strh	r3, [r4, #12]
 8006242:	2300      	movs	r3, #0
 8006244:	6063      	str	r3, [r4, #4]
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	f043 0308 	orr.w	r3, r3, #8
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	6923      	ldr	r3, [r4, #16]
 8006254:	b94b      	cbnz	r3, 800626a <__swsetup_r+0x7a>
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800625c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006260:	d003      	beq.n	800626a <__swsetup_r+0x7a>
 8006262:	4621      	mov	r1, r4
 8006264:	4628      	mov	r0, r5
 8006266:	f001 fd0f 	bl	8007c88 <__smakebuf_r>
 800626a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626e:	f013 0201 	ands.w	r2, r3, #1
 8006272:	d00a      	beq.n	800628a <__swsetup_r+0x9a>
 8006274:	2200      	movs	r2, #0
 8006276:	60a2      	str	r2, [r4, #8]
 8006278:	6962      	ldr	r2, [r4, #20]
 800627a:	4252      	negs	r2, r2
 800627c:	61a2      	str	r2, [r4, #24]
 800627e:	6922      	ldr	r2, [r4, #16]
 8006280:	b942      	cbnz	r2, 8006294 <__swsetup_r+0xa4>
 8006282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006286:	d1c5      	bne.n	8006214 <__swsetup_r+0x24>
 8006288:	bd38      	pop	{r3, r4, r5, pc}
 800628a:	0799      	lsls	r1, r3, #30
 800628c:	bf58      	it	pl
 800628e:	6962      	ldrpl	r2, [r4, #20]
 8006290:	60a2      	str	r2, [r4, #8]
 8006292:	e7f4      	b.n	800627e <__swsetup_r+0x8e>
 8006294:	2000      	movs	r0, #0
 8006296:	e7f7      	b.n	8006288 <__swsetup_r+0x98>
 8006298:	24000024 	.word	0x24000024

0800629c <memset>:
 800629c:	4402      	add	r2, r0
 800629e:	4603      	mov	r3, r0
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d100      	bne.n	80062a6 <memset+0xa>
 80062a4:	4770      	bx	lr
 80062a6:	f803 1b01 	strb.w	r1, [r3], #1
 80062aa:	e7f9      	b.n	80062a0 <memset+0x4>

080062ac <_localeconv_r>:
 80062ac:	4800      	ldr	r0, [pc, #0]	@ (80062b0 <_localeconv_r+0x4>)
 80062ae:	4770      	bx	lr
 80062b0:	24000164 	.word	0x24000164

080062b4 <_close_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d06      	ldr	r5, [pc, #24]	@ (80062d0 <_close_r+0x1c>)
 80062b8:	2300      	movs	r3, #0
 80062ba:	4604      	mov	r4, r0
 80062bc:	4608      	mov	r0, r1
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	f7fb f813 	bl	80012ea <_close>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_close_r+0x1a>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_close_r+0x1a>
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	24000404 	.word	0x24000404

080062d4 <_lseek_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4d07      	ldr	r5, [pc, #28]	@ (80062f4 <_lseek_r+0x20>)
 80062d8:	4604      	mov	r4, r0
 80062da:	4608      	mov	r0, r1
 80062dc:	4611      	mov	r1, r2
 80062de:	2200      	movs	r2, #0
 80062e0:	602a      	str	r2, [r5, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f7fb f828 	bl	8001338 <_lseek>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d102      	bne.n	80062f2 <_lseek_r+0x1e>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	b103      	cbz	r3, 80062f2 <_lseek_r+0x1e>
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
 80062f4:	24000404 	.word	0x24000404

080062f8 <_read_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4d07      	ldr	r5, [pc, #28]	@ (8006318 <_read_r+0x20>)
 80062fc:	4604      	mov	r4, r0
 80062fe:	4608      	mov	r0, r1
 8006300:	4611      	mov	r1, r2
 8006302:	2200      	movs	r2, #0
 8006304:	602a      	str	r2, [r5, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	f7fa ffd2 	bl	80012b0 <_read>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_read_r+0x1e>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_read_r+0x1e>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	24000404 	.word	0x24000404

0800631c <_write_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d07      	ldr	r5, [pc, #28]	@ (800633c <_write_r+0x20>)
 8006320:	4604      	mov	r4, r0
 8006322:	4608      	mov	r0, r1
 8006324:	4611      	mov	r1, r2
 8006326:	2200      	movs	r2, #0
 8006328:	602a      	str	r2, [r5, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	f7fa fe7c 	bl	8001028 <_write>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_write_r+0x1e>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_write_r+0x1e>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	24000404 	.word	0x24000404

08006340 <__errno>:
 8006340:	4b01      	ldr	r3, [pc, #4]	@ (8006348 <__errno+0x8>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	24000024 	.word	0x24000024

0800634c <__libc_init_array>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4d0d      	ldr	r5, [pc, #52]	@ (8006384 <__libc_init_array+0x38>)
 8006350:	4c0d      	ldr	r4, [pc, #52]	@ (8006388 <__libc_init_array+0x3c>)
 8006352:	1b64      	subs	r4, r4, r5
 8006354:	10a4      	asrs	r4, r4, #2
 8006356:	2600      	movs	r6, #0
 8006358:	42a6      	cmp	r6, r4
 800635a:	d109      	bne.n	8006370 <__libc_init_array+0x24>
 800635c:	4d0b      	ldr	r5, [pc, #44]	@ (800638c <__libc_init_array+0x40>)
 800635e:	4c0c      	ldr	r4, [pc, #48]	@ (8006390 <__libc_init_array+0x44>)
 8006360:	f001 fdbe 	bl	8007ee0 <_init>
 8006364:	1b64      	subs	r4, r4, r5
 8006366:	10a4      	asrs	r4, r4, #2
 8006368:	2600      	movs	r6, #0
 800636a:	42a6      	cmp	r6, r4
 800636c:	d105      	bne.n	800637a <__libc_init_array+0x2e>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	f855 3b04 	ldr.w	r3, [r5], #4
 8006374:	4798      	blx	r3
 8006376:	3601      	adds	r6, #1
 8006378:	e7ee      	b.n	8006358 <__libc_init_array+0xc>
 800637a:	f855 3b04 	ldr.w	r3, [r5], #4
 800637e:	4798      	blx	r3
 8006380:	3601      	adds	r6, #1
 8006382:	e7f2      	b.n	800636a <__libc_init_array+0x1e>
 8006384:	080083d0 	.word	0x080083d0
 8006388:	080083d0 	.word	0x080083d0
 800638c:	080083d0 	.word	0x080083d0
 8006390:	080083d4 	.word	0x080083d4

08006394 <__retarget_lock_init_recursive>:
 8006394:	4770      	bx	lr

08006396 <__retarget_lock_acquire_recursive>:
 8006396:	4770      	bx	lr

08006398 <__retarget_lock_release_recursive>:
 8006398:	4770      	bx	lr

0800639a <quorem>:
 800639a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639e:	6903      	ldr	r3, [r0, #16]
 80063a0:	690c      	ldr	r4, [r1, #16]
 80063a2:	42a3      	cmp	r3, r4
 80063a4:	4607      	mov	r7, r0
 80063a6:	db7e      	blt.n	80064a6 <quorem+0x10c>
 80063a8:	3c01      	subs	r4, #1
 80063aa:	f101 0814 	add.w	r8, r1, #20
 80063ae:	00a3      	lsls	r3, r4, #2
 80063b0:	f100 0514 	add.w	r5, r0, #20
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063c4:	3301      	adds	r3, #1
 80063c6:	429a      	cmp	r2, r3
 80063c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80063d0:	d32e      	bcc.n	8006430 <quorem+0x96>
 80063d2:	f04f 0a00 	mov.w	sl, #0
 80063d6:	46c4      	mov	ip, r8
 80063d8:	46ae      	mov	lr, r5
 80063da:	46d3      	mov	fp, sl
 80063dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063e0:	b298      	uxth	r0, r3
 80063e2:	fb06 a000 	mla	r0, r6, r0, sl
 80063e6:	0c02      	lsrs	r2, r0, #16
 80063e8:	0c1b      	lsrs	r3, r3, #16
 80063ea:	fb06 2303 	mla	r3, r6, r3, r2
 80063ee:	f8de 2000 	ldr.w	r2, [lr]
 80063f2:	b280      	uxth	r0, r0
 80063f4:	b292      	uxth	r2, r2
 80063f6:	1a12      	subs	r2, r2, r0
 80063f8:	445a      	add	r2, fp
 80063fa:	f8de 0000 	ldr.w	r0, [lr]
 80063fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006402:	b29b      	uxth	r3, r3
 8006404:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006408:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800640c:	b292      	uxth	r2, r2
 800640e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006412:	45e1      	cmp	r9, ip
 8006414:	f84e 2b04 	str.w	r2, [lr], #4
 8006418:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800641c:	d2de      	bcs.n	80063dc <quorem+0x42>
 800641e:	9b00      	ldr	r3, [sp, #0]
 8006420:	58eb      	ldr	r3, [r5, r3]
 8006422:	b92b      	cbnz	r3, 8006430 <quorem+0x96>
 8006424:	9b01      	ldr	r3, [sp, #4]
 8006426:	3b04      	subs	r3, #4
 8006428:	429d      	cmp	r5, r3
 800642a:	461a      	mov	r2, r3
 800642c:	d32f      	bcc.n	800648e <quorem+0xf4>
 800642e:	613c      	str	r4, [r7, #16]
 8006430:	4638      	mov	r0, r7
 8006432:	f001 f90d 	bl	8007650 <__mcmp>
 8006436:	2800      	cmp	r0, #0
 8006438:	db25      	blt.n	8006486 <quorem+0xec>
 800643a:	4629      	mov	r1, r5
 800643c:	2000      	movs	r0, #0
 800643e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006442:	f8d1 c000 	ldr.w	ip, [r1]
 8006446:	fa1f fe82 	uxth.w	lr, r2
 800644a:	fa1f f38c 	uxth.w	r3, ip
 800644e:	eba3 030e 	sub.w	r3, r3, lr
 8006452:	4403      	add	r3, r0
 8006454:	0c12      	lsrs	r2, r2, #16
 8006456:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800645a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800645e:	b29b      	uxth	r3, r3
 8006460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006464:	45c1      	cmp	r9, r8
 8006466:	f841 3b04 	str.w	r3, [r1], #4
 800646a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800646e:	d2e6      	bcs.n	800643e <quorem+0xa4>
 8006470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006474:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006478:	b922      	cbnz	r2, 8006484 <quorem+0xea>
 800647a:	3b04      	subs	r3, #4
 800647c:	429d      	cmp	r5, r3
 800647e:	461a      	mov	r2, r3
 8006480:	d30b      	bcc.n	800649a <quorem+0x100>
 8006482:	613c      	str	r4, [r7, #16]
 8006484:	3601      	adds	r6, #1
 8006486:	4630      	mov	r0, r6
 8006488:	b003      	add	sp, #12
 800648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	3b04      	subs	r3, #4
 8006492:	2a00      	cmp	r2, #0
 8006494:	d1cb      	bne.n	800642e <quorem+0x94>
 8006496:	3c01      	subs	r4, #1
 8006498:	e7c6      	b.n	8006428 <quorem+0x8e>
 800649a:	6812      	ldr	r2, [r2, #0]
 800649c:	3b04      	subs	r3, #4
 800649e:	2a00      	cmp	r2, #0
 80064a0:	d1ef      	bne.n	8006482 <quorem+0xe8>
 80064a2:	3c01      	subs	r4, #1
 80064a4:	e7ea      	b.n	800647c <quorem+0xe2>
 80064a6:	2000      	movs	r0, #0
 80064a8:	e7ee      	b.n	8006488 <quorem+0xee>
 80064aa:	0000      	movs	r0, r0
 80064ac:	0000      	movs	r0, r0
	...

080064b0 <_dtoa_r>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	ed2d 8b02 	vpush	{d8}
 80064b8:	69c7      	ldr	r7, [r0, #28]
 80064ba:	b091      	sub	sp, #68	@ 0x44
 80064bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80064c0:	ec55 4b10 	vmov	r4, r5, d0
 80064c4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80064c6:	9107      	str	r1, [sp, #28]
 80064c8:	4681      	mov	r9, r0
 80064ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80064cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80064ce:	b97f      	cbnz	r7, 80064f0 <_dtoa_r+0x40>
 80064d0:	2010      	movs	r0, #16
 80064d2:	f000 fd8d 	bl	8006ff0 <malloc>
 80064d6:	4602      	mov	r2, r0
 80064d8:	f8c9 001c 	str.w	r0, [r9, #28]
 80064dc:	b920      	cbnz	r0, 80064e8 <_dtoa_r+0x38>
 80064de:	4ba0      	ldr	r3, [pc, #640]	@ (8006760 <_dtoa_r+0x2b0>)
 80064e0:	21ef      	movs	r1, #239	@ 0xef
 80064e2:	48a0      	ldr	r0, [pc, #640]	@ (8006764 <_dtoa_r+0x2b4>)
 80064e4:	f001 fc4c 	bl	8007d80 <__assert_func>
 80064e8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064ec:	6007      	str	r7, [r0, #0]
 80064ee:	60c7      	str	r7, [r0, #12]
 80064f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064f4:	6819      	ldr	r1, [r3, #0]
 80064f6:	b159      	cbz	r1, 8006510 <_dtoa_r+0x60>
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	604a      	str	r2, [r1, #4]
 80064fc:	2301      	movs	r3, #1
 80064fe:	4093      	lsls	r3, r2
 8006500:	608b      	str	r3, [r1, #8]
 8006502:	4648      	mov	r0, r9
 8006504:	f000 fe6a 	bl	80071dc <_Bfree>
 8006508:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	1e2b      	subs	r3, r5, #0
 8006512:	bfbb      	ittet	lt
 8006514:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006518:	9303      	strlt	r3, [sp, #12]
 800651a:	2300      	movge	r3, #0
 800651c:	2201      	movlt	r2, #1
 800651e:	bfac      	ite	ge
 8006520:	6033      	strge	r3, [r6, #0]
 8006522:	6032      	strlt	r2, [r6, #0]
 8006524:	4b90      	ldr	r3, [pc, #576]	@ (8006768 <_dtoa_r+0x2b8>)
 8006526:	9e03      	ldr	r6, [sp, #12]
 8006528:	43b3      	bics	r3, r6
 800652a:	d110      	bne.n	800654e <_dtoa_r+0x9e>
 800652c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800652e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8006538:	4323      	orrs	r3, r4
 800653a:	f000 84de 	beq.w	8006efa <_dtoa_r+0xa4a>
 800653e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006540:	4f8a      	ldr	r7, [pc, #552]	@ (800676c <_dtoa_r+0x2bc>)
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 84e0 	beq.w	8006f08 <_dtoa_r+0xa58>
 8006548:	1cfb      	adds	r3, r7, #3
 800654a:	f000 bcdb 	b.w	8006f04 <_dtoa_r+0xa54>
 800654e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006552:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800655a:	d10a      	bne.n	8006572 <_dtoa_r+0xc2>
 800655c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800655e:	2301      	movs	r3, #1
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006564:	b113      	cbz	r3, 800656c <_dtoa_r+0xbc>
 8006566:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006568:	4b81      	ldr	r3, [pc, #516]	@ (8006770 <_dtoa_r+0x2c0>)
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	4f81      	ldr	r7, [pc, #516]	@ (8006774 <_dtoa_r+0x2c4>)
 800656e:	f000 bccb 	b.w	8006f08 <_dtoa_r+0xa58>
 8006572:	aa0e      	add	r2, sp, #56	@ 0x38
 8006574:	a90f      	add	r1, sp, #60	@ 0x3c
 8006576:	4648      	mov	r0, r9
 8006578:	eeb0 0b48 	vmov.f64	d0, d8
 800657c:	f001 f918 	bl	80077b0 <__d2b>
 8006580:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8006584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006586:	9001      	str	r0, [sp, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d045      	beq.n	8006618 <_dtoa_r+0x168>
 800658c:	eeb0 7b48 	vmov.f64	d7, d8
 8006590:	ee18 1a90 	vmov	r1, s17
 8006594:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006598:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800659c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80065a0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80065a4:	2500      	movs	r5, #0
 80065a6:	ee07 1a90 	vmov	s15, r1
 80065aa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80065ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006748 <_dtoa_r+0x298>
 80065b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80065b6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8006750 <_dtoa_r+0x2a0>
 80065ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80065be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006758 <_dtoa_r+0x2a8>
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80065ca:	eeb0 7b46 	vmov.f64	d7, d6
 80065ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80065d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80065d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80065da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065de:	ee16 8a90 	vmov	r8, s13
 80065e2:	d508      	bpl.n	80065f6 <_dtoa_r+0x146>
 80065e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80065e8:	eeb4 6b47 	vcmp.f64	d6, d7
 80065ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f0:	bf18      	it	ne
 80065f2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80065f6:	f1b8 0f16 	cmp.w	r8, #22
 80065fa:	d82b      	bhi.n	8006654 <_dtoa_r+0x1a4>
 80065fc:	495e      	ldr	r1, [pc, #376]	@ (8006778 <_dtoa_r+0x2c8>)
 80065fe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8006602:	ed91 7b00 	vldr	d7, [r1]
 8006606:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800660a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660e:	d501      	bpl.n	8006614 <_dtoa_r+0x164>
 8006610:	f108 38ff 	add.w	r8, r8, #4294967295
 8006614:	2100      	movs	r1, #0
 8006616:	e01e      	b.n	8006656 <_dtoa_r+0x1a6>
 8006618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800661a:	4413      	add	r3, r2
 800661c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8006620:	2920      	cmp	r1, #32
 8006622:	bfc1      	itttt	gt
 8006624:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8006628:	408e      	lslgt	r6, r1
 800662a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800662e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8006632:	bfd6      	itet	le
 8006634:	f1c1 0120 	rsble	r1, r1, #32
 8006638:	4331      	orrgt	r1, r6
 800663a:	fa04 f101 	lslle.w	r1, r4, r1
 800663e:	ee07 1a90 	vmov	s15, r1
 8006642:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006646:	3b01      	subs	r3, #1
 8006648:	ee17 1a90 	vmov	r1, s15
 800664c:	2501      	movs	r5, #1
 800664e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8006652:	e7a8      	b.n	80065a6 <_dtoa_r+0xf6>
 8006654:	2101      	movs	r1, #1
 8006656:	1ad2      	subs	r2, r2, r3
 8006658:	1e53      	subs	r3, r2, #1
 800665a:	9306      	str	r3, [sp, #24]
 800665c:	bf45      	ittet	mi
 800665e:	f1c2 0301 	rsbmi	r3, r2, #1
 8006662:	9305      	strmi	r3, [sp, #20]
 8006664:	2300      	movpl	r3, #0
 8006666:	2300      	movmi	r3, #0
 8006668:	bf4c      	ite	mi
 800666a:	9306      	strmi	r3, [sp, #24]
 800666c:	9305      	strpl	r3, [sp, #20]
 800666e:	f1b8 0f00 	cmp.w	r8, #0
 8006672:	910c      	str	r1, [sp, #48]	@ 0x30
 8006674:	db18      	blt.n	80066a8 <_dtoa_r+0x1f8>
 8006676:	9b06      	ldr	r3, [sp, #24]
 8006678:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800667c:	4443      	add	r3, r8
 800667e:	9306      	str	r3, [sp, #24]
 8006680:	2300      	movs	r3, #0
 8006682:	9a07      	ldr	r2, [sp, #28]
 8006684:	2a09      	cmp	r2, #9
 8006686:	d849      	bhi.n	800671c <_dtoa_r+0x26c>
 8006688:	2a05      	cmp	r2, #5
 800668a:	bfc4      	itt	gt
 800668c:	3a04      	subgt	r2, #4
 800668e:	9207      	strgt	r2, [sp, #28]
 8006690:	9a07      	ldr	r2, [sp, #28]
 8006692:	f1a2 0202 	sub.w	r2, r2, #2
 8006696:	bfcc      	ite	gt
 8006698:	2400      	movgt	r4, #0
 800669a:	2401      	movle	r4, #1
 800669c:	2a03      	cmp	r2, #3
 800669e:	d848      	bhi.n	8006732 <_dtoa_r+0x282>
 80066a0:	e8df f002 	tbb	[pc, r2]
 80066a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80066a8:	9b05      	ldr	r3, [sp, #20]
 80066aa:	2200      	movs	r2, #0
 80066ac:	eba3 0308 	sub.w	r3, r3, r8
 80066b0:	9305      	str	r3, [sp, #20]
 80066b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80066b4:	f1c8 0300 	rsb	r3, r8, #0
 80066b8:	e7e3      	b.n	8006682 <_dtoa_r+0x1d2>
 80066ba:	2200      	movs	r2, #0
 80066bc:	9208      	str	r2, [sp, #32]
 80066be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	dc39      	bgt.n	8006738 <_dtoa_r+0x288>
 80066c4:	f04f 0b01 	mov.w	fp, #1
 80066c8:	46da      	mov	sl, fp
 80066ca:	465a      	mov	r2, fp
 80066cc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80066d0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80066d4:	2100      	movs	r1, #0
 80066d6:	2004      	movs	r0, #4
 80066d8:	f100 0614 	add.w	r6, r0, #20
 80066dc:	4296      	cmp	r6, r2
 80066de:	d930      	bls.n	8006742 <_dtoa_r+0x292>
 80066e0:	6079      	str	r1, [r7, #4]
 80066e2:	4648      	mov	r0, r9
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	f000 fd39 	bl	800715c <_Balloc>
 80066ea:	9b04      	ldr	r3, [sp, #16]
 80066ec:	4607      	mov	r7, r0
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d146      	bne.n	8006780 <_dtoa_r+0x2d0>
 80066f2:	4b22      	ldr	r3, [pc, #136]	@ (800677c <_dtoa_r+0x2cc>)
 80066f4:	4602      	mov	r2, r0
 80066f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80066fa:	e6f2      	b.n	80064e2 <_dtoa_r+0x32>
 80066fc:	2201      	movs	r2, #1
 80066fe:	e7dd      	b.n	80066bc <_dtoa_r+0x20c>
 8006700:	2200      	movs	r2, #0
 8006702:	9208      	str	r2, [sp, #32]
 8006704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006706:	eb08 0b02 	add.w	fp, r8, r2
 800670a:	f10b 0a01 	add.w	sl, fp, #1
 800670e:	4652      	mov	r2, sl
 8006710:	2a01      	cmp	r2, #1
 8006712:	bfb8      	it	lt
 8006714:	2201      	movlt	r2, #1
 8006716:	e7db      	b.n	80066d0 <_dtoa_r+0x220>
 8006718:	2201      	movs	r2, #1
 800671a:	e7f2      	b.n	8006702 <_dtoa_r+0x252>
 800671c:	2401      	movs	r4, #1
 800671e:	2200      	movs	r2, #0
 8006720:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8006724:	f04f 3bff 	mov.w	fp, #4294967295
 8006728:	2100      	movs	r1, #0
 800672a:	46da      	mov	sl, fp
 800672c:	2212      	movs	r2, #18
 800672e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006730:	e7ce      	b.n	80066d0 <_dtoa_r+0x220>
 8006732:	2201      	movs	r2, #1
 8006734:	9208      	str	r2, [sp, #32]
 8006736:	e7f5      	b.n	8006724 <_dtoa_r+0x274>
 8006738:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800673c:	46da      	mov	sl, fp
 800673e:	465a      	mov	r2, fp
 8006740:	e7c6      	b.n	80066d0 <_dtoa_r+0x220>
 8006742:	3101      	adds	r1, #1
 8006744:	0040      	lsls	r0, r0, #1
 8006746:	e7c7      	b.n	80066d8 <_dtoa_r+0x228>
 8006748:	636f4361 	.word	0x636f4361
 800674c:	3fd287a7 	.word	0x3fd287a7
 8006750:	8b60c8b3 	.word	0x8b60c8b3
 8006754:	3fc68a28 	.word	0x3fc68a28
 8006758:	509f79fb 	.word	0x509f79fb
 800675c:	3fd34413 	.word	0x3fd34413
 8006760:	08008095 	.word	0x08008095
 8006764:	080080ac 	.word	0x080080ac
 8006768:	7ff00000 	.word	0x7ff00000
 800676c:	08008091 	.word	0x08008091
 8006770:	08008065 	.word	0x08008065
 8006774:	08008064 	.word	0x08008064
 8006778:	080081a8 	.word	0x080081a8
 800677c:	08008104 	.word	0x08008104
 8006780:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8006784:	f1ba 0f0e 	cmp.w	sl, #14
 8006788:	6010      	str	r0, [r2, #0]
 800678a:	d86f      	bhi.n	800686c <_dtoa_r+0x3bc>
 800678c:	2c00      	cmp	r4, #0
 800678e:	d06d      	beq.n	800686c <_dtoa_r+0x3bc>
 8006790:	f1b8 0f00 	cmp.w	r8, #0
 8006794:	f340 80c2 	ble.w	800691c <_dtoa_r+0x46c>
 8006798:	4aca      	ldr	r2, [pc, #808]	@ (8006ac4 <_dtoa_r+0x614>)
 800679a:	f008 010f 	and.w	r1, r8, #15
 800679e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80067a2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80067a6:	ed92 7b00 	vldr	d7, [r2]
 80067aa:	ea4f 1128 	mov.w	r1, r8, asr #4
 80067ae:	f000 80a9 	beq.w	8006904 <_dtoa_r+0x454>
 80067b2:	4ac5      	ldr	r2, [pc, #788]	@ (8006ac8 <_dtoa_r+0x618>)
 80067b4:	ed92 6b08 	vldr	d6, [r2, #32]
 80067b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80067bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80067c0:	f001 010f 	and.w	r1, r1, #15
 80067c4:	2203      	movs	r2, #3
 80067c6:	48c0      	ldr	r0, [pc, #768]	@ (8006ac8 <_dtoa_r+0x618>)
 80067c8:	2900      	cmp	r1, #0
 80067ca:	f040 809d 	bne.w	8006908 <_dtoa_r+0x458>
 80067ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80067d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80067d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80067da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80067dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067e0:	2900      	cmp	r1, #0
 80067e2:	f000 80c1 	beq.w	8006968 <_dtoa_r+0x4b8>
 80067e6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80067ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80067ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f2:	f140 80b9 	bpl.w	8006968 <_dtoa_r+0x4b8>
 80067f6:	f1ba 0f00 	cmp.w	sl, #0
 80067fa:	f000 80b5 	beq.w	8006968 <_dtoa_r+0x4b8>
 80067fe:	f1bb 0f00 	cmp.w	fp, #0
 8006802:	dd31      	ble.n	8006868 <_dtoa_r+0x3b8>
 8006804:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006808:	ee27 7b06 	vmul.f64	d7, d7, d6
 800680c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006810:	f108 31ff 	add.w	r1, r8, #4294967295
 8006814:	9104      	str	r1, [sp, #16]
 8006816:	3201      	adds	r2, #1
 8006818:	465c      	mov	r4, fp
 800681a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800681e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8006822:	ee07 2a90 	vmov	s15, r2
 8006826:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800682a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800682e:	ee15 2a90 	vmov	r2, s11
 8006832:	ec51 0b15 	vmov	r0, r1, d5
 8006836:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800683a:	2c00      	cmp	r4, #0
 800683c:	f040 8098 	bne.w	8006970 <_dtoa_r+0x4c0>
 8006840:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8006844:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006848:	ec41 0b17 	vmov	d7, r0, r1
 800684c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006854:	f300 8261 	bgt.w	8006d1a <_dtoa_r+0x86a>
 8006858:	eeb1 7b47 	vneg.f64	d7, d7
 800685c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006864:	f100 80f5 	bmi.w	8006a52 <_dtoa_r+0x5a2>
 8006868:	ed8d 8b02 	vstr	d8, [sp, #8]
 800686c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800686e:	2a00      	cmp	r2, #0
 8006870:	f2c0 812c 	blt.w	8006acc <_dtoa_r+0x61c>
 8006874:	f1b8 0f0e 	cmp.w	r8, #14
 8006878:	f300 8128 	bgt.w	8006acc <_dtoa_r+0x61c>
 800687c:	4b91      	ldr	r3, [pc, #580]	@ (8006ac4 <_dtoa_r+0x614>)
 800687e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006882:	ed93 6b00 	vldr	d6, [r3]
 8006886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006888:	2b00      	cmp	r3, #0
 800688a:	da03      	bge.n	8006894 <_dtoa_r+0x3e4>
 800688c:	f1ba 0f00 	cmp.w	sl, #0
 8006890:	f340 80d2 	ble.w	8006a38 <_dtoa_r+0x588>
 8006894:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8006898:	ed9d 7b02 	vldr	d7, [sp, #8]
 800689c:	463e      	mov	r6, r7
 800689e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80068a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80068a6:	ee15 3a10 	vmov	r3, s10
 80068aa:	3330      	adds	r3, #48	@ 0x30
 80068ac:	f806 3b01 	strb.w	r3, [r6], #1
 80068b0:	1bf3      	subs	r3, r6, r7
 80068b2:	459a      	cmp	sl, r3
 80068b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80068b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80068bc:	f040 80f8 	bne.w	8006ab0 <_dtoa_r+0x600>
 80068c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80068c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80068c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068cc:	f300 80dd 	bgt.w	8006a8a <_dtoa_r+0x5da>
 80068d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80068d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d8:	d104      	bne.n	80068e4 <_dtoa_r+0x434>
 80068da:	ee15 3a10 	vmov	r3, s10
 80068de:	07db      	lsls	r3, r3, #31
 80068e0:	f100 80d3 	bmi.w	8006a8a <_dtoa_r+0x5da>
 80068e4:	9901      	ldr	r1, [sp, #4]
 80068e6:	4648      	mov	r0, r9
 80068e8:	f000 fc78 	bl	80071dc <_Bfree>
 80068ec:	2300      	movs	r3, #0
 80068ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068f0:	7033      	strb	r3, [r6, #0]
 80068f2:	f108 0301 	add.w	r3, r8, #1
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 8304 	beq.w	8006f08 <_dtoa_r+0xa58>
 8006900:	601e      	str	r6, [r3, #0]
 8006902:	e301      	b.n	8006f08 <_dtoa_r+0xa58>
 8006904:	2202      	movs	r2, #2
 8006906:	e75e      	b.n	80067c6 <_dtoa_r+0x316>
 8006908:	07cc      	lsls	r4, r1, #31
 800690a:	d504      	bpl.n	8006916 <_dtoa_r+0x466>
 800690c:	ed90 6b00 	vldr	d6, [r0]
 8006910:	3201      	adds	r2, #1
 8006912:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006916:	1049      	asrs	r1, r1, #1
 8006918:	3008      	adds	r0, #8
 800691a:	e755      	b.n	80067c8 <_dtoa_r+0x318>
 800691c:	d022      	beq.n	8006964 <_dtoa_r+0x4b4>
 800691e:	f1c8 0100 	rsb	r1, r8, #0
 8006922:	4a68      	ldr	r2, [pc, #416]	@ (8006ac4 <_dtoa_r+0x614>)
 8006924:	f001 000f 	and.w	r0, r1, #15
 8006928:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800692c:	ed92 7b00 	vldr	d7, [r2]
 8006930:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006934:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006938:	4863      	ldr	r0, [pc, #396]	@ (8006ac8 <_dtoa_r+0x618>)
 800693a:	1109      	asrs	r1, r1, #4
 800693c:	2400      	movs	r4, #0
 800693e:	2202      	movs	r2, #2
 8006940:	b929      	cbnz	r1, 800694e <_dtoa_r+0x49e>
 8006942:	2c00      	cmp	r4, #0
 8006944:	f43f af49 	beq.w	80067da <_dtoa_r+0x32a>
 8006948:	ed8d 7b02 	vstr	d7, [sp, #8]
 800694c:	e745      	b.n	80067da <_dtoa_r+0x32a>
 800694e:	07ce      	lsls	r6, r1, #31
 8006950:	d505      	bpl.n	800695e <_dtoa_r+0x4ae>
 8006952:	ed90 6b00 	vldr	d6, [r0]
 8006956:	3201      	adds	r2, #1
 8006958:	2401      	movs	r4, #1
 800695a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800695e:	1049      	asrs	r1, r1, #1
 8006960:	3008      	adds	r0, #8
 8006962:	e7ed      	b.n	8006940 <_dtoa_r+0x490>
 8006964:	2202      	movs	r2, #2
 8006966:	e738      	b.n	80067da <_dtoa_r+0x32a>
 8006968:	f8cd 8010 	str.w	r8, [sp, #16]
 800696c:	4654      	mov	r4, sl
 800696e:	e754      	b.n	800681a <_dtoa_r+0x36a>
 8006970:	4a54      	ldr	r2, [pc, #336]	@ (8006ac4 <_dtoa_r+0x614>)
 8006972:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006976:	ed12 4b02 	vldr	d4, [r2, #-8]
 800697a:	9a08      	ldr	r2, [sp, #32]
 800697c:	ec41 0b17 	vmov	d7, r0, r1
 8006980:	443c      	add	r4, r7
 8006982:	b34a      	cbz	r2, 80069d8 <_dtoa_r+0x528>
 8006984:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8006988:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800698c:	463e      	mov	r6, r7
 800698e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006992:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006996:	ee35 7b47 	vsub.f64	d7, d5, d7
 800699a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800699e:	ee14 2a90 	vmov	r2, s9
 80069a2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80069a6:	3230      	adds	r2, #48	@ 0x30
 80069a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80069ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80069b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b4:	f806 2b01 	strb.w	r2, [r6], #1
 80069b8:	d438      	bmi.n	8006a2c <_dtoa_r+0x57c>
 80069ba:	ee32 5b46 	vsub.f64	d5, d2, d6
 80069be:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80069c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c6:	d462      	bmi.n	8006a8e <_dtoa_r+0x5de>
 80069c8:	42a6      	cmp	r6, r4
 80069ca:	f43f af4d 	beq.w	8006868 <_dtoa_r+0x3b8>
 80069ce:	ee27 7b03 	vmul.f64	d7, d7, d3
 80069d2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80069d6:	e7e0      	b.n	800699a <_dtoa_r+0x4ea>
 80069d8:	4621      	mov	r1, r4
 80069da:	463e      	mov	r6, r7
 80069dc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80069e0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80069e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80069e8:	ee14 2a90 	vmov	r2, s9
 80069ec:	3230      	adds	r2, #48	@ 0x30
 80069ee:	f806 2b01 	strb.w	r2, [r6], #1
 80069f2:	42a6      	cmp	r6, r4
 80069f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80069f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80069fc:	d119      	bne.n	8006a32 <_dtoa_r+0x582>
 80069fe:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8006a02:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006a06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a0e:	dc3e      	bgt.n	8006a8e <_dtoa_r+0x5de>
 8006a10:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006a14:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a1c:	f57f af24 	bpl.w	8006868 <_dtoa_r+0x3b8>
 8006a20:	460e      	mov	r6, r1
 8006a22:	3901      	subs	r1, #1
 8006a24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a28:	2b30      	cmp	r3, #48	@ 0x30
 8006a2a:	d0f9      	beq.n	8006a20 <_dtoa_r+0x570>
 8006a2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006a30:	e758      	b.n	80068e4 <_dtoa_r+0x434>
 8006a32:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006a36:	e7d5      	b.n	80069e4 <_dtoa_r+0x534>
 8006a38:	d10b      	bne.n	8006a52 <_dtoa_r+0x5a2>
 8006a3a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8006a3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006a42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a4e:	f2c0 8161 	blt.w	8006d14 <_dtoa_r+0x864>
 8006a52:	2400      	movs	r4, #0
 8006a54:	4625      	mov	r5, r4
 8006a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	9304      	str	r3, [sp, #16]
 8006a5c:	463e      	mov	r6, r7
 8006a5e:	f04f 0800 	mov.w	r8, #0
 8006a62:	4621      	mov	r1, r4
 8006a64:	4648      	mov	r0, r9
 8006a66:	f000 fbb9 	bl	80071dc <_Bfree>
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	d0de      	beq.n	8006a2c <_dtoa_r+0x57c>
 8006a6e:	f1b8 0f00 	cmp.w	r8, #0
 8006a72:	d005      	beq.n	8006a80 <_dtoa_r+0x5d0>
 8006a74:	45a8      	cmp	r8, r5
 8006a76:	d003      	beq.n	8006a80 <_dtoa_r+0x5d0>
 8006a78:	4641      	mov	r1, r8
 8006a7a:	4648      	mov	r0, r9
 8006a7c:	f000 fbae 	bl	80071dc <_Bfree>
 8006a80:	4629      	mov	r1, r5
 8006a82:	4648      	mov	r0, r9
 8006a84:	f000 fbaa 	bl	80071dc <_Bfree>
 8006a88:	e7d0      	b.n	8006a2c <_dtoa_r+0x57c>
 8006a8a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006a8e:	4633      	mov	r3, r6
 8006a90:	461e      	mov	r6, r3
 8006a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a96:	2a39      	cmp	r2, #57	@ 0x39
 8006a98:	d106      	bne.n	8006aa8 <_dtoa_r+0x5f8>
 8006a9a:	429f      	cmp	r7, r3
 8006a9c:	d1f8      	bne.n	8006a90 <_dtoa_r+0x5e0>
 8006a9e:	9a04      	ldr	r2, [sp, #16]
 8006aa0:	3201      	adds	r2, #1
 8006aa2:	9204      	str	r2, [sp, #16]
 8006aa4:	2230      	movs	r2, #48	@ 0x30
 8006aa6:	703a      	strb	r2, [r7, #0]
 8006aa8:	781a      	ldrb	r2, [r3, #0]
 8006aaa:	3201      	adds	r2, #1
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	e7bd      	b.n	8006a2c <_dtoa_r+0x57c>
 8006ab0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006ab4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006abc:	f47f aeef 	bne.w	800689e <_dtoa_r+0x3ee>
 8006ac0:	e710      	b.n	80068e4 <_dtoa_r+0x434>
 8006ac2:	bf00      	nop
 8006ac4:	080081a8 	.word	0x080081a8
 8006ac8:	08008180 	.word	0x08008180
 8006acc:	9908      	ldr	r1, [sp, #32]
 8006ace:	2900      	cmp	r1, #0
 8006ad0:	f000 80e3 	beq.w	8006c9a <_dtoa_r+0x7ea>
 8006ad4:	9907      	ldr	r1, [sp, #28]
 8006ad6:	2901      	cmp	r1, #1
 8006ad8:	f300 80c8 	bgt.w	8006c6c <_dtoa_r+0x7bc>
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	f000 80c1 	beq.w	8006c64 <_dtoa_r+0x7b4>
 8006ae2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006ae6:	9e05      	ldr	r6, [sp, #20]
 8006ae8:	461c      	mov	r4, r3
 8006aea:	9304      	str	r3, [sp, #16]
 8006aec:	9b05      	ldr	r3, [sp, #20]
 8006aee:	4413      	add	r3, r2
 8006af0:	9305      	str	r3, [sp, #20]
 8006af2:	9b06      	ldr	r3, [sp, #24]
 8006af4:	2101      	movs	r1, #1
 8006af6:	4413      	add	r3, r2
 8006af8:	4648      	mov	r0, r9
 8006afa:	9306      	str	r3, [sp, #24]
 8006afc:	f000 fc22 	bl	8007344 <__i2b>
 8006b00:	9b04      	ldr	r3, [sp, #16]
 8006b02:	4605      	mov	r5, r0
 8006b04:	b166      	cbz	r6, 8006b20 <_dtoa_r+0x670>
 8006b06:	9a06      	ldr	r2, [sp, #24]
 8006b08:	2a00      	cmp	r2, #0
 8006b0a:	dd09      	ble.n	8006b20 <_dtoa_r+0x670>
 8006b0c:	42b2      	cmp	r2, r6
 8006b0e:	9905      	ldr	r1, [sp, #20]
 8006b10:	bfa8      	it	ge
 8006b12:	4632      	movge	r2, r6
 8006b14:	1a89      	subs	r1, r1, r2
 8006b16:	9105      	str	r1, [sp, #20]
 8006b18:	9906      	ldr	r1, [sp, #24]
 8006b1a:	1ab6      	subs	r6, r6, r2
 8006b1c:	1a8a      	subs	r2, r1, r2
 8006b1e:	9206      	str	r2, [sp, #24]
 8006b20:	b1fb      	cbz	r3, 8006b62 <_dtoa_r+0x6b2>
 8006b22:	9a08      	ldr	r2, [sp, #32]
 8006b24:	2a00      	cmp	r2, #0
 8006b26:	f000 80bc 	beq.w	8006ca2 <_dtoa_r+0x7f2>
 8006b2a:	b19c      	cbz	r4, 8006b54 <_dtoa_r+0x6a4>
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	4622      	mov	r2, r4
 8006b30:	4648      	mov	r0, r9
 8006b32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b34:	f000 fcc6 	bl	80074c4 <__pow5mult>
 8006b38:	9a01      	ldr	r2, [sp, #4]
 8006b3a:	4601      	mov	r1, r0
 8006b3c:	4605      	mov	r5, r0
 8006b3e:	4648      	mov	r0, r9
 8006b40:	f000 fc16 	bl	8007370 <__multiply>
 8006b44:	9901      	ldr	r1, [sp, #4]
 8006b46:	9004      	str	r0, [sp, #16]
 8006b48:	4648      	mov	r0, r9
 8006b4a:	f000 fb47 	bl	80071dc <_Bfree>
 8006b4e:	9a04      	ldr	r2, [sp, #16]
 8006b50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b52:	9201      	str	r2, [sp, #4]
 8006b54:	1b1a      	subs	r2, r3, r4
 8006b56:	d004      	beq.n	8006b62 <_dtoa_r+0x6b2>
 8006b58:	9901      	ldr	r1, [sp, #4]
 8006b5a:	4648      	mov	r0, r9
 8006b5c:	f000 fcb2 	bl	80074c4 <__pow5mult>
 8006b60:	9001      	str	r0, [sp, #4]
 8006b62:	2101      	movs	r1, #1
 8006b64:	4648      	mov	r0, r9
 8006b66:	f000 fbed 	bl	8007344 <__i2b>
 8006b6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 81d0 	beq.w	8006f14 <_dtoa_r+0xa64>
 8006b74:	461a      	mov	r2, r3
 8006b76:	4601      	mov	r1, r0
 8006b78:	4648      	mov	r0, r9
 8006b7a:	f000 fca3 	bl	80074c4 <__pow5mult>
 8006b7e:	9b07      	ldr	r3, [sp, #28]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	4604      	mov	r4, r0
 8006b84:	f300 8095 	bgt.w	8006cb2 <_dtoa_r+0x802>
 8006b88:	9b02      	ldr	r3, [sp, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f040 808b 	bne.w	8006ca6 <_dtoa_r+0x7f6>
 8006b90:	9b03      	ldr	r3, [sp, #12]
 8006b92:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006b96:	2a00      	cmp	r2, #0
 8006b98:	f040 8087 	bne.w	8006caa <_dtoa_r+0x7fa>
 8006b9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006ba0:	0d12      	lsrs	r2, r2, #20
 8006ba2:	0512      	lsls	r2, r2, #20
 8006ba4:	2a00      	cmp	r2, #0
 8006ba6:	f000 8082 	beq.w	8006cae <_dtoa_r+0x7fe>
 8006baa:	9b05      	ldr	r3, [sp, #20]
 8006bac:	3301      	adds	r3, #1
 8006bae:	9305      	str	r3, [sp, #20]
 8006bb0:	9b06      	ldr	r3, [sp, #24]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	9306      	str	r3, [sp, #24]
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 81af 	beq.w	8006f20 <_dtoa_r+0xa70>
 8006bc2:	6922      	ldr	r2, [r4, #16]
 8006bc4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006bc8:	6910      	ldr	r0, [r2, #16]
 8006bca:	f000 fb6f 	bl	80072ac <__hi0bits>
 8006bce:	f1c0 0020 	rsb	r0, r0, #32
 8006bd2:	9b06      	ldr	r3, [sp, #24]
 8006bd4:	4418      	add	r0, r3
 8006bd6:	f010 001f 	ands.w	r0, r0, #31
 8006bda:	d076      	beq.n	8006cca <_dtoa_r+0x81a>
 8006bdc:	f1c0 0220 	rsb	r2, r0, #32
 8006be0:	2a04      	cmp	r2, #4
 8006be2:	dd69      	ble.n	8006cb8 <_dtoa_r+0x808>
 8006be4:	9b05      	ldr	r3, [sp, #20]
 8006be6:	f1c0 001c 	rsb	r0, r0, #28
 8006bea:	4403      	add	r3, r0
 8006bec:	9305      	str	r3, [sp, #20]
 8006bee:	9b06      	ldr	r3, [sp, #24]
 8006bf0:	4406      	add	r6, r0
 8006bf2:	4403      	add	r3, r0
 8006bf4:	9306      	str	r3, [sp, #24]
 8006bf6:	9b05      	ldr	r3, [sp, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dd05      	ble.n	8006c08 <_dtoa_r+0x758>
 8006bfc:	9901      	ldr	r1, [sp, #4]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4648      	mov	r0, r9
 8006c02:	f000 fcb9 	bl	8007578 <__lshift>
 8006c06:	9001      	str	r0, [sp, #4]
 8006c08:	9b06      	ldr	r3, [sp, #24]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	dd05      	ble.n	8006c1a <_dtoa_r+0x76a>
 8006c0e:	4621      	mov	r1, r4
 8006c10:	461a      	mov	r2, r3
 8006c12:	4648      	mov	r0, r9
 8006c14:	f000 fcb0 	bl	8007578 <__lshift>
 8006c18:	4604      	mov	r4, r0
 8006c1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d056      	beq.n	8006cce <_dtoa_r+0x81e>
 8006c20:	9801      	ldr	r0, [sp, #4]
 8006c22:	4621      	mov	r1, r4
 8006c24:	f000 fd14 	bl	8007650 <__mcmp>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	da50      	bge.n	8006cce <_dtoa_r+0x81e>
 8006c2c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006c30:	9304      	str	r3, [sp, #16]
 8006c32:	9901      	ldr	r1, [sp, #4]
 8006c34:	2300      	movs	r3, #0
 8006c36:	220a      	movs	r2, #10
 8006c38:	4648      	mov	r0, r9
 8006c3a:	f000 faf1 	bl	8007220 <__multadd>
 8006c3e:	9b08      	ldr	r3, [sp, #32]
 8006c40:	9001      	str	r0, [sp, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 816e 	beq.w	8006f24 <_dtoa_r+0xa74>
 8006c48:	4629      	mov	r1, r5
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	220a      	movs	r2, #10
 8006c4e:	4648      	mov	r0, r9
 8006c50:	f000 fae6 	bl	8007220 <__multadd>
 8006c54:	f1bb 0f00 	cmp.w	fp, #0
 8006c58:	4605      	mov	r5, r0
 8006c5a:	dc64      	bgt.n	8006d26 <_dtoa_r+0x876>
 8006c5c:	9b07      	ldr	r3, [sp, #28]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	dc3e      	bgt.n	8006ce0 <_dtoa_r+0x830>
 8006c62:	e060      	b.n	8006d26 <_dtoa_r+0x876>
 8006c64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c66:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006c6a:	e73c      	b.n	8006ae6 <_dtoa_r+0x636>
 8006c6c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8006c70:	42a3      	cmp	r3, r4
 8006c72:	bfbf      	itttt	lt
 8006c74:	1ae2      	sublt	r2, r4, r3
 8006c76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006c78:	189b      	addlt	r3, r3, r2
 8006c7a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8006c7c:	bfae      	itee	ge
 8006c7e:	1b1c      	subge	r4, r3, r4
 8006c80:	4623      	movlt	r3, r4
 8006c82:	2400      	movlt	r4, #0
 8006c84:	f1ba 0f00 	cmp.w	sl, #0
 8006c88:	bfb5      	itete	lt
 8006c8a:	9a05      	ldrlt	r2, [sp, #20]
 8006c8c:	9e05      	ldrge	r6, [sp, #20]
 8006c8e:	eba2 060a 	sublt.w	r6, r2, sl
 8006c92:	4652      	movge	r2, sl
 8006c94:	bfb8      	it	lt
 8006c96:	2200      	movlt	r2, #0
 8006c98:	e727      	b.n	8006aea <_dtoa_r+0x63a>
 8006c9a:	9e05      	ldr	r6, [sp, #20]
 8006c9c:	9d08      	ldr	r5, [sp, #32]
 8006c9e:	461c      	mov	r4, r3
 8006ca0:	e730      	b.n	8006b04 <_dtoa_r+0x654>
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	e758      	b.n	8006b58 <_dtoa_r+0x6a8>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e786      	b.n	8006bb8 <_dtoa_r+0x708>
 8006caa:	9b02      	ldr	r3, [sp, #8]
 8006cac:	e784      	b.n	8006bb8 <_dtoa_r+0x708>
 8006cae:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006cb0:	e783      	b.n	8006bba <_dtoa_r+0x70a>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cb6:	e784      	b.n	8006bc2 <_dtoa_r+0x712>
 8006cb8:	d09d      	beq.n	8006bf6 <_dtoa_r+0x746>
 8006cba:	9b05      	ldr	r3, [sp, #20]
 8006cbc:	321c      	adds	r2, #28
 8006cbe:	4413      	add	r3, r2
 8006cc0:	9305      	str	r3, [sp, #20]
 8006cc2:	9b06      	ldr	r3, [sp, #24]
 8006cc4:	4416      	add	r6, r2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	e794      	b.n	8006bf4 <_dtoa_r+0x744>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	e7f5      	b.n	8006cba <_dtoa_r+0x80a>
 8006cce:	f1ba 0f00 	cmp.w	sl, #0
 8006cd2:	f8cd 8010 	str.w	r8, [sp, #16]
 8006cd6:	46d3      	mov	fp, sl
 8006cd8:	dc21      	bgt.n	8006d1e <_dtoa_r+0x86e>
 8006cda:	9b07      	ldr	r3, [sp, #28]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	dd1e      	ble.n	8006d1e <_dtoa_r+0x86e>
 8006ce0:	f1bb 0f00 	cmp.w	fp, #0
 8006ce4:	f47f aeb7 	bne.w	8006a56 <_dtoa_r+0x5a6>
 8006ce8:	4621      	mov	r1, r4
 8006cea:	465b      	mov	r3, fp
 8006cec:	2205      	movs	r2, #5
 8006cee:	4648      	mov	r0, r9
 8006cf0:	f000 fa96 	bl	8007220 <__multadd>
 8006cf4:	4601      	mov	r1, r0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	9801      	ldr	r0, [sp, #4]
 8006cfa:	f000 fca9 	bl	8007650 <__mcmp>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	f77f aea9 	ble.w	8006a56 <_dtoa_r+0x5a6>
 8006d04:	463e      	mov	r6, r7
 8006d06:	2331      	movs	r3, #49	@ 0x31
 8006d08:	f806 3b01 	strb.w	r3, [r6], #1
 8006d0c:	9b04      	ldr	r3, [sp, #16]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	9304      	str	r3, [sp, #16]
 8006d12:	e6a4      	b.n	8006a5e <_dtoa_r+0x5ae>
 8006d14:	f8cd 8010 	str.w	r8, [sp, #16]
 8006d18:	4654      	mov	r4, sl
 8006d1a:	4625      	mov	r5, r4
 8006d1c:	e7f2      	b.n	8006d04 <_dtoa_r+0x854>
 8006d1e:	9b08      	ldr	r3, [sp, #32]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 8103 	beq.w	8006f2c <_dtoa_r+0xa7c>
 8006d26:	2e00      	cmp	r6, #0
 8006d28:	dd05      	ble.n	8006d36 <_dtoa_r+0x886>
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	4632      	mov	r2, r6
 8006d2e:	4648      	mov	r0, r9
 8006d30:	f000 fc22 	bl	8007578 <__lshift>
 8006d34:	4605      	mov	r5, r0
 8006d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d058      	beq.n	8006dee <_dtoa_r+0x93e>
 8006d3c:	6869      	ldr	r1, [r5, #4]
 8006d3e:	4648      	mov	r0, r9
 8006d40:	f000 fa0c 	bl	800715c <_Balloc>
 8006d44:	4606      	mov	r6, r0
 8006d46:	b928      	cbnz	r0, 8006d54 <_dtoa_r+0x8a4>
 8006d48:	4b82      	ldr	r3, [pc, #520]	@ (8006f54 <_dtoa_r+0xaa4>)
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d50:	f7ff bbc7 	b.w	80064e2 <_dtoa_r+0x32>
 8006d54:	692a      	ldr	r2, [r5, #16]
 8006d56:	3202      	adds	r2, #2
 8006d58:	0092      	lsls	r2, r2, #2
 8006d5a:	f105 010c 	add.w	r1, r5, #12
 8006d5e:	300c      	adds	r0, #12
 8006d60:	f001 f800 	bl	8007d64 <memcpy>
 8006d64:	2201      	movs	r2, #1
 8006d66:	4631      	mov	r1, r6
 8006d68:	4648      	mov	r0, r9
 8006d6a:	f000 fc05 	bl	8007578 <__lshift>
 8006d6e:	1c7b      	adds	r3, r7, #1
 8006d70:	9305      	str	r3, [sp, #20]
 8006d72:	eb07 030b 	add.w	r3, r7, fp
 8006d76:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d78:	9b02      	ldr	r3, [sp, #8]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	46a8      	mov	r8, r5
 8006d80:	9308      	str	r3, [sp, #32]
 8006d82:	4605      	mov	r5, r0
 8006d84:	9b05      	ldr	r3, [sp, #20]
 8006d86:	9801      	ldr	r0, [sp, #4]
 8006d88:	4621      	mov	r1, r4
 8006d8a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006d8e:	f7ff fb04 	bl	800639a <quorem>
 8006d92:	4641      	mov	r1, r8
 8006d94:	9002      	str	r0, [sp, #8]
 8006d96:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006d9a:	9801      	ldr	r0, [sp, #4]
 8006d9c:	f000 fc58 	bl	8007650 <__mcmp>
 8006da0:	462a      	mov	r2, r5
 8006da2:	9006      	str	r0, [sp, #24]
 8006da4:	4621      	mov	r1, r4
 8006da6:	4648      	mov	r0, r9
 8006da8:	f000 fc6e 	bl	8007688 <__mdiff>
 8006dac:	68c2      	ldr	r2, [r0, #12]
 8006dae:	4606      	mov	r6, r0
 8006db0:	b9fa      	cbnz	r2, 8006df2 <_dtoa_r+0x942>
 8006db2:	4601      	mov	r1, r0
 8006db4:	9801      	ldr	r0, [sp, #4]
 8006db6:	f000 fc4b 	bl	8007650 <__mcmp>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4648      	mov	r0, r9
 8006dc0:	920a      	str	r2, [sp, #40]	@ 0x28
 8006dc2:	f000 fa0b 	bl	80071dc <_Bfree>
 8006dc6:	9b07      	ldr	r3, [sp, #28]
 8006dc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dca:	9e05      	ldr	r6, [sp, #20]
 8006dcc:	ea43 0102 	orr.w	r1, r3, r2
 8006dd0:	9b08      	ldr	r3, [sp, #32]
 8006dd2:	4319      	orrs	r1, r3
 8006dd4:	d10f      	bne.n	8006df6 <_dtoa_r+0x946>
 8006dd6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006dda:	d028      	beq.n	8006e2e <_dtoa_r+0x97e>
 8006ddc:	9b06      	ldr	r3, [sp, #24]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dd02      	ble.n	8006de8 <_dtoa_r+0x938>
 8006de2:	9b02      	ldr	r3, [sp, #8]
 8006de4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8006de8:	f88b a000 	strb.w	sl, [fp]
 8006dec:	e639      	b.n	8006a62 <_dtoa_r+0x5b2>
 8006dee:	4628      	mov	r0, r5
 8006df0:	e7bd      	b.n	8006d6e <_dtoa_r+0x8be>
 8006df2:	2201      	movs	r2, #1
 8006df4:	e7e2      	b.n	8006dbc <_dtoa_r+0x90c>
 8006df6:	9b06      	ldr	r3, [sp, #24]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	db04      	blt.n	8006e06 <_dtoa_r+0x956>
 8006dfc:	9907      	ldr	r1, [sp, #28]
 8006dfe:	430b      	orrs	r3, r1
 8006e00:	9908      	ldr	r1, [sp, #32]
 8006e02:	430b      	orrs	r3, r1
 8006e04:	d120      	bne.n	8006e48 <_dtoa_r+0x998>
 8006e06:	2a00      	cmp	r2, #0
 8006e08:	ddee      	ble.n	8006de8 <_dtoa_r+0x938>
 8006e0a:	9901      	ldr	r1, [sp, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	4648      	mov	r0, r9
 8006e10:	f000 fbb2 	bl	8007578 <__lshift>
 8006e14:	4621      	mov	r1, r4
 8006e16:	9001      	str	r0, [sp, #4]
 8006e18:	f000 fc1a 	bl	8007650 <__mcmp>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	dc03      	bgt.n	8006e28 <_dtoa_r+0x978>
 8006e20:	d1e2      	bne.n	8006de8 <_dtoa_r+0x938>
 8006e22:	f01a 0f01 	tst.w	sl, #1
 8006e26:	d0df      	beq.n	8006de8 <_dtoa_r+0x938>
 8006e28:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006e2c:	d1d9      	bne.n	8006de2 <_dtoa_r+0x932>
 8006e2e:	2339      	movs	r3, #57	@ 0x39
 8006e30:	f88b 3000 	strb.w	r3, [fp]
 8006e34:	4633      	mov	r3, r6
 8006e36:	461e      	mov	r6, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e3e:	2a39      	cmp	r2, #57	@ 0x39
 8006e40:	d053      	beq.n	8006eea <_dtoa_r+0xa3a>
 8006e42:	3201      	adds	r2, #1
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	e60c      	b.n	8006a62 <_dtoa_r+0x5b2>
 8006e48:	2a00      	cmp	r2, #0
 8006e4a:	dd07      	ble.n	8006e5c <_dtoa_r+0x9ac>
 8006e4c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006e50:	d0ed      	beq.n	8006e2e <_dtoa_r+0x97e>
 8006e52:	f10a 0301 	add.w	r3, sl, #1
 8006e56:	f88b 3000 	strb.w	r3, [fp]
 8006e5a:	e602      	b.n	8006a62 <_dtoa_r+0x5b2>
 8006e5c:	9b05      	ldr	r3, [sp, #20]
 8006e5e:	9a05      	ldr	r2, [sp, #20]
 8006e60:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d029      	beq.n	8006ebe <_dtoa_r+0xa0e>
 8006e6a:	9901      	ldr	r1, [sp, #4]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	220a      	movs	r2, #10
 8006e70:	4648      	mov	r0, r9
 8006e72:	f000 f9d5 	bl	8007220 <__multadd>
 8006e76:	45a8      	cmp	r8, r5
 8006e78:	9001      	str	r0, [sp, #4]
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	f04f 020a 	mov.w	r2, #10
 8006e82:	4641      	mov	r1, r8
 8006e84:	4648      	mov	r0, r9
 8006e86:	d107      	bne.n	8006e98 <_dtoa_r+0x9e8>
 8006e88:	f000 f9ca 	bl	8007220 <__multadd>
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	4605      	mov	r5, r0
 8006e90:	9b05      	ldr	r3, [sp, #20]
 8006e92:	3301      	adds	r3, #1
 8006e94:	9305      	str	r3, [sp, #20]
 8006e96:	e775      	b.n	8006d84 <_dtoa_r+0x8d4>
 8006e98:	f000 f9c2 	bl	8007220 <__multadd>
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	4680      	mov	r8, r0
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	220a      	movs	r2, #10
 8006ea4:	4648      	mov	r0, r9
 8006ea6:	f000 f9bb 	bl	8007220 <__multadd>
 8006eaa:	4605      	mov	r5, r0
 8006eac:	e7f0      	b.n	8006e90 <_dtoa_r+0x9e0>
 8006eae:	f1bb 0f00 	cmp.w	fp, #0
 8006eb2:	bfcc      	ite	gt
 8006eb4:	465e      	movgt	r6, fp
 8006eb6:	2601      	movle	r6, #1
 8006eb8:	443e      	add	r6, r7
 8006eba:	f04f 0800 	mov.w	r8, #0
 8006ebe:	9901      	ldr	r1, [sp, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	4648      	mov	r0, r9
 8006ec4:	f000 fb58 	bl	8007578 <__lshift>
 8006ec8:	4621      	mov	r1, r4
 8006eca:	9001      	str	r0, [sp, #4]
 8006ecc:	f000 fbc0 	bl	8007650 <__mcmp>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	dcaf      	bgt.n	8006e34 <_dtoa_r+0x984>
 8006ed4:	d102      	bne.n	8006edc <_dtoa_r+0xa2c>
 8006ed6:	f01a 0f01 	tst.w	sl, #1
 8006eda:	d1ab      	bne.n	8006e34 <_dtoa_r+0x984>
 8006edc:	4633      	mov	r3, r6
 8006ede:	461e      	mov	r6, r3
 8006ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ee4:	2a30      	cmp	r2, #48	@ 0x30
 8006ee6:	d0fa      	beq.n	8006ede <_dtoa_r+0xa2e>
 8006ee8:	e5bb      	b.n	8006a62 <_dtoa_r+0x5b2>
 8006eea:	429f      	cmp	r7, r3
 8006eec:	d1a3      	bne.n	8006e36 <_dtoa_r+0x986>
 8006eee:	9b04      	ldr	r3, [sp, #16]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	9304      	str	r3, [sp, #16]
 8006ef4:	2331      	movs	r3, #49	@ 0x31
 8006ef6:	703b      	strb	r3, [r7, #0]
 8006ef8:	e5b3      	b.n	8006a62 <_dtoa_r+0x5b2>
 8006efa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006efc:	4f16      	ldr	r7, [pc, #88]	@ (8006f58 <_dtoa_r+0xaa8>)
 8006efe:	b11b      	cbz	r3, 8006f08 <_dtoa_r+0xa58>
 8006f00:	f107 0308 	add.w	r3, r7, #8
 8006f04:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	4638      	mov	r0, r7
 8006f0a:	b011      	add	sp, #68	@ 0x44
 8006f0c:	ecbd 8b02 	vpop	{d8}
 8006f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f14:	9b07      	ldr	r3, [sp, #28]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	f77f ae36 	ble.w	8006b88 <_dtoa_r+0x6d8>
 8006f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f20:	2001      	movs	r0, #1
 8006f22:	e656      	b.n	8006bd2 <_dtoa_r+0x722>
 8006f24:	f1bb 0f00 	cmp.w	fp, #0
 8006f28:	f77f aed7 	ble.w	8006cda <_dtoa_r+0x82a>
 8006f2c:	463e      	mov	r6, r7
 8006f2e:	9801      	ldr	r0, [sp, #4]
 8006f30:	4621      	mov	r1, r4
 8006f32:	f7ff fa32 	bl	800639a <quorem>
 8006f36:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006f3a:	f806 ab01 	strb.w	sl, [r6], #1
 8006f3e:	1bf2      	subs	r2, r6, r7
 8006f40:	4593      	cmp	fp, r2
 8006f42:	ddb4      	ble.n	8006eae <_dtoa_r+0x9fe>
 8006f44:	9901      	ldr	r1, [sp, #4]
 8006f46:	2300      	movs	r3, #0
 8006f48:	220a      	movs	r2, #10
 8006f4a:	4648      	mov	r0, r9
 8006f4c:	f000 f968 	bl	8007220 <__multadd>
 8006f50:	9001      	str	r0, [sp, #4]
 8006f52:	e7ec      	b.n	8006f2e <_dtoa_r+0xa7e>
 8006f54:	08008104 	.word	0x08008104
 8006f58:	08008088 	.word	0x08008088

08006f5c <_free_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4605      	mov	r5, r0
 8006f60:	2900      	cmp	r1, #0
 8006f62:	d041      	beq.n	8006fe8 <_free_r+0x8c>
 8006f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f68:	1f0c      	subs	r4, r1, #4
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	bfb8      	it	lt
 8006f6e:	18e4      	addlt	r4, r4, r3
 8006f70:	f000 f8e8 	bl	8007144 <__malloc_lock>
 8006f74:	4a1d      	ldr	r2, [pc, #116]	@ (8006fec <_free_r+0x90>)
 8006f76:	6813      	ldr	r3, [r2, #0]
 8006f78:	b933      	cbnz	r3, 8006f88 <_free_r+0x2c>
 8006f7a:	6063      	str	r3, [r4, #4]
 8006f7c:	6014      	str	r4, [r2, #0]
 8006f7e:	4628      	mov	r0, r5
 8006f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f84:	f000 b8e4 	b.w	8007150 <__malloc_unlock>
 8006f88:	42a3      	cmp	r3, r4
 8006f8a:	d908      	bls.n	8006f9e <_free_r+0x42>
 8006f8c:	6820      	ldr	r0, [r4, #0]
 8006f8e:	1821      	adds	r1, r4, r0
 8006f90:	428b      	cmp	r3, r1
 8006f92:	bf01      	itttt	eq
 8006f94:	6819      	ldreq	r1, [r3, #0]
 8006f96:	685b      	ldreq	r3, [r3, #4]
 8006f98:	1809      	addeq	r1, r1, r0
 8006f9a:	6021      	streq	r1, [r4, #0]
 8006f9c:	e7ed      	b.n	8006f7a <_free_r+0x1e>
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	b10b      	cbz	r3, 8006fa8 <_free_r+0x4c>
 8006fa4:	42a3      	cmp	r3, r4
 8006fa6:	d9fa      	bls.n	8006f9e <_free_r+0x42>
 8006fa8:	6811      	ldr	r1, [r2, #0]
 8006faa:	1850      	adds	r0, r2, r1
 8006fac:	42a0      	cmp	r0, r4
 8006fae:	d10b      	bne.n	8006fc8 <_free_r+0x6c>
 8006fb0:	6820      	ldr	r0, [r4, #0]
 8006fb2:	4401      	add	r1, r0
 8006fb4:	1850      	adds	r0, r2, r1
 8006fb6:	4283      	cmp	r3, r0
 8006fb8:	6011      	str	r1, [r2, #0]
 8006fba:	d1e0      	bne.n	8006f7e <_free_r+0x22>
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	6053      	str	r3, [r2, #4]
 8006fc2:	4408      	add	r0, r1
 8006fc4:	6010      	str	r0, [r2, #0]
 8006fc6:	e7da      	b.n	8006f7e <_free_r+0x22>
 8006fc8:	d902      	bls.n	8006fd0 <_free_r+0x74>
 8006fca:	230c      	movs	r3, #12
 8006fcc:	602b      	str	r3, [r5, #0]
 8006fce:	e7d6      	b.n	8006f7e <_free_r+0x22>
 8006fd0:	6820      	ldr	r0, [r4, #0]
 8006fd2:	1821      	adds	r1, r4, r0
 8006fd4:	428b      	cmp	r3, r1
 8006fd6:	bf04      	itt	eq
 8006fd8:	6819      	ldreq	r1, [r3, #0]
 8006fda:	685b      	ldreq	r3, [r3, #4]
 8006fdc:	6063      	str	r3, [r4, #4]
 8006fde:	bf04      	itt	eq
 8006fe0:	1809      	addeq	r1, r1, r0
 8006fe2:	6021      	streq	r1, [r4, #0]
 8006fe4:	6054      	str	r4, [r2, #4]
 8006fe6:	e7ca      	b.n	8006f7e <_free_r+0x22>
 8006fe8:	bd38      	pop	{r3, r4, r5, pc}
 8006fea:	bf00      	nop
 8006fec:	24000410 	.word	0x24000410

08006ff0 <malloc>:
 8006ff0:	4b02      	ldr	r3, [pc, #8]	@ (8006ffc <malloc+0xc>)
 8006ff2:	4601      	mov	r1, r0
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	f000 b825 	b.w	8007044 <_malloc_r>
 8006ffa:	bf00      	nop
 8006ffc:	24000024 	.word	0x24000024

08007000 <sbrk_aligned>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	4e0f      	ldr	r6, [pc, #60]	@ (8007040 <sbrk_aligned+0x40>)
 8007004:	460c      	mov	r4, r1
 8007006:	6831      	ldr	r1, [r6, #0]
 8007008:	4605      	mov	r5, r0
 800700a:	b911      	cbnz	r1, 8007012 <sbrk_aligned+0x12>
 800700c:	f000 fe9a 	bl	8007d44 <_sbrk_r>
 8007010:	6030      	str	r0, [r6, #0]
 8007012:	4621      	mov	r1, r4
 8007014:	4628      	mov	r0, r5
 8007016:	f000 fe95 	bl	8007d44 <_sbrk_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	d103      	bne.n	8007026 <sbrk_aligned+0x26>
 800701e:	f04f 34ff 	mov.w	r4, #4294967295
 8007022:	4620      	mov	r0, r4
 8007024:	bd70      	pop	{r4, r5, r6, pc}
 8007026:	1cc4      	adds	r4, r0, #3
 8007028:	f024 0403 	bic.w	r4, r4, #3
 800702c:	42a0      	cmp	r0, r4
 800702e:	d0f8      	beq.n	8007022 <sbrk_aligned+0x22>
 8007030:	1a21      	subs	r1, r4, r0
 8007032:	4628      	mov	r0, r5
 8007034:	f000 fe86 	bl	8007d44 <_sbrk_r>
 8007038:	3001      	adds	r0, #1
 800703a:	d1f2      	bne.n	8007022 <sbrk_aligned+0x22>
 800703c:	e7ef      	b.n	800701e <sbrk_aligned+0x1e>
 800703e:	bf00      	nop
 8007040:	2400040c 	.word	0x2400040c

08007044 <_malloc_r>:
 8007044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007048:	1ccd      	adds	r5, r1, #3
 800704a:	f025 0503 	bic.w	r5, r5, #3
 800704e:	3508      	adds	r5, #8
 8007050:	2d0c      	cmp	r5, #12
 8007052:	bf38      	it	cc
 8007054:	250c      	movcc	r5, #12
 8007056:	2d00      	cmp	r5, #0
 8007058:	4606      	mov	r6, r0
 800705a:	db01      	blt.n	8007060 <_malloc_r+0x1c>
 800705c:	42a9      	cmp	r1, r5
 800705e:	d904      	bls.n	800706a <_malloc_r+0x26>
 8007060:	230c      	movs	r3, #12
 8007062:	6033      	str	r3, [r6, #0]
 8007064:	2000      	movs	r0, #0
 8007066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800706a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007140 <_malloc_r+0xfc>
 800706e:	f000 f869 	bl	8007144 <__malloc_lock>
 8007072:	f8d8 3000 	ldr.w	r3, [r8]
 8007076:	461c      	mov	r4, r3
 8007078:	bb44      	cbnz	r4, 80070cc <_malloc_r+0x88>
 800707a:	4629      	mov	r1, r5
 800707c:	4630      	mov	r0, r6
 800707e:	f7ff ffbf 	bl	8007000 <sbrk_aligned>
 8007082:	1c43      	adds	r3, r0, #1
 8007084:	4604      	mov	r4, r0
 8007086:	d158      	bne.n	800713a <_malloc_r+0xf6>
 8007088:	f8d8 4000 	ldr.w	r4, [r8]
 800708c:	4627      	mov	r7, r4
 800708e:	2f00      	cmp	r7, #0
 8007090:	d143      	bne.n	800711a <_malloc_r+0xd6>
 8007092:	2c00      	cmp	r4, #0
 8007094:	d04b      	beq.n	800712e <_malloc_r+0xea>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	4639      	mov	r1, r7
 800709a:	4630      	mov	r0, r6
 800709c:	eb04 0903 	add.w	r9, r4, r3
 80070a0:	f000 fe50 	bl	8007d44 <_sbrk_r>
 80070a4:	4581      	cmp	r9, r0
 80070a6:	d142      	bne.n	800712e <_malloc_r+0xea>
 80070a8:	6821      	ldr	r1, [r4, #0]
 80070aa:	1a6d      	subs	r5, r5, r1
 80070ac:	4629      	mov	r1, r5
 80070ae:	4630      	mov	r0, r6
 80070b0:	f7ff ffa6 	bl	8007000 <sbrk_aligned>
 80070b4:	3001      	adds	r0, #1
 80070b6:	d03a      	beq.n	800712e <_malloc_r+0xea>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	442b      	add	r3, r5
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	f8d8 3000 	ldr.w	r3, [r8]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	bb62      	cbnz	r2, 8007120 <_malloc_r+0xdc>
 80070c6:	f8c8 7000 	str.w	r7, [r8]
 80070ca:	e00f      	b.n	80070ec <_malloc_r+0xa8>
 80070cc:	6822      	ldr	r2, [r4, #0]
 80070ce:	1b52      	subs	r2, r2, r5
 80070d0:	d420      	bmi.n	8007114 <_malloc_r+0xd0>
 80070d2:	2a0b      	cmp	r2, #11
 80070d4:	d917      	bls.n	8007106 <_malloc_r+0xc2>
 80070d6:	1961      	adds	r1, r4, r5
 80070d8:	42a3      	cmp	r3, r4
 80070da:	6025      	str	r5, [r4, #0]
 80070dc:	bf18      	it	ne
 80070de:	6059      	strne	r1, [r3, #4]
 80070e0:	6863      	ldr	r3, [r4, #4]
 80070e2:	bf08      	it	eq
 80070e4:	f8c8 1000 	streq.w	r1, [r8]
 80070e8:	5162      	str	r2, [r4, r5]
 80070ea:	604b      	str	r3, [r1, #4]
 80070ec:	4630      	mov	r0, r6
 80070ee:	f000 f82f 	bl	8007150 <__malloc_unlock>
 80070f2:	f104 000b 	add.w	r0, r4, #11
 80070f6:	1d23      	adds	r3, r4, #4
 80070f8:	f020 0007 	bic.w	r0, r0, #7
 80070fc:	1ac2      	subs	r2, r0, r3
 80070fe:	bf1c      	itt	ne
 8007100:	1a1b      	subne	r3, r3, r0
 8007102:	50a3      	strne	r3, [r4, r2]
 8007104:	e7af      	b.n	8007066 <_malloc_r+0x22>
 8007106:	6862      	ldr	r2, [r4, #4]
 8007108:	42a3      	cmp	r3, r4
 800710a:	bf0c      	ite	eq
 800710c:	f8c8 2000 	streq.w	r2, [r8]
 8007110:	605a      	strne	r2, [r3, #4]
 8007112:	e7eb      	b.n	80070ec <_malloc_r+0xa8>
 8007114:	4623      	mov	r3, r4
 8007116:	6864      	ldr	r4, [r4, #4]
 8007118:	e7ae      	b.n	8007078 <_malloc_r+0x34>
 800711a:	463c      	mov	r4, r7
 800711c:	687f      	ldr	r7, [r7, #4]
 800711e:	e7b6      	b.n	800708e <_malloc_r+0x4a>
 8007120:	461a      	mov	r2, r3
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	42a3      	cmp	r3, r4
 8007126:	d1fb      	bne.n	8007120 <_malloc_r+0xdc>
 8007128:	2300      	movs	r3, #0
 800712a:	6053      	str	r3, [r2, #4]
 800712c:	e7de      	b.n	80070ec <_malloc_r+0xa8>
 800712e:	230c      	movs	r3, #12
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	4630      	mov	r0, r6
 8007134:	f000 f80c 	bl	8007150 <__malloc_unlock>
 8007138:	e794      	b.n	8007064 <_malloc_r+0x20>
 800713a:	6005      	str	r5, [r0, #0]
 800713c:	e7d6      	b.n	80070ec <_malloc_r+0xa8>
 800713e:	bf00      	nop
 8007140:	24000410 	.word	0x24000410

08007144 <__malloc_lock>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__malloc_lock+0x8>)
 8007146:	f7ff b926 	b.w	8006396 <__retarget_lock_acquire_recursive>
 800714a:	bf00      	nop
 800714c:	24000408 	.word	0x24000408

08007150 <__malloc_unlock>:
 8007150:	4801      	ldr	r0, [pc, #4]	@ (8007158 <__malloc_unlock+0x8>)
 8007152:	f7ff b921 	b.w	8006398 <__retarget_lock_release_recursive>
 8007156:	bf00      	nop
 8007158:	24000408 	.word	0x24000408

0800715c <_Balloc>:
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	69c6      	ldr	r6, [r0, #28]
 8007160:	4604      	mov	r4, r0
 8007162:	460d      	mov	r5, r1
 8007164:	b976      	cbnz	r6, 8007184 <_Balloc+0x28>
 8007166:	2010      	movs	r0, #16
 8007168:	f7ff ff42 	bl	8006ff0 <malloc>
 800716c:	4602      	mov	r2, r0
 800716e:	61e0      	str	r0, [r4, #28]
 8007170:	b920      	cbnz	r0, 800717c <_Balloc+0x20>
 8007172:	4b18      	ldr	r3, [pc, #96]	@ (80071d4 <_Balloc+0x78>)
 8007174:	4818      	ldr	r0, [pc, #96]	@ (80071d8 <_Balloc+0x7c>)
 8007176:	216b      	movs	r1, #107	@ 0x6b
 8007178:	f000 fe02 	bl	8007d80 <__assert_func>
 800717c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007180:	6006      	str	r6, [r0, #0]
 8007182:	60c6      	str	r6, [r0, #12]
 8007184:	69e6      	ldr	r6, [r4, #28]
 8007186:	68f3      	ldr	r3, [r6, #12]
 8007188:	b183      	cbz	r3, 80071ac <_Balloc+0x50>
 800718a:	69e3      	ldr	r3, [r4, #28]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007192:	b9b8      	cbnz	r0, 80071c4 <_Balloc+0x68>
 8007194:	2101      	movs	r1, #1
 8007196:	fa01 f605 	lsl.w	r6, r1, r5
 800719a:	1d72      	adds	r2, r6, #5
 800719c:	0092      	lsls	r2, r2, #2
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 fe0c 	bl	8007dbc <_calloc_r>
 80071a4:	b160      	cbz	r0, 80071c0 <_Balloc+0x64>
 80071a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071aa:	e00e      	b.n	80071ca <_Balloc+0x6e>
 80071ac:	2221      	movs	r2, #33	@ 0x21
 80071ae:	2104      	movs	r1, #4
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fe03 	bl	8007dbc <_calloc_r>
 80071b6:	69e3      	ldr	r3, [r4, #28]
 80071b8:	60f0      	str	r0, [r6, #12]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e4      	bne.n	800718a <_Balloc+0x2e>
 80071c0:	2000      	movs	r0, #0
 80071c2:	bd70      	pop	{r4, r5, r6, pc}
 80071c4:	6802      	ldr	r2, [r0, #0]
 80071c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071ca:	2300      	movs	r3, #0
 80071cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071d0:	e7f7      	b.n	80071c2 <_Balloc+0x66>
 80071d2:	bf00      	nop
 80071d4:	08008095 	.word	0x08008095
 80071d8:	08008115 	.word	0x08008115

080071dc <_Bfree>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	69c6      	ldr	r6, [r0, #28]
 80071e0:	4605      	mov	r5, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	b976      	cbnz	r6, 8007204 <_Bfree+0x28>
 80071e6:	2010      	movs	r0, #16
 80071e8:	f7ff ff02 	bl	8006ff0 <malloc>
 80071ec:	4602      	mov	r2, r0
 80071ee:	61e8      	str	r0, [r5, #28]
 80071f0:	b920      	cbnz	r0, 80071fc <_Bfree+0x20>
 80071f2:	4b09      	ldr	r3, [pc, #36]	@ (8007218 <_Bfree+0x3c>)
 80071f4:	4809      	ldr	r0, [pc, #36]	@ (800721c <_Bfree+0x40>)
 80071f6:	218f      	movs	r1, #143	@ 0x8f
 80071f8:	f000 fdc2 	bl	8007d80 <__assert_func>
 80071fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007200:	6006      	str	r6, [r0, #0]
 8007202:	60c6      	str	r6, [r0, #12]
 8007204:	b13c      	cbz	r4, 8007216 <_Bfree+0x3a>
 8007206:	69eb      	ldr	r3, [r5, #28]
 8007208:	6862      	ldr	r2, [r4, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007210:	6021      	str	r1, [r4, #0]
 8007212:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	08008095 	.word	0x08008095
 800721c:	08008115 	.word	0x08008115

08007220 <__multadd>:
 8007220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007224:	690d      	ldr	r5, [r1, #16]
 8007226:	4607      	mov	r7, r0
 8007228:	460c      	mov	r4, r1
 800722a:	461e      	mov	r6, r3
 800722c:	f101 0c14 	add.w	ip, r1, #20
 8007230:	2000      	movs	r0, #0
 8007232:	f8dc 3000 	ldr.w	r3, [ip]
 8007236:	b299      	uxth	r1, r3
 8007238:	fb02 6101 	mla	r1, r2, r1, r6
 800723c:	0c1e      	lsrs	r6, r3, #16
 800723e:	0c0b      	lsrs	r3, r1, #16
 8007240:	fb02 3306 	mla	r3, r2, r6, r3
 8007244:	b289      	uxth	r1, r1
 8007246:	3001      	adds	r0, #1
 8007248:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800724c:	4285      	cmp	r5, r0
 800724e:	f84c 1b04 	str.w	r1, [ip], #4
 8007252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007256:	dcec      	bgt.n	8007232 <__multadd+0x12>
 8007258:	b30e      	cbz	r6, 800729e <__multadd+0x7e>
 800725a:	68a3      	ldr	r3, [r4, #8]
 800725c:	42ab      	cmp	r3, r5
 800725e:	dc19      	bgt.n	8007294 <__multadd+0x74>
 8007260:	6861      	ldr	r1, [r4, #4]
 8007262:	4638      	mov	r0, r7
 8007264:	3101      	adds	r1, #1
 8007266:	f7ff ff79 	bl	800715c <_Balloc>
 800726a:	4680      	mov	r8, r0
 800726c:	b928      	cbnz	r0, 800727a <__multadd+0x5a>
 800726e:	4602      	mov	r2, r0
 8007270:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <__multadd+0x84>)
 8007272:	480d      	ldr	r0, [pc, #52]	@ (80072a8 <__multadd+0x88>)
 8007274:	21ba      	movs	r1, #186	@ 0xba
 8007276:	f000 fd83 	bl	8007d80 <__assert_func>
 800727a:	6922      	ldr	r2, [r4, #16]
 800727c:	3202      	adds	r2, #2
 800727e:	f104 010c 	add.w	r1, r4, #12
 8007282:	0092      	lsls	r2, r2, #2
 8007284:	300c      	adds	r0, #12
 8007286:	f000 fd6d 	bl	8007d64 <memcpy>
 800728a:	4621      	mov	r1, r4
 800728c:	4638      	mov	r0, r7
 800728e:	f7ff ffa5 	bl	80071dc <_Bfree>
 8007292:	4644      	mov	r4, r8
 8007294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007298:	3501      	adds	r5, #1
 800729a:	615e      	str	r6, [r3, #20]
 800729c:	6125      	str	r5, [r4, #16]
 800729e:	4620      	mov	r0, r4
 80072a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a4:	08008104 	.word	0x08008104
 80072a8:	08008115 	.word	0x08008115

080072ac <__hi0bits>:
 80072ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80072b0:	4603      	mov	r3, r0
 80072b2:	bf36      	itet	cc
 80072b4:	0403      	lslcc	r3, r0, #16
 80072b6:	2000      	movcs	r0, #0
 80072b8:	2010      	movcc	r0, #16
 80072ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072be:	bf3c      	itt	cc
 80072c0:	021b      	lslcc	r3, r3, #8
 80072c2:	3008      	addcc	r0, #8
 80072c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072c8:	bf3c      	itt	cc
 80072ca:	011b      	lslcc	r3, r3, #4
 80072cc:	3004      	addcc	r0, #4
 80072ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072d2:	bf3c      	itt	cc
 80072d4:	009b      	lslcc	r3, r3, #2
 80072d6:	3002      	addcc	r0, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	db05      	blt.n	80072e8 <__hi0bits+0x3c>
 80072dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80072e0:	f100 0001 	add.w	r0, r0, #1
 80072e4:	bf08      	it	eq
 80072e6:	2020      	moveq	r0, #32
 80072e8:	4770      	bx	lr

080072ea <__lo0bits>:
 80072ea:	6803      	ldr	r3, [r0, #0]
 80072ec:	4602      	mov	r2, r0
 80072ee:	f013 0007 	ands.w	r0, r3, #7
 80072f2:	d00b      	beq.n	800730c <__lo0bits+0x22>
 80072f4:	07d9      	lsls	r1, r3, #31
 80072f6:	d421      	bmi.n	800733c <__lo0bits+0x52>
 80072f8:	0798      	lsls	r0, r3, #30
 80072fa:	bf49      	itett	mi
 80072fc:	085b      	lsrmi	r3, r3, #1
 80072fe:	089b      	lsrpl	r3, r3, #2
 8007300:	2001      	movmi	r0, #1
 8007302:	6013      	strmi	r3, [r2, #0]
 8007304:	bf5c      	itt	pl
 8007306:	6013      	strpl	r3, [r2, #0]
 8007308:	2002      	movpl	r0, #2
 800730a:	4770      	bx	lr
 800730c:	b299      	uxth	r1, r3
 800730e:	b909      	cbnz	r1, 8007314 <__lo0bits+0x2a>
 8007310:	0c1b      	lsrs	r3, r3, #16
 8007312:	2010      	movs	r0, #16
 8007314:	b2d9      	uxtb	r1, r3
 8007316:	b909      	cbnz	r1, 800731c <__lo0bits+0x32>
 8007318:	3008      	adds	r0, #8
 800731a:	0a1b      	lsrs	r3, r3, #8
 800731c:	0719      	lsls	r1, r3, #28
 800731e:	bf04      	itt	eq
 8007320:	091b      	lsreq	r3, r3, #4
 8007322:	3004      	addeq	r0, #4
 8007324:	0799      	lsls	r1, r3, #30
 8007326:	bf04      	itt	eq
 8007328:	089b      	lsreq	r3, r3, #2
 800732a:	3002      	addeq	r0, #2
 800732c:	07d9      	lsls	r1, r3, #31
 800732e:	d403      	bmi.n	8007338 <__lo0bits+0x4e>
 8007330:	085b      	lsrs	r3, r3, #1
 8007332:	f100 0001 	add.w	r0, r0, #1
 8007336:	d003      	beq.n	8007340 <__lo0bits+0x56>
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	4770      	bx	lr
 800733c:	2000      	movs	r0, #0
 800733e:	4770      	bx	lr
 8007340:	2020      	movs	r0, #32
 8007342:	4770      	bx	lr

08007344 <__i2b>:
 8007344:	b510      	push	{r4, lr}
 8007346:	460c      	mov	r4, r1
 8007348:	2101      	movs	r1, #1
 800734a:	f7ff ff07 	bl	800715c <_Balloc>
 800734e:	4602      	mov	r2, r0
 8007350:	b928      	cbnz	r0, 800735e <__i2b+0x1a>
 8007352:	4b05      	ldr	r3, [pc, #20]	@ (8007368 <__i2b+0x24>)
 8007354:	4805      	ldr	r0, [pc, #20]	@ (800736c <__i2b+0x28>)
 8007356:	f240 1145 	movw	r1, #325	@ 0x145
 800735a:	f000 fd11 	bl	8007d80 <__assert_func>
 800735e:	2301      	movs	r3, #1
 8007360:	6144      	str	r4, [r0, #20]
 8007362:	6103      	str	r3, [r0, #16]
 8007364:	bd10      	pop	{r4, pc}
 8007366:	bf00      	nop
 8007368:	08008104 	.word	0x08008104
 800736c:	08008115 	.word	0x08008115

08007370 <__multiply>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	4614      	mov	r4, r2
 8007376:	690a      	ldr	r2, [r1, #16]
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	429a      	cmp	r2, r3
 800737c:	bfa8      	it	ge
 800737e:	4623      	movge	r3, r4
 8007380:	460f      	mov	r7, r1
 8007382:	bfa4      	itt	ge
 8007384:	460c      	movge	r4, r1
 8007386:	461f      	movge	r7, r3
 8007388:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800738c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007390:	68a3      	ldr	r3, [r4, #8]
 8007392:	6861      	ldr	r1, [r4, #4]
 8007394:	eb0a 0609 	add.w	r6, sl, r9
 8007398:	42b3      	cmp	r3, r6
 800739a:	b085      	sub	sp, #20
 800739c:	bfb8      	it	lt
 800739e:	3101      	addlt	r1, #1
 80073a0:	f7ff fedc 	bl	800715c <_Balloc>
 80073a4:	b930      	cbnz	r0, 80073b4 <__multiply+0x44>
 80073a6:	4602      	mov	r2, r0
 80073a8:	4b44      	ldr	r3, [pc, #272]	@ (80074bc <__multiply+0x14c>)
 80073aa:	4845      	ldr	r0, [pc, #276]	@ (80074c0 <__multiply+0x150>)
 80073ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80073b0:	f000 fce6 	bl	8007d80 <__assert_func>
 80073b4:	f100 0514 	add.w	r5, r0, #20
 80073b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073bc:	462b      	mov	r3, r5
 80073be:	2200      	movs	r2, #0
 80073c0:	4543      	cmp	r3, r8
 80073c2:	d321      	bcc.n	8007408 <__multiply+0x98>
 80073c4:	f107 0114 	add.w	r1, r7, #20
 80073c8:	f104 0214 	add.w	r2, r4, #20
 80073cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80073d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80073d4:	9302      	str	r3, [sp, #8]
 80073d6:	1b13      	subs	r3, r2, r4
 80073d8:	3b15      	subs	r3, #21
 80073da:	f023 0303 	bic.w	r3, r3, #3
 80073de:	3304      	adds	r3, #4
 80073e0:	f104 0715 	add.w	r7, r4, #21
 80073e4:	42ba      	cmp	r2, r7
 80073e6:	bf38      	it	cc
 80073e8:	2304      	movcc	r3, #4
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	9b02      	ldr	r3, [sp, #8]
 80073ee:	9103      	str	r1, [sp, #12]
 80073f0:	428b      	cmp	r3, r1
 80073f2:	d80c      	bhi.n	800740e <__multiply+0x9e>
 80073f4:	2e00      	cmp	r6, #0
 80073f6:	dd03      	ble.n	8007400 <__multiply+0x90>
 80073f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d05b      	beq.n	80074b8 <__multiply+0x148>
 8007400:	6106      	str	r6, [r0, #16]
 8007402:	b005      	add	sp, #20
 8007404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007408:	f843 2b04 	str.w	r2, [r3], #4
 800740c:	e7d8      	b.n	80073c0 <__multiply+0x50>
 800740e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007412:	f1ba 0f00 	cmp.w	sl, #0
 8007416:	d024      	beq.n	8007462 <__multiply+0xf2>
 8007418:	f104 0e14 	add.w	lr, r4, #20
 800741c:	46a9      	mov	r9, r5
 800741e:	f04f 0c00 	mov.w	ip, #0
 8007422:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007426:	f8d9 3000 	ldr.w	r3, [r9]
 800742a:	fa1f fb87 	uxth.w	fp, r7
 800742e:	b29b      	uxth	r3, r3
 8007430:	fb0a 330b 	mla	r3, sl, fp, r3
 8007434:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007438:	f8d9 7000 	ldr.w	r7, [r9]
 800743c:	4463      	add	r3, ip
 800743e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007442:	fb0a c70b 	mla	r7, sl, fp, ip
 8007446:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800744a:	b29b      	uxth	r3, r3
 800744c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007450:	4572      	cmp	r2, lr
 8007452:	f849 3b04 	str.w	r3, [r9], #4
 8007456:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800745a:	d8e2      	bhi.n	8007422 <__multiply+0xb2>
 800745c:	9b01      	ldr	r3, [sp, #4]
 800745e:	f845 c003 	str.w	ip, [r5, r3]
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007468:	3104      	adds	r1, #4
 800746a:	f1b9 0f00 	cmp.w	r9, #0
 800746e:	d021      	beq.n	80074b4 <__multiply+0x144>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	f104 0c14 	add.w	ip, r4, #20
 8007476:	46ae      	mov	lr, r5
 8007478:	f04f 0a00 	mov.w	sl, #0
 800747c:	f8bc b000 	ldrh.w	fp, [ip]
 8007480:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007484:	fb09 770b 	mla	r7, r9, fp, r7
 8007488:	4457      	add	r7, sl
 800748a:	b29b      	uxth	r3, r3
 800748c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007490:	f84e 3b04 	str.w	r3, [lr], #4
 8007494:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007498:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800749c:	f8be 3000 	ldrh.w	r3, [lr]
 80074a0:	fb09 330a 	mla	r3, r9, sl, r3
 80074a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80074a8:	4562      	cmp	r2, ip
 80074aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074ae:	d8e5      	bhi.n	800747c <__multiply+0x10c>
 80074b0:	9f01      	ldr	r7, [sp, #4]
 80074b2:	51eb      	str	r3, [r5, r7]
 80074b4:	3504      	adds	r5, #4
 80074b6:	e799      	b.n	80073ec <__multiply+0x7c>
 80074b8:	3e01      	subs	r6, #1
 80074ba:	e79b      	b.n	80073f4 <__multiply+0x84>
 80074bc:	08008104 	.word	0x08008104
 80074c0:	08008115 	.word	0x08008115

080074c4 <__pow5mult>:
 80074c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074c8:	4615      	mov	r5, r2
 80074ca:	f012 0203 	ands.w	r2, r2, #3
 80074ce:	4607      	mov	r7, r0
 80074d0:	460e      	mov	r6, r1
 80074d2:	d007      	beq.n	80074e4 <__pow5mult+0x20>
 80074d4:	4c25      	ldr	r4, [pc, #148]	@ (800756c <__pow5mult+0xa8>)
 80074d6:	3a01      	subs	r2, #1
 80074d8:	2300      	movs	r3, #0
 80074da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074de:	f7ff fe9f 	bl	8007220 <__multadd>
 80074e2:	4606      	mov	r6, r0
 80074e4:	10ad      	asrs	r5, r5, #2
 80074e6:	d03d      	beq.n	8007564 <__pow5mult+0xa0>
 80074e8:	69fc      	ldr	r4, [r7, #28]
 80074ea:	b97c      	cbnz	r4, 800750c <__pow5mult+0x48>
 80074ec:	2010      	movs	r0, #16
 80074ee:	f7ff fd7f 	bl	8006ff0 <malloc>
 80074f2:	4602      	mov	r2, r0
 80074f4:	61f8      	str	r0, [r7, #28]
 80074f6:	b928      	cbnz	r0, 8007504 <__pow5mult+0x40>
 80074f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007570 <__pow5mult+0xac>)
 80074fa:	481e      	ldr	r0, [pc, #120]	@ (8007574 <__pow5mult+0xb0>)
 80074fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007500:	f000 fc3e 	bl	8007d80 <__assert_func>
 8007504:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007508:	6004      	str	r4, [r0, #0]
 800750a:	60c4      	str	r4, [r0, #12]
 800750c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007510:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007514:	b94c      	cbnz	r4, 800752a <__pow5mult+0x66>
 8007516:	f240 2171 	movw	r1, #625	@ 0x271
 800751a:	4638      	mov	r0, r7
 800751c:	f7ff ff12 	bl	8007344 <__i2b>
 8007520:	2300      	movs	r3, #0
 8007522:	f8c8 0008 	str.w	r0, [r8, #8]
 8007526:	4604      	mov	r4, r0
 8007528:	6003      	str	r3, [r0, #0]
 800752a:	f04f 0900 	mov.w	r9, #0
 800752e:	07eb      	lsls	r3, r5, #31
 8007530:	d50a      	bpl.n	8007548 <__pow5mult+0x84>
 8007532:	4631      	mov	r1, r6
 8007534:	4622      	mov	r2, r4
 8007536:	4638      	mov	r0, r7
 8007538:	f7ff ff1a 	bl	8007370 <__multiply>
 800753c:	4631      	mov	r1, r6
 800753e:	4680      	mov	r8, r0
 8007540:	4638      	mov	r0, r7
 8007542:	f7ff fe4b 	bl	80071dc <_Bfree>
 8007546:	4646      	mov	r6, r8
 8007548:	106d      	asrs	r5, r5, #1
 800754a:	d00b      	beq.n	8007564 <__pow5mult+0xa0>
 800754c:	6820      	ldr	r0, [r4, #0]
 800754e:	b938      	cbnz	r0, 8007560 <__pow5mult+0x9c>
 8007550:	4622      	mov	r2, r4
 8007552:	4621      	mov	r1, r4
 8007554:	4638      	mov	r0, r7
 8007556:	f7ff ff0b 	bl	8007370 <__multiply>
 800755a:	6020      	str	r0, [r4, #0]
 800755c:	f8c0 9000 	str.w	r9, [r0]
 8007560:	4604      	mov	r4, r0
 8007562:	e7e4      	b.n	800752e <__pow5mult+0x6a>
 8007564:	4630      	mov	r0, r6
 8007566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800756a:	bf00      	nop
 800756c:	08008170 	.word	0x08008170
 8007570:	08008095 	.word	0x08008095
 8007574:	08008115 	.word	0x08008115

08007578 <__lshift>:
 8007578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800757c:	460c      	mov	r4, r1
 800757e:	6849      	ldr	r1, [r1, #4]
 8007580:	6923      	ldr	r3, [r4, #16]
 8007582:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007586:	68a3      	ldr	r3, [r4, #8]
 8007588:	4607      	mov	r7, r0
 800758a:	4691      	mov	r9, r2
 800758c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007590:	f108 0601 	add.w	r6, r8, #1
 8007594:	42b3      	cmp	r3, r6
 8007596:	db0b      	blt.n	80075b0 <__lshift+0x38>
 8007598:	4638      	mov	r0, r7
 800759a:	f7ff fddf 	bl	800715c <_Balloc>
 800759e:	4605      	mov	r5, r0
 80075a0:	b948      	cbnz	r0, 80075b6 <__lshift+0x3e>
 80075a2:	4602      	mov	r2, r0
 80075a4:	4b28      	ldr	r3, [pc, #160]	@ (8007648 <__lshift+0xd0>)
 80075a6:	4829      	ldr	r0, [pc, #164]	@ (800764c <__lshift+0xd4>)
 80075a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80075ac:	f000 fbe8 	bl	8007d80 <__assert_func>
 80075b0:	3101      	adds	r1, #1
 80075b2:	005b      	lsls	r3, r3, #1
 80075b4:	e7ee      	b.n	8007594 <__lshift+0x1c>
 80075b6:	2300      	movs	r3, #0
 80075b8:	f100 0114 	add.w	r1, r0, #20
 80075bc:	f100 0210 	add.w	r2, r0, #16
 80075c0:	4618      	mov	r0, r3
 80075c2:	4553      	cmp	r3, sl
 80075c4:	db33      	blt.n	800762e <__lshift+0xb6>
 80075c6:	6920      	ldr	r0, [r4, #16]
 80075c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075cc:	f104 0314 	add.w	r3, r4, #20
 80075d0:	f019 091f 	ands.w	r9, r9, #31
 80075d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075dc:	d02b      	beq.n	8007636 <__lshift+0xbe>
 80075de:	f1c9 0e20 	rsb	lr, r9, #32
 80075e2:	468a      	mov	sl, r1
 80075e4:	2200      	movs	r2, #0
 80075e6:	6818      	ldr	r0, [r3, #0]
 80075e8:	fa00 f009 	lsl.w	r0, r0, r9
 80075ec:	4310      	orrs	r0, r2
 80075ee:	f84a 0b04 	str.w	r0, [sl], #4
 80075f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f6:	459c      	cmp	ip, r3
 80075f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80075fc:	d8f3      	bhi.n	80075e6 <__lshift+0x6e>
 80075fe:	ebac 0304 	sub.w	r3, ip, r4
 8007602:	3b15      	subs	r3, #21
 8007604:	f023 0303 	bic.w	r3, r3, #3
 8007608:	3304      	adds	r3, #4
 800760a:	f104 0015 	add.w	r0, r4, #21
 800760e:	4584      	cmp	ip, r0
 8007610:	bf38      	it	cc
 8007612:	2304      	movcc	r3, #4
 8007614:	50ca      	str	r2, [r1, r3]
 8007616:	b10a      	cbz	r2, 800761c <__lshift+0xa4>
 8007618:	f108 0602 	add.w	r6, r8, #2
 800761c:	3e01      	subs	r6, #1
 800761e:	4638      	mov	r0, r7
 8007620:	612e      	str	r6, [r5, #16]
 8007622:	4621      	mov	r1, r4
 8007624:	f7ff fdda 	bl	80071dc <_Bfree>
 8007628:	4628      	mov	r0, r5
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007632:	3301      	adds	r3, #1
 8007634:	e7c5      	b.n	80075c2 <__lshift+0x4a>
 8007636:	3904      	subs	r1, #4
 8007638:	f853 2b04 	ldr.w	r2, [r3], #4
 800763c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007640:	459c      	cmp	ip, r3
 8007642:	d8f9      	bhi.n	8007638 <__lshift+0xc0>
 8007644:	e7ea      	b.n	800761c <__lshift+0xa4>
 8007646:	bf00      	nop
 8007648:	08008104 	.word	0x08008104
 800764c:	08008115 	.word	0x08008115

08007650 <__mcmp>:
 8007650:	690a      	ldr	r2, [r1, #16]
 8007652:	4603      	mov	r3, r0
 8007654:	6900      	ldr	r0, [r0, #16]
 8007656:	1a80      	subs	r0, r0, r2
 8007658:	b530      	push	{r4, r5, lr}
 800765a:	d10e      	bne.n	800767a <__mcmp+0x2a>
 800765c:	3314      	adds	r3, #20
 800765e:	3114      	adds	r1, #20
 8007660:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007664:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007668:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800766c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007670:	4295      	cmp	r5, r2
 8007672:	d003      	beq.n	800767c <__mcmp+0x2c>
 8007674:	d205      	bcs.n	8007682 <__mcmp+0x32>
 8007676:	f04f 30ff 	mov.w	r0, #4294967295
 800767a:	bd30      	pop	{r4, r5, pc}
 800767c:	42a3      	cmp	r3, r4
 800767e:	d3f3      	bcc.n	8007668 <__mcmp+0x18>
 8007680:	e7fb      	b.n	800767a <__mcmp+0x2a>
 8007682:	2001      	movs	r0, #1
 8007684:	e7f9      	b.n	800767a <__mcmp+0x2a>
	...

08007688 <__mdiff>:
 8007688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	4689      	mov	r9, r1
 800768e:	4606      	mov	r6, r0
 8007690:	4611      	mov	r1, r2
 8007692:	4648      	mov	r0, r9
 8007694:	4614      	mov	r4, r2
 8007696:	f7ff ffdb 	bl	8007650 <__mcmp>
 800769a:	1e05      	subs	r5, r0, #0
 800769c:	d112      	bne.n	80076c4 <__mdiff+0x3c>
 800769e:	4629      	mov	r1, r5
 80076a0:	4630      	mov	r0, r6
 80076a2:	f7ff fd5b 	bl	800715c <_Balloc>
 80076a6:	4602      	mov	r2, r0
 80076a8:	b928      	cbnz	r0, 80076b6 <__mdiff+0x2e>
 80076aa:	4b3f      	ldr	r3, [pc, #252]	@ (80077a8 <__mdiff+0x120>)
 80076ac:	f240 2137 	movw	r1, #567	@ 0x237
 80076b0:	483e      	ldr	r0, [pc, #248]	@ (80077ac <__mdiff+0x124>)
 80076b2:	f000 fb65 	bl	8007d80 <__assert_func>
 80076b6:	2301      	movs	r3, #1
 80076b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076bc:	4610      	mov	r0, r2
 80076be:	b003      	add	sp, #12
 80076c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c4:	bfbc      	itt	lt
 80076c6:	464b      	movlt	r3, r9
 80076c8:	46a1      	movlt	r9, r4
 80076ca:	4630      	mov	r0, r6
 80076cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076d0:	bfba      	itte	lt
 80076d2:	461c      	movlt	r4, r3
 80076d4:	2501      	movlt	r5, #1
 80076d6:	2500      	movge	r5, #0
 80076d8:	f7ff fd40 	bl	800715c <_Balloc>
 80076dc:	4602      	mov	r2, r0
 80076de:	b918      	cbnz	r0, 80076e8 <__mdiff+0x60>
 80076e0:	4b31      	ldr	r3, [pc, #196]	@ (80077a8 <__mdiff+0x120>)
 80076e2:	f240 2145 	movw	r1, #581	@ 0x245
 80076e6:	e7e3      	b.n	80076b0 <__mdiff+0x28>
 80076e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80076ec:	6926      	ldr	r6, [r4, #16]
 80076ee:	60c5      	str	r5, [r0, #12]
 80076f0:	f109 0310 	add.w	r3, r9, #16
 80076f4:	f109 0514 	add.w	r5, r9, #20
 80076f8:	f104 0e14 	add.w	lr, r4, #20
 80076fc:	f100 0b14 	add.w	fp, r0, #20
 8007700:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007704:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	46d9      	mov	r9, fp
 800770c:	f04f 0c00 	mov.w	ip, #0
 8007710:	9b01      	ldr	r3, [sp, #4]
 8007712:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007716:	f853 af04 	ldr.w	sl, [r3, #4]!
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	fa1f f38a 	uxth.w	r3, sl
 8007720:	4619      	mov	r1, r3
 8007722:	b283      	uxth	r3, r0
 8007724:	1acb      	subs	r3, r1, r3
 8007726:	0c00      	lsrs	r0, r0, #16
 8007728:	4463      	add	r3, ip
 800772a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800772e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007732:	b29b      	uxth	r3, r3
 8007734:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007738:	4576      	cmp	r6, lr
 800773a:	f849 3b04 	str.w	r3, [r9], #4
 800773e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007742:	d8e5      	bhi.n	8007710 <__mdiff+0x88>
 8007744:	1b33      	subs	r3, r6, r4
 8007746:	3b15      	subs	r3, #21
 8007748:	f023 0303 	bic.w	r3, r3, #3
 800774c:	3415      	adds	r4, #21
 800774e:	3304      	adds	r3, #4
 8007750:	42a6      	cmp	r6, r4
 8007752:	bf38      	it	cc
 8007754:	2304      	movcc	r3, #4
 8007756:	441d      	add	r5, r3
 8007758:	445b      	add	r3, fp
 800775a:	461e      	mov	r6, r3
 800775c:	462c      	mov	r4, r5
 800775e:	4544      	cmp	r4, r8
 8007760:	d30e      	bcc.n	8007780 <__mdiff+0xf8>
 8007762:	f108 0103 	add.w	r1, r8, #3
 8007766:	1b49      	subs	r1, r1, r5
 8007768:	f021 0103 	bic.w	r1, r1, #3
 800776c:	3d03      	subs	r5, #3
 800776e:	45a8      	cmp	r8, r5
 8007770:	bf38      	it	cc
 8007772:	2100      	movcc	r1, #0
 8007774:	440b      	add	r3, r1
 8007776:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800777a:	b191      	cbz	r1, 80077a2 <__mdiff+0x11a>
 800777c:	6117      	str	r7, [r2, #16]
 800777e:	e79d      	b.n	80076bc <__mdiff+0x34>
 8007780:	f854 1b04 	ldr.w	r1, [r4], #4
 8007784:	46e6      	mov	lr, ip
 8007786:	0c08      	lsrs	r0, r1, #16
 8007788:	fa1c fc81 	uxtah	ip, ip, r1
 800778c:	4471      	add	r1, lr
 800778e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007792:	b289      	uxth	r1, r1
 8007794:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007798:	f846 1b04 	str.w	r1, [r6], #4
 800779c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077a0:	e7dd      	b.n	800775e <__mdiff+0xd6>
 80077a2:	3f01      	subs	r7, #1
 80077a4:	e7e7      	b.n	8007776 <__mdiff+0xee>
 80077a6:	bf00      	nop
 80077a8:	08008104 	.word	0x08008104
 80077ac:	08008115 	.word	0x08008115

080077b0 <__d2b>:
 80077b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077b4:	460f      	mov	r7, r1
 80077b6:	2101      	movs	r1, #1
 80077b8:	ec59 8b10 	vmov	r8, r9, d0
 80077bc:	4616      	mov	r6, r2
 80077be:	f7ff fccd 	bl	800715c <_Balloc>
 80077c2:	4604      	mov	r4, r0
 80077c4:	b930      	cbnz	r0, 80077d4 <__d2b+0x24>
 80077c6:	4602      	mov	r2, r0
 80077c8:	4b23      	ldr	r3, [pc, #140]	@ (8007858 <__d2b+0xa8>)
 80077ca:	4824      	ldr	r0, [pc, #144]	@ (800785c <__d2b+0xac>)
 80077cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80077d0:	f000 fad6 	bl	8007d80 <__assert_func>
 80077d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80077d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077dc:	b10d      	cbz	r5, 80077e2 <__d2b+0x32>
 80077de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077e2:	9301      	str	r3, [sp, #4]
 80077e4:	f1b8 0300 	subs.w	r3, r8, #0
 80077e8:	d023      	beq.n	8007832 <__d2b+0x82>
 80077ea:	4668      	mov	r0, sp
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	f7ff fd7c 	bl	80072ea <__lo0bits>
 80077f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077f6:	b1d0      	cbz	r0, 800782e <__d2b+0x7e>
 80077f8:	f1c0 0320 	rsb	r3, r0, #32
 80077fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007800:	430b      	orrs	r3, r1
 8007802:	40c2      	lsrs	r2, r0
 8007804:	6163      	str	r3, [r4, #20]
 8007806:	9201      	str	r2, [sp, #4]
 8007808:	9b01      	ldr	r3, [sp, #4]
 800780a:	61a3      	str	r3, [r4, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	bf0c      	ite	eq
 8007810:	2201      	moveq	r2, #1
 8007812:	2202      	movne	r2, #2
 8007814:	6122      	str	r2, [r4, #16]
 8007816:	b1a5      	cbz	r5, 8007842 <__d2b+0x92>
 8007818:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800781c:	4405      	add	r5, r0
 800781e:	603d      	str	r5, [r7, #0]
 8007820:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007824:	6030      	str	r0, [r6, #0]
 8007826:	4620      	mov	r0, r4
 8007828:	b003      	add	sp, #12
 800782a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800782e:	6161      	str	r1, [r4, #20]
 8007830:	e7ea      	b.n	8007808 <__d2b+0x58>
 8007832:	a801      	add	r0, sp, #4
 8007834:	f7ff fd59 	bl	80072ea <__lo0bits>
 8007838:	9b01      	ldr	r3, [sp, #4]
 800783a:	6163      	str	r3, [r4, #20]
 800783c:	3020      	adds	r0, #32
 800783e:	2201      	movs	r2, #1
 8007840:	e7e8      	b.n	8007814 <__d2b+0x64>
 8007842:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007846:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800784a:	6038      	str	r0, [r7, #0]
 800784c:	6918      	ldr	r0, [r3, #16]
 800784e:	f7ff fd2d 	bl	80072ac <__hi0bits>
 8007852:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007856:	e7e5      	b.n	8007824 <__d2b+0x74>
 8007858:	08008104 	.word	0x08008104
 800785c:	08008115 	.word	0x08008115

08007860 <__sfputc_r>:
 8007860:	6893      	ldr	r3, [r2, #8]
 8007862:	3b01      	subs	r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	b410      	push	{r4}
 8007868:	6093      	str	r3, [r2, #8]
 800786a:	da08      	bge.n	800787e <__sfputc_r+0x1e>
 800786c:	6994      	ldr	r4, [r2, #24]
 800786e:	42a3      	cmp	r3, r4
 8007870:	db01      	blt.n	8007876 <__sfputc_r+0x16>
 8007872:	290a      	cmp	r1, #10
 8007874:	d103      	bne.n	800787e <__sfputc_r+0x1e>
 8007876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800787a:	f7fe bc7a 	b.w	8006172 <__swbuf_r>
 800787e:	6813      	ldr	r3, [r2, #0]
 8007880:	1c58      	adds	r0, r3, #1
 8007882:	6010      	str	r0, [r2, #0]
 8007884:	7019      	strb	r1, [r3, #0]
 8007886:	4608      	mov	r0, r1
 8007888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800788c:	4770      	bx	lr

0800788e <__sfputs_r>:
 800788e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007890:	4606      	mov	r6, r0
 8007892:	460f      	mov	r7, r1
 8007894:	4614      	mov	r4, r2
 8007896:	18d5      	adds	r5, r2, r3
 8007898:	42ac      	cmp	r4, r5
 800789a:	d101      	bne.n	80078a0 <__sfputs_r+0x12>
 800789c:	2000      	movs	r0, #0
 800789e:	e007      	b.n	80078b0 <__sfputs_r+0x22>
 80078a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a4:	463a      	mov	r2, r7
 80078a6:	4630      	mov	r0, r6
 80078a8:	f7ff ffda 	bl	8007860 <__sfputc_r>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	d1f3      	bne.n	8007898 <__sfputs_r+0xa>
 80078b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078b4 <_vfiprintf_r>:
 80078b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	460d      	mov	r5, r1
 80078ba:	b09d      	sub	sp, #116	@ 0x74
 80078bc:	4614      	mov	r4, r2
 80078be:	4698      	mov	r8, r3
 80078c0:	4606      	mov	r6, r0
 80078c2:	b118      	cbz	r0, 80078cc <_vfiprintf_r+0x18>
 80078c4:	6a03      	ldr	r3, [r0, #32]
 80078c6:	b90b      	cbnz	r3, 80078cc <_vfiprintf_r+0x18>
 80078c8:	f7fe fb6a 	bl	8005fa0 <__sinit>
 80078cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078ce:	07d9      	lsls	r1, r3, #31
 80078d0:	d405      	bmi.n	80078de <_vfiprintf_r+0x2a>
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	059a      	lsls	r2, r3, #22
 80078d6:	d402      	bmi.n	80078de <_vfiprintf_r+0x2a>
 80078d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078da:	f7fe fd5c 	bl	8006396 <__retarget_lock_acquire_recursive>
 80078de:	89ab      	ldrh	r3, [r5, #12]
 80078e0:	071b      	lsls	r3, r3, #28
 80078e2:	d501      	bpl.n	80078e8 <_vfiprintf_r+0x34>
 80078e4:	692b      	ldr	r3, [r5, #16]
 80078e6:	b99b      	cbnz	r3, 8007910 <_vfiprintf_r+0x5c>
 80078e8:	4629      	mov	r1, r5
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7fe fc80 	bl	80061f0 <__swsetup_r>
 80078f0:	b170      	cbz	r0, 8007910 <_vfiprintf_r+0x5c>
 80078f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078f4:	07dc      	lsls	r4, r3, #31
 80078f6:	d504      	bpl.n	8007902 <_vfiprintf_r+0x4e>
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	b01d      	add	sp, #116	@ 0x74
 80078fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007902:	89ab      	ldrh	r3, [r5, #12]
 8007904:	0598      	lsls	r0, r3, #22
 8007906:	d4f7      	bmi.n	80078f8 <_vfiprintf_r+0x44>
 8007908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800790a:	f7fe fd45 	bl	8006398 <__retarget_lock_release_recursive>
 800790e:	e7f3      	b.n	80078f8 <_vfiprintf_r+0x44>
 8007910:	2300      	movs	r3, #0
 8007912:	9309      	str	r3, [sp, #36]	@ 0x24
 8007914:	2320      	movs	r3, #32
 8007916:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800791a:	f8cd 800c 	str.w	r8, [sp, #12]
 800791e:	2330      	movs	r3, #48	@ 0x30
 8007920:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ad0 <_vfiprintf_r+0x21c>
 8007924:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007928:	f04f 0901 	mov.w	r9, #1
 800792c:	4623      	mov	r3, r4
 800792e:	469a      	mov	sl, r3
 8007930:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007934:	b10a      	cbz	r2, 800793a <_vfiprintf_r+0x86>
 8007936:	2a25      	cmp	r2, #37	@ 0x25
 8007938:	d1f9      	bne.n	800792e <_vfiprintf_r+0x7a>
 800793a:	ebba 0b04 	subs.w	fp, sl, r4
 800793e:	d00b      	beq.n	8007958 <_vfiprintf_r+0xa4>
 8007940:	465b      	mov	r3, fp
 8007942:	4622      	mov	r2, r4
 8007944:	4629      	mov	r1, r5
 8007946:	4630      	mov	r0, r6
 8007948:	f7ff ffa1 	bl	800788e <__sfputs_r>
 800794c:	3001      	adds	r0, #1
 800794e:	f000 80a7 	beq.w	8007aa0 <_vfiprintf_r+0x1ec>
 8007952:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007954:	445a      	add	r2, fp
 8007956:	9209      	str	r2, [sp, #36]	@ 0x24
 8007958:	f89a 3000 	ldrb.w	r3, [sl]
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 809f 	beq.w	8007aa0 <_vfiprintf_r+0x1ec>
 8007962:	2300      	movs	r3, #0
 8007964:	f04f 32ff 	mov.w	r2, #4294967295
 8007968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800796c:	f10a 0a01 	add.w	sl, sl, #1
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	9307      	str	r3, [sp, #28]
 8007974:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007978:	931a      	str	r3, [sp, #104]	@ 0x68
 800797a:	4654      	mov	r4, sl
 800797c:	2205      	movs	r2, #5
 800797e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007982:	4853      	ldr	r0, [pc, #332]	@ (8007ad0 <_vfiprintf_r+0x21c>)
 8007984:	f7f8 fcac 	bl	80002e0 <memchr>
 8007988:	9a04      	ldr	r2, [sp, #16]
 800798a:	b9d8      	cbnz	r0, 80079c4 <_vfiprintf_r+0x110>
 800798c:	06d1      	lsls	r1, r2, #27
 800798e:	bf44      	itt	mi
 8007990:	2320      	movmi	r3, #32
 8007992:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007996:	0713      	lsls	r3, r2, #28
 8007998:	bf44      	itt	mi
 800799a:	232b      	movmi	r3, #43	@ 0x2b
 800799c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079a0:	f89a 3000 	ldrb.w	r3, [sl]
 80079a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80079a6:	d015      	beq.n	80079d4 <_vfiprintf_r+0x120>
 80079a8:	9a07      	ldr	r2, [sp, #28]
 80079aa:	4654      	mov	r4, sl
 80079ac:	2000      	movs	r0, #0
 80079ae:	f04f 0c0a 	mov.w	ip, #10
 80079b2:	4621      	mov	r1, r4
 80079b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079b8:	3b30      	subs	r3, #48	@ 0x30
 80079ba:	2b09      	cmp	r3, #9
 80079bc:	d94b      	bls.n	8007a56 <_vfiprintf_r+0x1a2>
 80079be:	b1b0      	cbz	r0, 80079ee <_vfiprintf_r+0x13a>
 80079c0:	9207      	str	r2, [sp, #28]
 80079c2:	e014      	b.n	80079ee <_vfiprintf_r+0x13a>
 80079c4:	eba0 0308 	sub.w	r3, r0, r8
 80079c8:	fa09 f303 	lsl.w	r3, r9, r3
 80079cc:	4313      	orrs	r3, r2
 80079ce:	9304      	str	r3, [sp, #16]
 80079d0:	46a2      	mov	sl, r4
 80079d2:	e7d2      	b.n	800797a <_vfiprintf_r+0xc6>
 80079d4:	9b03      	ldr	r3, [sp, #12]
 80079d6:	1d19      	adds	r1, r3, #4
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	9103      	str	r1, [sp, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bfbb      	ittet	lt
 80079e0:	425b      	neglt	r3, r3
 80079e2:	f042 0202 	orrlt.w	r2, r2, #2
 80079e6:	9307      	strge	r3, [sp, #28]
 80079e8:	9307      	strlt	r3, [sp, #28]
 80079ea:	bfb8      	it	lt
 80079ec:	9204      	strlt	r2, [sp, #16]
 80079ee:	7823      	ldrb	r3, [r4, #0]
 80079f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80079f2:	d10a      	bne.n	8007a0a <_vfiprintf_r+0x156>
 80079f4:	7863      	ldrb	r3, [r4, #1]
 80079f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80079f8:	d132      	bne.n	8007a60 <_vfiprintf_r+0x1ac>
 80079fa:	9b03      	ldr	r3, [sp, #12]
 80079fc:	1d1a      	adds	r2, r3, #4
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	9203      	str	r2, [sp, #12]
 8007a02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a06:	3402      	adds	r4, #2
 8007a08:	9305      	str	r3, [sp, #20]
 8007a0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ae0 <_vfiprintf_r+0x22c>
 8007a0e:	7821      	ldrb	r1, [r4, #0]
 8007a10:	2203      	movs	r2, #3
 8007a12:	4650      	mov	r0, sl
 8007a14:	f7f8 fc64 	bl	80002e0 <memchr>
 8007a18:	b138      	cbz	r0, 8007a2a <_vfiprintf_r+0x176>
 8007a1a:	9b04      	ldr	r3, [sp, #16]
 8007a1c:	eba0 000a 	sub.w	r0, r0, sl
 8007a20:	2240      	movs	r2, #64	@ 0x40
 8007a22:	4082      	lsls	r2, r0
 8007a24:	4313      	orrs	r3, r2
 8007a26:	3401      	adds	r4, #1
 8007a28:	9304      	str	r3, [sp, #16]
 8007a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2e:	4829      	ldr	r0, [pc, #164]	@ (8007ad4 <_vfiprintf_r+0x220>)
 8007a30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a34:	2206      	movs	r2, #6
 8007a36:	f7f8 fc53 	bl	80002e0 <memchr>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	d03f      	beq.n	8007abe <_vfiprintf_r+0x20a>
 8007a3e:	4b26      	ldr	r3, [pc, #152]	@ (8007ad8 <_vfiprintf_r+0x224>)
 8007a40:	bb1b      	cbnz	r3, 8007a8a <_vfiprintf_r+0x1d6>
 8007a42:	9b03      	ldr	r3, [sp, #12]
 8007a44:	3307      	adds	r3, #7
 8007a46:	f023 0307 	bic.w	r3, r3, #7
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	9303      	str	r3, [sp, #12]
 8007a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a50:	443b      	add	r3, r7
 8007a52:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a54:	e76a      	b.n	800792c <_vfiprintf_r+0x78>
 8007a56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	2001      	movs	r0, #1
 8007a5e:	e7a8      	b.n	80079b2 <_vfiprintf_r+0xfe>
 8007a60:	2300      	movs	r3, #0
 8007a62:	3401      	adds	r4, #1
 8007a64:	9305      	str	r3, [sp, #20]
 8007a66:	4619      	mov	r1, r3
 8007a68:	f04f 0c0a 	mov.w	ip, #10
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a72:	3a30      	subs	r2, #48	@ 0x30
 8007a74:	2a09      	cmp	r2, #9
 8007a76:	d903      	bls.n	8007a80 <_vfiprintf_r+0x1cc>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0c6      	beq.n	8007a0a <_vfiprintf_r+0x156>
 8007a7c:	9105      	str	r1, [sp, #20]
 8007a7e:	e7c4      	b.n	8007a0a <_vfiprintf_r+0x156>
 8007a80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a84:	4604      	mov	r4, r0
 8007a86:	2301      	movs	r3, #1
 8007a88:	e7f0      	b.n	8007a6c <_vfiprintf_r+0x1b8>
 8007a8a:	ab03      	add	r3, sp, #12
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	462a      	mov	r2, r5
 8007a90:	4b12      	ldr	r3, [pc, #72]	@ (8007adc <_vfiprintf_r+0x228>)
 8007a92:	a904      	add	r1, sp, #16
 8007a94:	4630      	mov	r0, r6
 8007a96:	f7fd fe4f 	bl	8005738 <_printf_float>
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	1c78      	adds	r0, r7, #1
 8007a9e:	d1d6      	bne.n	8007a4e <_vfiprintf_r+0x19a>
 8007aa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007aa2:	07d9      	lsls	r1, r3, #31
 8007aa4:	d405      	bmi.n	8007ab2 <_vfiprintf_r+0x1fe>
 8007aa6:	89ab      	ldrh	r3, [r5, #12]
 8007aa8:	059a      	lsls	r2, r3, #22
 8007aaa:	d402      	bmi.n	8007ab2 <_vfiprintf_r+0x1fe>
 8007aac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007aae:	f7fe fc73 	bl	8006398 <__retarget_lock_release_recursive>
 8007ab2:	89ab      	ldrh	r3, [r5, #12]
 8007ab4:	065b      	lsls	r3, r3, #25
 8007ab6:	f53f af1f 	bmi.w	80078f8 <_vfiprintf_r+0x44>
 8007aba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007abc:	e71e      	b.n	80078fc <_vfiprintf_r+0x48>
 8007abe:	ab03      	add	r3, sp, #12
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	462a      	mov	r2, r5
 8007ac4:	4b05      	ldr	r3, [pc, #20]	@ (8007adc <_vfiprintf_r+0x228>)
 8007ac6:	a904      	add	r1, sp, #16
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f7fe f8bd 	bl	8005c48 <_printf_i>
 8007ace:	e7e4      	b.n	8007a9a <_vfiprintf_r+0x1e6>
 8007ad0:	08008270 	.word	0x08008270
 8007ad4:	0800827a 	.word	0x0800827a
 8007ad8:	08005739 	.word	0x08005739
 8007adc:	0800788f 	.word	0x0800788f
 8007ae0:	08008276 	.word	0x08008276

08007ae4 <__sflush_r>:
 8007ae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aec:	0716      	lsls	r6, r2, #28
 8007aee:	4605      	mov	r5, r0
 8007af0:	460c      	mov	r4, r1
 8007af2:	d454      	bmi.n	8007b9e <__sflush_r+0xba>
 8007af4:	684b      	ldr	r3, [r1, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	dc02      	bgt.n	8007b00 <__sflush_r+0x1c>
 8007afa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	dd48      	ble.n	8007b92 <__sflush_r+0xae>
 8007b00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b02:	2e00      	cmp	r6, #0
 8007b04:	d045      	beq.n	8007b92 <__sflush_r+0xae>
 8007b06:	2300      	movs	r3, #0
 8007b08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b0c:	682f      	ldr	r7, [r5, #0]
 8007b0e:	6a21      	ldr	r1, [r4, #32]
 8007b10:	602b      	str	r3, [r5, #0]
 8007b12:	d030      	beq.n	8007b76 <__sflush_r+0x92>
 8007b14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	0759      	lsls	r1, r3, #29
 8007b1a:	d505      	bpl.n	8007b28 <__sflush_r+0x44>
 8007b1c:	6863      	ldr	r3, [r4, #4]
 8007b1e:	1ad2      	subs	r2, r2, r3
 8007b20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b22:	b10b      	cbz	r3, 8007b28 <__sflush_r+0x44>
 8007b24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b26:	1ad2      	subs	r2, r2, r3
 8007b28:	2300      	movs	r3, #0
 8007b2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b2c:	6a21      	ldr	r1, [r4, #32]
 8007b2e:	4628      	mov	r0, r5
 8007b30:	47b0      	blx	r6
 8007b32:	1c43      	adds	r3, r0, #1
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	d106      	bne.n	8007b46 <__sflush_r+0x62>
 8007b38:	6829      	ldr	r1, [r5, #0]
 8007b3a:	291d      	cmp	r1, #29
 8007b3c:	d82b      	bhi.n	8007b96 <__sflush_r+0xb2>
 8007b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8007be8 <__sflush_r+0x104>)
 8007b40:	410a      	asrs	r2, r1
 8007b42:	07d6      	lsls	r6, r2, #31
 8007b44:	d427      	bmi.n	8007b96 <__sflush_r+0xb2>
 8007b46:	2200      	movs	r2, #0
 8007b48:	6062      	str	r2, [r4, #4]
 8007b4a:	04d9      	lsls	r1, r3, #19
 8007b4c:	6922      	ldr	r2, [r4, #16]
 8007b4e:	6022      	str	r2, [r4, #0]
 8007b50:	d504      	bpl.n	8007b5c <__sflush_r+0x78>
 8007b52:	1c42      	adds	r2, r0, #1
 8007b54:	d101      	bne.n	8007b5a <__sflush_r+0x76>
 8007b56:	682b      	ldr	r3, [r5, #0]
 8007b58:	b903      	cbnz	r3, 8007b5c <__sflush_r+0x78>
 8007b5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b5e:	602f      	str	r7, [r5, #0]
 8007b60:	b1b9      	cbz	r1, 8007b92 <__sflush_r+0xae>
 8007b62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b66:	4299      	cmp	r1, r3
 8007b68:	d002      	beq.n	8007b70 <__sflush_r+0x8c>
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f7ff f9f6 	bl	8006f5c <_free_r>
 8007b70:	2300      	movs	r3, #0
 8007b72:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b74:	e00d      	b.n	8007b92 <__sflush_r+0xae>
 8007b76:	2301      	movs	r3, #1
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b0      	blx	r6
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	1c50      	adds	r0, r2, #1
 8007b80:	d1c9      	bne.n	8007b16 <__sflush_r+0x32>
 8007b82:	682b      	ldr	r3, [r5, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d0c6      	beq.n	8007b16 <__sflush_r+0x32>
 8007b88:	2b1d      	cmp	r3, #29
 8007b8a:	d001      	beq.n	8007b90 <__sflush_r+0xac>
 8007b8c:	2b16      	cmp	r3, #22
 8007b8e:	d11e      	bne.n	8007bce <__sflush_r+0xea>
 8007b90:	602f      	str	r7, [r5, #0]
 8007b92:	2000      	movs	r0, #0
 8007b94:	e022      	b.n	8007bdc <__sflush_r+0xf8>
 8007b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b9a:	b21b      	sxth	r3, r3
 8007b9c:	e01b      	b.n	8007bd6 <__sflush_r+0xf2>
 8007b9e:	690f      	ldr	r7, [r1, #16]
 8007ba0:	2f00      	cmp	r7, #0
 8007ba2:	d0f6      	beq.n	8007b92 <__sflush_r+0xae>
 8007ba4:	0793      	lsls	r3, r2, #30
 8007ba6:	680e      	ldr	r6, [r1, #0]
 8007ba8:	bf08      	it	eq
 8007baa:	694b      	ldreq	r3, [r1, #20]
 8007bac:	600f      	str	r7, [r1, #0]
 8007bae:	bf18      	it	ne
 8007bb0:	2300      	movne	r3, #0
 8007bb2:	eba6 0807 	sub.w	r8, r6, r7
 8007bb6:	608b      	str	r3, [r1, #8]
 8007bb8:	f1b8 0f00 	cmp.w	r8, #0
 8007bbc:	dde9      	ble.n	8007b92 <__sflush_r+0xae>
 8007bbe:	6a21      	ldr	r1, [r4, #32]
 8007bc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007bc2:	4643      	mov	r3, r8
 8007bc4:	463a      	mov	r2, r7
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b0      	blx	r6
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	dc08      	bgt.n	8007be0 <__sflush_r+0xfc>
 8007bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bd6:	81a3      	strh	r3, [r4, #12]
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be0:	4407      	add	r7, r0
 8007be2:	eba8 0800 	sub.w	r8, r8, r0
 8007be6:	e7e7      	b.n	8007bb8 <__sflush_r+0xd4>
 8007be8:	dfbffffe 	.word	0xdfbffffe

08007bec <_fflush_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	690b      	ldr	r3, [r1, #16]
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	b913      	cbnz	r3, 8007bfc <_fflush_r+0x10>
 8007bf6:	2500      	movs	r5, #0
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}
 8007bfc:	b118      	cbz	r0, 8007c06 <_fflush_r+0x1a>
 8007bfe:	6a03      	ldr	r3, [r0, #32]
 8007c00:	b90b      	cbnz	r3, 8007c06 <_fflush_r+0x1a>
 8007c02:	f7fe f9cd 	bl	8005fa0 <__sinit>
 8007c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0f3      	beq.n	8007bf6 <_fflush_r+0xa>
 8007c0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c10:	07d0      	lsls	r0, r2, #31
 8007c12:	d404      	bmi.n	8007c1e <_fflush_r+0x32>
 8007c14:	0599      	lsls	r1, r3, #22
 8007c16:	d402      	bmi.n	8007c1e <_fflush_r+0x32>
 8007c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c1a:	f7fe fbbc 	bl	8006396 <__retarget_lock_acquire_recursive>
 8007c1e:	4628      	mov	r0, r5
 8007c20:	4621      	mov	r1, r4
 8007c22:	f7ff ff5f 	bl	8007ae4 <__sflush_r>
 8007c26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c28:	07da      	lsls	r2, r3, #31
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	d4e4      	bmi.n	8007bf8 <_fflush_r+0xc>
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	059b      	lsls	r3, r3, #22
 8007c32:	d4e1      	bmi.n	8007bf8 <_fflush_r+0xc>
 8007c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c36:	f7fe fbaf 	bl	8006398 <__retarget_lock_release_recursive>
 8007c3a:	e7dd      	b.n	8007bf8 <_fflush_r+0xc>

08007c3c <__swhatbuf_r>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	460c      	mov	r4, r1
 8007c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c44:	2900      	cmp	r1, #0
 8007c46:	b096      	sub	sp, #88	@ 0x58
 8007c48:	4615      	mov	r5, r2
 8007c4a:	461e      	mov	r6, r3
 8007c4c:	da0d      	bge.n	8007c6a <__swhatbuf_r+0x2e>
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c54:	f04f 0100 	mov.w	r1, #0
 8007c58:	bf14      	ite	ne
 8007c5a:	2340      	movne	r3, #64	@ 0x40
 8007c5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c60:	2000      	movs	r0, #0
 8007c62:	6031      	str	r1, [r6, #0]
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	b016      	add	sp, #88	@ 0x58
 8007c68:	bd70      	pop	{r4, r5, r6, pc}
 8007c6a:	466a      	mov	r2, sp
 8007c6c:	f000 f848 	bl	8007d00 <_fstat_r>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	dbec      	blt.n	8007c4e <__swhatbuf_r+0x12>
 8007c74:	9901      	ldr	r1, [sp, #4]
 8007c76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c7e:	4259      	negs	r1, r3
 8007c80:	4159      	adcs	r1, r3
 8007c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c86:	e7eb      	b.n	8007c60 <__swhatbuf_r+0x24>

08007c88 <__smakebuf_r>:
 8007c88:	898b      	ldrh	r3, [r1, #12]
 8007c8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c8c:	079d      	lsls	r5, r3, #30
 8007c8e:	4606      	mov	r6, r0
 8007c90:	460c      	mov	r4, r1
 8007c92:	d507      	bpl.n	8007ca4 <__smakebuf_r+0x1c>
 8007c94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	6123      	str	r3, [r4, #16]
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	6163      	str	r3, [r4, #20]
 8007ca0:	b003      	add	sp, #12
 8007ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca4:	ab01      	add	r3, sp, #4
 8007ca6:	466a      	mov	r2, sp
 8007ca8:	f7ff ffc8 	bl	8007c3c <__swhatbuf_r>
 8007cac:	9f00      	ldr	r7, [sp, #0]
 8007cae:	4605      	mov	r5, r0
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff f9c6 	bl	8007044 <_malloc_r>
 8007cb8:	b948      	cbnz	r0, 8007cce <__smakebuf_r+0x46>
 8007cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cbe:	059a      	lsls	r2, r3, #22
 8007cc0:	d4ee      	bmi.n	8007ca0 <__smakebuf_r+0x18>
 8007cc2:	f023 0303 	bic.w	r3, r3, #3
 8007cc6:	f043 0302 	orr.w	r3, r3, #2
 8007cca:	81a3      	strh	r3, [r4, #12]
 8007ccc:	e7e2      	b.n	8007c94 <__smakebuf_r+0xc>
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	6020      	str	r0, [r4, #0]
 8007cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	9b01      	ldr	r3, [sp, #4]
 8007cda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007cde:	b15b      	cbz	r3, 8007cf8 <__smakebuf_r+0x70>
 8007ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	f000 f81d 	bl	8007d24 <_isatty_r>
 8007cea:	b128      	cbz	r0, 8007cf8 <__smakebuf_r+0x70>
 8007cec:	89a3      	ldrh	r3, [r4, #12]
 8007cee:	f023 0303 	bic.w	r3, r3, #3
 8007cf2:	f043 0301 	orr.w	r3, r3, #1
 8007cf6:	81a3      	strh	r3, [r4, #12]
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	431d      	orrs	r5, r3
 8007cfc:	81a5      	strh	r5, [r4, #12]
 8007cfe:	e7cf      	b.n	8007ca0 <__smakebuf_r+0x18>

08007d00 <_fstat_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4d07      	ldr	r5, [pc, #28]	@ (8007d20 <_fstat_r+0x20>)
 8007d04:	2300      	movs	r3, #0
 8007d06:	4604      	mov	r4, r0
 8007d08:	4608      	mov	r0, r1
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	602b      	str	r3, [r5, #0]
 8007d0e:	f7f9 faf8 	bl	8001302 <_fstat>
 8007d12:	1c43      	adds	r3, r0, #1
 8007d14:	d102      	bne.n	8007d1c <_fstat_r+0x1c>
 8007d16:	682b      	ldr	r3, [r5, #0]
 8007d18:	b103      	cbz	r3, 8007d1c <_fstat_r+0x1c>
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	bd38      	pop	{r3, r4, r5, pc}
 8007d1e:	bf00      	nop
 8007d20:	24000404 	.word	0x24000404

08007d24 <_isatty_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4d06      	ldr	r5, [pc, #24]	@ (8007d40 <_isatty_r+0x1c>)
 8007d28:	2300      	movs	r3, #0
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	4608      	mov	r0, r1
 8007d2e:	602b      	str	r3, [r5, #0]
 8007d30:	f7f9 faf7 	bl	8001322 <_isatty>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_isatty_r+0x1a>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_isatty_r+0x1a>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	24000404 	.word	0x24000404

08007d44 <_sbrk_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	4d06      	ldr	r5, [pc, #24]	@ (8007d60 <_sbrk_r+0x1c>)
 8007d48:	2300      	movs	r3, #0
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	602b      	str	r3, [r5, #0]
 8007d50:	f7f9 fb00 	bl	8001354 <_sbrk>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	d102      	bne.n	8007d5e <_sbrk_r+0x1a>
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	b103      	cbz	r3, 8007d5e <_sbrk_r+0x1a>
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	bd38      	pop	{r3, r4, r5, pc}
 8007d60:	24000404 	.word	0x24000404

08007d64 <memcpy>:
 8007d64:	440a      	add	r2, r1
 8007d66:	4291      	cmp	r1, r2
 8007d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d6c:	d100      	bne.n	8007d70 <memcpy+0xc>
 8007d6e:	4770      	bx	lr
 8007d70:	b510      	push	{r4, lr}
 8007d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d7a:	4291      	cmp	r1, r2
 8007d7c:	d1f9      	bne.n	8007d72 <memcpy+0xe>
 8007d7e:	bd10      	pop	{r4, pc}

08007d80 <__assert_func>:
 8007d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d82:	4614      	mov	r4, r2
 8007d84:	461a      	mov	r2, r3
 8007d86:	4b09      	ldr	r3, [pc, #36]	@ (8007dac <__assert_func+0x2c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	68d8      	ldr	r0, [r3, #12]
 8007d8e:	b954      	cbnz	r4, 8007da6 <__assert_func+0x26>
 8007d90:	4b07      	ldr	r3, [pc, #28]	@ (8007db0 <__assert_func+0x30>)
 8007d92:	461c      	mov	r4, r3
 8007d94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d98:	9100      	str	r1, [sp, #0]
 8007d9a:	462b      	mov	r3, r5
 8007d9c:	4905      	ldr	r1, [pc, #20]	@ (8007db4 <__assert_func+0x34>)
 8007d9e:	f000 f841 	bl	8007e24 <fiprintf>
 8007da2:	f000 f851 	bl	8007e48 <abort>
 8007da6:	4b04      	ldr	r3, [pc, #16]	@ (8007db8 <__assert_func+0x38>)
 8007da8:	e7f4      	b.n	8007d94 <__assert_func+0x14>
 8007daa:	bf00      	nop
 8007dac:	24000024 	.word	0x24000024
 8007db0:	080082c6 	.word	0x080082c6
 8007db4:	08008298 	.word	0x08008298
 8007db8:	0800828b 	.word	0x0800828b

08007dbc <_calloc_r>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	fba1 5402 	umull	r5, r4, r1, r2
 8007dc2:	b93c      	cbnz	r4, 8007dd4 <_calloc_r+0x18>
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	f7ff f93d 	bl	8007044 <_malloc_r>
 8007dca:	4606      	mov	r6, r0
 8007dcc:	b928      	cbnz	r0, 8007dda <_calloc_r+0x1e>
 8007dce:	2600      	movs	r6, #0
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	220c      	movs	r2, #12
 8007dd6:	6002      	str	r2, [r0, #0]
 8007dd8:	e7f9      	b.n	8007dce <_calloc_r+0x12>
 8007dda:	462a      	mov	r2, r5
 8007ddc:	4621      	mov	r1, r4
 8007dde:	f7fe fa5d 	bl	800629c <memset>
 8007de2:	e7f5      	b.n	8007dd0 <_calloc_r+0x14>

08007de4 <__ascii_mbtowc>:
 8007de4:	b082      	sub	sp, #8
 8007de6:	b901      	cbnz	r1, 8007dea <__ascii_mbtowc+0x6>
 8007de8:	a901      	add	r1, sp, #4
 8007dea:	b142      	cbz	r2, 8007dfe <__ascii_mbtowc+0x1a>
 8007dec:	b14b      	cbz	r3, 8007e02 <__ascii_mbtowc+0x1e>
 8007dee:	7813      	ldrb	r3, [r2, #0]
 8007df0:	600b      	str	r3, [r1, #0]
 8007df2:	7812      	ldrb	r2, [r2, #0]
 8007df4:	1e10      	subs	r0, r2, #0
 8007df6:	bf18      	it	ne
 8007df8:	2001      	movne	r0, #1
 8007dfa:	b002      	add	sp, #8
 8007dfc:	4770      	bx	lr
 8007dfe:	4610      	mov	r0, r2
 8007e00:	e7fb      	b.n	8007dfa <__ascii_mbtowc+0x16>
 8007e02:	f06f 0001 	mvn.w	r0, #1
 8007e06:	e7f8      	b.n	8007dfa <__ascii_mbtowc+0x16>

08007e08 <__ascii_wctomb>:
 8007e08:	4603      	mov	r3, r0
 8007e0a:	4608      	mov	r0, r1
 8007e0c:	b141      	cbz	r1, 8007e20 <__ascii_wctomb+0x18>
 8007e0e:	2aff      	cmp	r2, #255	@ 0xff
 8007e10:	d904      	bls.n	8007e1c <__ascii_wctomb+0x14>
 8007e12:	228a      	movs	r2, #138	@ 0x8a
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1a:	4770      	bx	lr
 8007e1c:	700a      	strb	r2, [r1, #0]
 8007e1e:	2001      	movs	r0, #1
 8007e20:	4770      	bx	lr
	...

08007e24 <fiprintf>:
 8007e24:	b40e      	push	{r1, r2, r3}
 8007e26:	b503      	push	{r0, r1, lr}
 8007e28:	4601      	mov	r1, r0
 8007e2a:	ab03      	add	r3, sp, #12
 8007e2c:	4805      	ldr	r0, [pc, #20]	@ (8007e44 <fiprintf+0x20>)
 8007e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e32:	6800      	ldr	r0, [r0, #0]
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	f7ff fd3d 	bl	80078b4 <_vfiprintf_r>
 8007e3a:	b002      	add	sp, #8
 8007e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e40:	b003      	add	sp, #12
 8007e42:	4770      	bx	lr
 8007e44:	24000024 	.word	0x24000024

08007e48 <abort>:
 8007e48:	b508      	push	{r3, lr}
 8007e4a:	2006      	movs	r0, #6
 8007e4c:	f000 f82c 	bl	8007ea8 <raise>
 8007e50:	2001      	movs	r0, #1
 8007e52:	f7f9 fa22 	bl	800129a <_exit>

08007e56 <_raise_r>:
 8007e56:	291f      	cmp	r1, #31
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	d904      	bls.n	8007e6a <_raise_r+0x14>
 8007e60:	2316      	movs	r3, #22
 8007e62:	6003      	str	r3, [r0, #0]
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	bd38      	pop	{r3, r4, r5, pc}
 8007e6a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007e6c:	b112      	cbz	r2, 8007e74 <_raise_r+0x1e>
 8007e6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e72:	b94b      	cbnz	r3, 8007e88 <_raise_r+0x32>
 8007e74:	4628      	mov	r0, r5
 8007e76:	f000 f831 	bl	8007edc <_getpid_r>
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	4601      	mov	r1, r0
 8007e7e:	4628      	mov	r0, r5
 8007e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e84:	f000 b818 	b.w	8007eb8 <_kill_r>
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d00a      	beq.n	8007ea2 <_raise_r+0x4c>
 8007e8c:	1c59      	adds	r1, r3, #1
 8007e8e:	d103      	bne.n	8007e98 <_raise_r+0x42>
 8007e90:	2316      	movs	r3, #22
 8007e92:	6003      	str	r3, [r0, #0]
 8007e94:	2001      	movs	r0, #1
 8007e96:	e7e7      	b.n	8007e68 <_raise_r+0x12>
 8007e98:	2100      	movs	r1, #0
 8007e9a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4798      	blx	r3
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e7e0      	b.n	8007e68 <_raise_r+0x12>
	...

08007ea8 <raise>:
 8007ea8:	4b02      	ldr	r3, [pc, #8]	@ (8007eb4 <raise+0xc>)
 8007eaa:	4601      	mov	r1, r0
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	f7ff bfd2 	b.w	8007e56 <_raise_r>
 8007eb2:	bf00      	nop
 8007eb4:	24000024 	.word	0x24000024

08007eb8 <_kill_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d07      	ldr	r5, [pc, #28]	@ (8007ed8 <_kill_r+0x20>)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	602b      	str	r3, [r5, #0]
 8007ec6:	f7f9 f9d8 	bl	800127a <_kill>
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	d102      	bne.n	8007ed4 <_kill_r+0x1c>
 8007ece:	682b      	ldr	r3, [r5, #0]
 8007ed0:	b103      	cbz	r3, 8007ed4 <_kill_r+0x1c>
 8007ed2:	6023      	str	r3, [r4, #0]
 8007ed4:	bd38      	pop	{r3, r4, r5, pc}
 8007ed6:	bf00      	nop
 8007ed8:	24000404 	.word	0x24000404

08007edc <_getpid_r>:
 8007edc:	f7f9 b9c5 	b.w	800126a <_getpid>

08007ee0 <_init>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr

08007eec <_fini>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	bf00      	nop
 8007ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef2:	bc08      	pop	{r3}
 8007ef4:	469e      	mov	lr, r3
 8007ef6:	4770      	bx	lr
